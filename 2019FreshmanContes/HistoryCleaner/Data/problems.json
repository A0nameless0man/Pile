[{"createdAt":"2019-08-17T11:34:12.925Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1001,"title":"a+b的问题","content":"#### 题目描述\n> 给定两个整数 $a, b$ ($a, b$ 均不超过 ```int``` 类型的表示范围)，求出 $a + b$ 的和。\n\n#### 输入描述\n> 每行输入两个整数 $a$ 和 $b$，用空格隔开。\n\n#### 输出描述\n> $a + b$ 的值。\n\n#### 样例输入\n\n```\n1 2\n```\n\n#### 样例输出\n\n```\n3\n```\n\n","source":"admin","timeLimit":1,"memoryLimit":4,"difficulty":null,"cases":5,"multiCases":true,"submits":3110,"accepts":1609,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:12.929Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1002,"title":"又是a+b","content":"#### 题目描述:\n> 给定两个整数 a, b (a, b 均不超过 int 类型的表示范围)，求出 a + b 的和。\n\n#### 输入描述：\n> 多组输入，每组输入为一行，里面有 2 个数 a, b。\n\n#### 输出描述：\n> 对于每一组输入，输出一个值为该组 a + b 的和。\n\n#### 样例输入:\n> 1 2\n\n> 2 3\n\n#### 样例输出:\n> 3\n\n> 5\n\n#### 注意事项:\n> 建议做题前仔细阅读 [ 帮助页面 ](/help) 或下载文档 [《OJ 使用指南与常见问题答疑》](/download_center) 了解必要知识。\n\n> ** [ 对于使用 C/C++ 语言提交的同学 ] **\n\n> > 1). 主函数的返回值类型必须声明为 ** int **，且需要在函数末尾返回 0；\n\n> > 2). OJ 采用的语言标准为 ** GNU C11 / GNU C++11 ** 标准，不要使用任何不兼容的内容；\n\n> > 3). 不得调用依赖于编译环境或操作系统的特殊函数；\n\n> > 4). 代码中所用库函数依赖到的头文件必须写明 #include<xxx> ，即 OJ 不支持通过工程设置而省略常用头文件；\n\n> > 5). 推荐的开发环境为 ** DevC++ 5.10 with TDM-GCC4.8.1 ** (Windows 平台) 或 ** Code::Blocks ** (Linux 平台)，不建议使用 ** Visual C++ 6.0 ** 或 ** Visual Stdio **。\n\n> ** [ 对于使用 Java 语言提交的同学 ] **\n\n> > 1). 主类必须命名为 ** Main **，且代码中不可使用 ** package ** 语句；\n\n> > 2). OJ 采用的语言标准为 ** Java8 ** 标准，不要使用任何不兼容的内容；\n\n> > 3). 推荐的开发环境为 ** Eclipse **。\n\n> ** [ 其他 ] **\n\n> > 提交程序时，注意选择所提交的语言；\n\n> > 除非特殊说明，** OJ 所有题目一律采用多组输入 ** [什么是多组输入？](/download_center) ；\n\n> > 请严格按要求输出，** 不要画蛇添足地打印类似：“请您输入...” 的多余内容 **；\n\n> > 所需要的开发工具或环境可在 [下载中心](/download_center) 下载。","source":"nuistoj","timeLimit":1,"memoryLimit":4,"difficulty":null,"cases":1,"multiCases":true,"submits":2381,"accepts":1123,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:12.932Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1003,"title":"a+-*/b ","content":"#### 题目描述:\n> 给定 2 个正整数 a, b (a, b 均为正整数且不超过 unsigned int 类型的表示范围)，以及中间的运算符号，求出最后的计算结果，并输出。\n\n#### 输入描述：\n> 多组输入，输入的第一行为一个正整数 n，表示接下来有 n 组数据，每一行为两个正整数 a, b。a 和 b 的中间有一个运算符号，必为 +-*/ 中的一种，没有括号。\n\n#### 输出描述：\n> 对于每一组数据，求出 a 符号 b 的运算值（除法为整数除法）。不含有浮点运算。\n\n#### 样例输入:\n> 2\n\n> 1+2\n\n> 1-2\n\n#### 样例输出:\n> 3\n\n> -1","source":"nuistoj","timeLimit":1,"memoryLimit":4,"difficulty":null,"cases":1,"multiCases":true,"submits":1084,"accepts":466,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:12.936Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1004,"title":"还是a+b","content":"#### 题目描述:\n> 给定 2 个正整数 a, b，a 和 b 最多可能有 40 位，求出 a + b 的和。\n\n#### 输入描述：\n> 两个正整数 a, b，a 和 b 最多可能有 40 位。一行表示一个数。\n\n#### 输出描述：\n> a + b 的和。\n\n#### 样例输入:\n>     111111111111111111111111111111111111111\n\n>     222222222222222222222222222222222222222\n\n#### 样例输出:\n>     333333333333333333333333333333333333333","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":601,"accepts":222,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:12.939Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1005,"title":"最大公约数","content":"#### 题目描述:\n> 给定 2 个数，a 和 b (3 < a, b <= 10000)，求出 a 和 b 的最大公约数。\n\n#### 输入描述：\n> 多组输入，输入的第一行为一个正整数 n，表示接下来有 n 组数据，每一行为两个正整数 a, b (3 < a, b <= 10000)。\n\n#### 输出描述：\n> 对于每一组数据，求出 a 和 b 的最大公约数。\n\n#### 样例输入:\n> 2\n\n> 2 4\n\n> 3 5\n\n#### 样例输出:\n> 2\n\n> 1","source":"admin","timeLimit":1,"memoryLimit":4,"difficulty":null,"cases":1,"multiCases":true,"submits":2499,"accepts":864,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:12.943Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1006,"title":"最小公倍数","content":"#### 题目描述:\n> 给定 2 个数，a 和 b (3 < a, b <= 10000)，求出 a 和 b 的最小公倍数。\n\n#### 输入描述：\n> 多组输入，输入的第一行为一个正整数 n，表示接下来有 n 组数据，每一行为两个正整数 a, b (3 < a, b <= 10000)。\n\n#### 输出描述：\n> 对于每一组数据，求出 a 和 b 的最小公倍数。\n\n#### 样例输入:\n> 2\n\n> 2 4\n\n> 3 5\n\n#### 样例输出:\n> 4\n\n> 15","source":"admin","timeLimit":1,"memoryLimit":4,"difficulty":null,"cases":1,"multiCases":true,"submits":1466,"accepts":895,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:12.944Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1007,"title":"还是最大公约数","content":"#### 题目描述:\n> 给定 3 个数，a, b 和 c (3 < a, b, c <= 10000)，求出 a, b 和 c 的最大公约数。\n\n#### 输入描述：\n> 多组输入，输入的第一行为一个正整数 n，表示接下来有 n 组数据，每一行为 3 个正整数 a, b, c (3 < a,b,c <= 10000)。\n\n#### 输出描述：\n> 对于每一组数据，求出 a, b 和 c 的最大公约数。\n\n#### 样例输入:\n> 2\n\n> 2 3 4\n\n> 3 6 9\n\n#### 样例输出:\n> 1\n\n> 3","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":196,"accepts":166,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:12.952Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1008,"title":"质数还是合数","content":"#### 题目描述:\n> 给定一个正整数 n (2 <= n < 10000)，判断是否为质数。\n\n#### 输入描述：\n> 多组输入，每行一个 n (2 <= n <= 10000)。\n\n#### 输出描述：\n> 对于每一组数，如果是质数则输出 Yes，否则输出 No。\n\n#### 样例输入:\n> 2\n\n> 3\n\n> 4\n\n#### 样例输出:\n> Yes\n\n> Yes\n\n> No","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":2469,"accepts":802,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:12.956Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1009,"title":"好多质数","content":"#### 题目描述:\n> 给定一个质数 n (5 < n < 1000)，求出小于 n 的所有质数的和。\n\n#### 输入描述：\n> 多组输入，每行一个 n (5 < n < 1000)。\n\n#### 输出描述：\n> 对于每组数据，输出为一行，值为小于 n 的所有质数的和。\n\n#### 样例输入:\n> 6\n\n> 7\n\n#### 样例输出:\n> 10\n\n> 10","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":226,"accepts":142,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:12.959Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1010,"title":"8进制","content":"#### 题目描述:\n> 给定一个正整数，写出它的 8 进制表示。\n\n#### 输入描述：\n> 多组输入，输入的第一行为一个正整数 n，表示接下来有 n 组数据，每一行为 1 个正整数 a (0 < a <= 10000)。\n\n#### 输出描述：\n> 对于每一组数据，求出 a 的 8 进制表示法。\n\n#### 样例输入:\n> 2\n\n> 5\n\n> 10\n\n#### 样例输出:\n> 5\n\n> 12","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":1494,"accepts":740,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.019Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1027,"title":"坏人必须死","content":"#### 题目描述:\n> 有 m 个好人和 m 个坏人坐成一个圈，前 m 个人是好人（编号为 1, 2, 3, ..., m），后 m 个人是坏人（编号为 m + 1, m + 2, ..., 2m）。现在他们开始循环报数，要求从编号为 1 的人开始报，如果有人报到 k 则他必须死亡，而死掉的人的下一个人则继续从 1 开始报数。请求出最小的 k 使得，所有的坏人都死掉而好人都活下来。\n\n#### 输入描述：\n> 多组输入，每组输入 1 行，为一个整数 m (1 <= m <= 12)\n\n#### 输出描述：\n> 对于每组输入，输出为 1 个整数 k 为使得坏人都死掉的最小报的数\n\n#### 样例输入:\n> 3\n\n> 4\n\n#### 样例输出:\n> 5\n\n> 30","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":106,"accepts":44,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.024Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1029,"title":"滑雪","content":"#### 题目描述:\n> 小明喜欢滑雪，为了获得速度，滑的区域必须向下倾斜，而且当你滑到坡底，你不得不再次走上坡或者等待升降机来载你。小明想知道在一个区域中最长底滑坡。区域由一个二维数组给出。数组的每个数字代表点的高度。下面是一个例子：\n\n>     \n     1  2  3  4 5\n    16 17 18 19 6\n    15 24 25 20 7\n    14 23 22 21 8\n    13 12 11 10 9\n\n> 一个人可以从某个点滑向上下左右相邻四个点之一，当且仅当高度减小。在上面的例子中，一条可滑行的滑坡为 24-17-16-1。当然 25-24-23-...-3-2-1 更长。事实上，这是最长的一条。\n\n#### 输入描述：\n> 输入的第一行表示区域的行数 R 和列数 C (1 <= R, C <= 100)。下面是 R 行，每行有 C 个整数，代表高度 h，0 <= h <= 10000。\n\n#### 输出描述：\n> 输出最长区域的长度。\n\n#### 样例输入:\n> 5 5\n\n> 1 2 3 4 5\n\n> 16 17 18 19 6\n\n> 15 24 25 20 7\n\n> 14 23 22 21 8\n\n> 13 12 11 10 9\n\n#### 样例输出:\n> 25","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":50,"accepts":33,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.038Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1034,"title":"字符串的循环移位","content":"#### 题目描述:\n> 给定一个字符串长度为 n 的字符串 s1 (10 < n < 100)，求出将字符串循环向左移动 k 位的字符串 s2 (1 < k < n)，例如：字符串 abcdefghijk，循环向左移动 3 位就变成 defghijkabc\n\n#### 输入描述：\n> 输入仅两行，第一行为左移的位数 k，第二行为字符串 s1。\n\n#### 输出描述：\n> 输出仅一行，为将字符串 s1 左移 k 位得到的字符串 s2。\n\n#### 样例输入:\n> 3\n\n> abcdefghijk\n\n#### 样例输出:\n> defghijkabc","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":112,"accepts":76,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.069Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1043,"title":"直角三角形","content":"#### 题目描述:\n> 给定一个三角形的三边，请判断他能否成为直角三角形\n\n#### 输入描述：\n> 多组输入，每组输入仅1行，包含3个正整数a,b,c。\n\n#### 输出描述：\n> 对于每组输入，如果能组成直角三角形则输出yes，不能则输出no\n\n#### 样例输入:\n> 3 4 5\n\n> 5 4 3\n\n> 3 3 3\n\n#### 样例输出:\n> yes\n\n> yes\n\n> no","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":217,"accepts":132,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.072Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1044,"title":"奇偶数排序","content":"#### 题目描述:\n> 输入10个整数，彼此以空格分隔\n\n> 重新排序以后输出(也按空格分隔)，要求:\n\n> 1.先输出其中的奇数,并按从大到小排列；\n\n> 2.然后输出其中的偶数,并按从小到大排列。\n\n#### 输入描述：\n> 输入10个整数，彼此以空格分隔\n\n#### 输出描述：\n> 1.先输出其中的奇数,并按从大到小排列；\n\n> 2.然后输出其中的偶数,并按从小到大排列。\n\n#### 样例输入:\n> 9 80 87 66 73 51 38 21 60 98\n\n#### 样例输出:\n> 87 73 51 21 9 38 60 66 80 98","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":159,"accepts":67,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.088Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1049,"title":"求表达式值 ","content":"#### 题目描述:\n> a为整数，x,y为浮点数，编程计算表达式x+a%3*(int)(x+y)%2/4的值\n\n#### 输入描述：\n> 7 2.5 4.7\n\n#### 输出描述：\n> 2.500000\n\n#### 样例输入:\n> 8 3 4.5\n\n#### 样例输出:\n> 3.000000","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":194,"accepts":163,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.152Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1070,"title":"数据移位","content":"#### 题目描述:\n> 将一维数组中的元素循环左移k个位置\n\n#### 输入描述：\n> 第1行是一维数组元素的个数n(数组大小)\n\n> 第2行是一个整数k,表示移动的位置\n\n> 下面n行为数组的元素个数\n\n#### 输出描述：\n> 输出n行,表示移动后的数字\n\n#### 样例输入:\n> 5\n\n> 3\n\n> 1\n\n> 2\n\n> 3\n\n> 4\n\n> 5\n\n#### 样例输出:\n> 4\n\n> 5\n\n> 1\n\n> 2\n\n> 3","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":67,"accepts":53,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.158Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1072,"title":"数据合并","content":"#### 题目描述:\n> 将两个从小到大排列的一维数组 (维长分别为 m, n，其中 m, n 均 &le; 100) 仍按从小到大的排列顺序合并到一个新的一维数组中，输出新的数组。\n\n#### 输入描述：\n> 第 1 行一个正整数 m，表示第一个要合并的一维数组中的元素个数\n\n> 第 2 行一个正整数 n，表示第二个要合并的一维数组中的元素个数\n\n> 第 3 行输入 m 个整数（每个数用空格分开），表示第一个数组元素的值。\n\n> 第 4 行输入 n 个整数（每个数用空格分开），表示第二个数组元素的值。\n\n#### 输出描述：\n> 一行，表示合并后的数据，共 m + n 个数\n\n#### 样例输入:\n> 3\n\n> 4\n\n> 1 3 5\n\n> 2 4 6 8\n\n#### 样例输出:\n> 1 2 3 4 5 6 8","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":114,"accepts":46,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.183Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1075,"title":"不高兴的津津","content":"#### 题目描述:\n> 津津上大学后。认为应该更加用功学习，所以津津除了上学之外，还要参加各种社团。另外每周还会去学习编程、数学建模和一定的课外实践。但是津津如果一天上课和活动时间超过八个小时就会不高兴，而且上得越久就会越不高兴。假设津津不会因为其它事不高兴，并且她的不高兴不会持续到第二天。请你帮忙检查一下津津下周的日程安排，看看下周她会不会不高兴；如果会的话，哪天最不高兴。\n\n#### 输入描述：\n> 输入数据包括七行，分别表示周一到周日的日程安排。每行包括两个小于10的非负整数，用空格隔开，分别表示津津在学校上课的时间和其它活动的时间。\n\n#### 输出描述：\n> 输出包括一行，这一行只包含一个数字。如果不会不高兴则输出0，如果会则输出最不高兴的是周几（用1, 2, 3, 4, 5, 6, 7分别表示周一，周二，周三，周四，周五，周六，周日）。如果有两天或两天以上不高兴的程度相当，则输出时间最靠前的一天。\n\n#### 样例输入:\n> 5   3\n\n> 6   2\n\n> 7   2\n\n> 5   3\n\n> 5   4\n\n> 0   4\n\n> 0   6\n\n#### 样例输出:\n> 3","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":107,"accepts":68,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.190Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1076,"title":"正整数的商和余数","content":"#### 题目描述:\n> 给定一组正整数，每组两个正整数，前面是被除数后面是除数，分别求出每组数的商和余数。\n\n#### 输入描述：\n> 第1行一个正整数，表示组数T；\n\n> 下面T组每行输入两个正整数，它们之间用一个空格分开；\n\n#### 输出描述：\n> T行，每行表示一组数的商和余数，它们之间用一个空格分开；\n\n#### 样例输入:\n> 2\n\n> 5 3\n\n> 12 4\n\n#### 样例输出:\n> 1 2\n\n> 3 0","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":83,"accepts":64,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.197Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1077,"title":"分数数列求和","content":"#### 题目描述:\n> 观察分数数列2/1，-3/2，5/3，-8/5，13/8，&hellip;&hellip;。输入项数，求其和。\n\n#### 输入描述：\n> 一行，输入正整数n，表示数列的项数\n\n#### 输出描述：\n> 占一行，一个四位小数的浮点数\n\n#### 样例输入:\n> 20\n\n#### 样例输出:\n> 0.5779","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":147,"accepts":36,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.222Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1084,"title":"[ACM]初学系列（1）a+b","content":"#### 题目描述:\n> Your task is to Calculate a + b.\n\n> Too easy?! Of course! I specially designed the problem for acm beginners. \n\n> You must have found that some problems have the same titles with this one, yes, all these problems were designed for the same aim. \n\n\n#### 输入描述：\n> The input will consist of a series of pairs of integers a and b, separated by a space, one pair of integers per line.You need use long to record these numbers.\n\n#### 输出描述：\n> For each pair of input integers a and b you should output the sum of a and b in one line, and with one line of output for each line in input. The result is less than 2^31.\n\n#### 样例输入:\n> 1 5\n\n> 10 20\n\n#### 样例输出:\n> 6\n\n> 30","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":365,"accepts":204,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.224Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1085,"title":"[ACM]初学系列（2）a+b","content":"#### 题目描述:\n> Your task is to Calculate a + b.\n\n#### 输入描述：\n> Input contains an integer N in the first line, and then N lines follow. Each line consists of a pair of integers a and b, separated by a space, one pair of integers per line. \n\n#### 输出描述：\n> For each pair of input integers a and b you should output the sum of a and b in one line, and with one line of output for each line in input. \n\n#### 样例输入:\n> 2\n\n> 1 5\n\n> 10 20\n\n#### 样例输出:\n> 6\n\n> 30","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":252,"accepts":196,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.227Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1086,"title":"[ACM]初学系列（3）a+b","content":"#### 题目描述:\n> Your task is to Calculate a + b.\n\n#### 输入描述：\n> Input contains multiple test cases. Each test case contains a pair of integers a and b, one pair of integers per line. A test case containing 0 0 terminates the input and this test case is not to be processed.\n\n#### 输出描述：\n> For each pair of input integers a and b you should output the sum of a and b in one line, and with one line of output for each line in input. \n\n#### 样例输入:\n> 1 5\n\n> 10 20\n\n> 0 0\n\n#### 样例输出:\n> 6\n\n> 30","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":175,"accepts":145,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.230Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1087,"title":"[ACM]初学系列（4）a+b","content":"#### 题目描述:\n> Your task is to Calculate the sum of some integers.\n\n#### 输入描述：\n> Input contains multiple test cases. Each test case contains a integer N, and then N integers follow in the same line. A test case starting with 0 terminates the input and this test case is not to be processed.\n\n#### 输出描述：\n> For each group of input integers you should output their sum in one line, and with one line of output for each line in input. \n\n#### 样例输入:\n> 4 1 2 3 4\n\n> 5 1 2 3 4 5\n\n> 0 \n\n#### 样例输出:\n> 10\n\n> 15","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":167,"accepts":122,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.232Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1088,"title":"[ACM]初学系列（5）a+b","content":"#### 题目描述:\n> Your task is to calculate the sum of some integers.\n\n#### 输入描述：\n> Input contains an integer N in the first line, and then N lines follow. Each line starts with a integer M, and then M integers follow in the same line. \n\n#### 输出描述：\n> For each group of input integers you should output their sum in one line, and with one line of output for each line in input. \n\n#### 样例输入:\n> 2\n\n> 4 1 2 3 4\n\n> 5 1 2 6 4 5\n\n#### 样例输出:\n> 10\n\n> 18","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":196,"accepts":167,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.235Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1089,"title":"[ACM]初学系列（6）a+b","content":"#### 题目描述:\n> Your task is to calculate the sum of some integers.\n\n#### 输入描述：\n> Input contains multiple test cases, and one case one line. Each case starts with an integer N, and then N integers follow in the same line. \n\n#### 输出描述：\n> For each test case you should output the sum of N integers in one line, and with one line of output for each line in input. \n\n#### 样例输入:\n> 4 1 2 3 4\n\n> 5 1 2 3 4 5\n\n#### 样例输出:\n> 10\n\n> 15","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":206,"accepts":159,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.238Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1090,"title":"[ACM]初学系列（7）a+b","content":"#### 题目描述:\n> Your task is to Calculate a + b.\n\n#### 输入描述：\n> The input will consist of a series of pairs of integers a and b, separated by a space, one pair of integers per line. \n\n#### 输出描述：\n> For each pair of input integers a and b you should output the sum of a and b, and followed by a blank line. \n\n#### 样例输入:\n> 1 5\n\n> 10 20\n\n#### 样例输出:\n>     6\n>     \n>     30\n>     \n>     ","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":116,"accepts":89,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.240Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1091,"title":"[ACM]初学系列（8）a+b","content":"#### 题目描述:\n> Your task is to calculate the sum of some integers.\n\n#### 输入描述：\n> Input contains an integer N in the first line, and then N lines follow. Each line starts with a integer M, and then M integers follow in the same line. \n\n#### 输出描述：\n> For each group of input integers you should output their sum in one line, and you must note that there is a blank line between outputs.\n\n#### 样例输入:\n> `3`\n\n> `4 1 2 3 4`\n\n> `5 1 2 3 4 5`\n\n> `3 1 2 3`\n\n#### 样例输出:\n> `10`\n\n> ``\n\n> `15`\n\n> ``\n\n> `6`","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":111,"accepts":83,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.247Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1093,"title":"[ACM]Balloon Comes","content":"#### 题目描述:\n> The contest starts now! How excited it is to see balloons floating around. You, one of the best programmers in NUIST, can get a very beautiful balloon if only you have solved the very very very... easy problem.\n\n> Give you an operator (+,-,*, / --denoting addition, subtraction, multiplication, division respectively) and two positive integers, your task is to output the result. \n\n> Is it very easy? \n\n> Come on, guy! PLMM will send you a beautiful Balloon right now!\n\n> Good Luck!\n\n#### 输入描述：\n> Input contains multiple test cases. The first line of the input is a single integer T (0<T<1000) which is the number of test cases. T test cases follow. Each test case contains a char C (+,-,*, /) and two integers A and B(0<A,B<10000).Of course, we all know that A and B are operands and C is an operator. \n\n#### 输出描述：\n> For each case, print the operation result. The result should be rounded to 2 decimal places If and only if it is not an integer.\n\n#### 样例输入:\n> `4`\n\n> `+ 1 2`\n\n> `- 1 2`\n\n> `* 1 2`\n\n> `/ 1 2`\n\n> `4`\n\n> `+ 2 3`\n\n> `- 6 20`\n\n> `* 5 8`\n\n> `/ 40 5`\n\n#### 样例输出:\n> `3`\n\n> `-1`\n\n> `2`\n\n> `0.50`\n\n> `5`\n\n> `-14`\n\n> `40`\n\n> `8`","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":55,"accepts":17,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.253Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1094,"title":"[ACM]初学系列  满屋","content":"#### 题目描述:\n> WSH 是一个十分愉悦的文艺青年兼高富帅！他上知天文，下知地理，数理化生无所不精，琴棋书画无所不能，天生此才必有用！\n\n> 于是树大招风，WSH 的家被怪盗 HP 瞄上了，HP 发出预告函，说是要卷走 WSH 家的一切，而且不能告诉警察，不然就......\n\n> WSH 当然不畏惧挑战，但是由于 ......，他担心后果的严重性，于是他找到了同为文艺青年兼高富帅的你来助他一臂之力。\n\n> WSH 的家是一个 n &times; n 的矩阵，而每一个格子代表一个房间，其中有些房间因为塞满了各种无用的杂物而变得不可进入。\n\n> 鉴于安全和效率方面上的考虑，HP 决定绕开堆满了杂物的房间，他可以任意选择一个空房间开始他的席卷之旅（因为是大盗嘛），他可以从一个房间到一个相邻的可进入的房间并且他不会进入同一个房间两次，但是一旦选定了前进的方向，他就必须一条道走到黑，直到走到下一个房间不能走的房间或者到了房子边缘的房间才能转弯，以此为规则来一次性走完所有的空房间。\n\n> 下面是一个合适的例子\n\n> 这是一个 5 &times; 5 的矩阵，我们可以看到 (1, 3) 以及 (2, 2) 上是不能通行的，一个方格也只能经过一次，图片所示的解是起点为 (1, 2)，通常来说可能会有多解或者无解的情况，但是我们在这里只提供有唯一解的数据。\n\n>  WSH 明白 HP 行事的作风，他将以上 HP 的行事规律告诉了你，请你找出 HP 开始盗窃的起点并输出盗窃路径（只需输出转弯的次序），以便 WSH 以逸待劳。\n\n> （有兴趣的童鞋可以玩一玩 ios 平台上的这个叫做 “满屋” 的游戏。）\n\n#### 输入描述：\n> 多组输入。\n\n> 每一组数据的第一行是矩阵的行列数 n (2 < n < 10)，接下来 2 ~ n + 1 行是一个由 0 与 1 组成的 n &times; n 矩阵。\n\n> 0 表示在相应位置上是一个空房间，1 则表示是一个堆满了无用杂物的房间（即不能通过）。\n\n#### 输出描述：\n> 多组输出。\n\n> 每一组数据的第一行你需要输出盗窃的起点，第二行则需要输出拐弯的次序，向东南西北方向转弯分别用 E S W N 表示。\n\n#### 样例输入:\n> 3\n\n> 0 1 0\n\n> 0 0 0\n\n> 0 0 1\n\n> 4\n\n> 0 0 0 0\n\n> 0 0 0 1\n\n> 0 0 0 0\n\n> 0 0 1 0\n\n#### 样例输出:\n> 1 1\n\n> SENEN\n\n> 1 4\n\n> WSENESES","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":2,"accepts":2,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.257Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1095,"title":"笑笑的烦恼","content":"#### 题目描述:\n> 笑笑作为数学课代表，每次考试后，数学老师都会让他统计成绩，老师并不关心具体某个人的成绩，而只关心参加考试的人数、平均成绩、最低分和最高分。\n#### 输入描述：\n> 输入考试次数T，以及一组整数,表示学生的一次考试成绩,每个数之间用一个空格分开，当成绩为-1表示输入结束。\n#### 输出描述：\n> 占4行,第一行表示一次考试学生的人数n,第二行表示这次考试的最高分，第三行表示这次考试的最低分，第四行表示这次考试的平均分，其中只有平均分是小数（只保留一位小数），其余为整数\n#### 样例输入:\n> 2\n\n> 50 90 87 67 84 99 56 74 82 94 -1\n\n> 50 60 70 80 -1\n#### 样例输出:\n> 10\n\n> 99\n\n> 50\n\n> 78.3\n\n> 4\n\n> 80\n\n> 50\n\n> 65.0","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":38,"accepts":29,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.315Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1111,"title":"开灯问题","content":"#### 题目描述:\n> 有n盏灯，编号为1~n。第1个人把所有灯打开，第2个人按下所有编号为2的倍数的开关（这些灯被关掉），第3个人按下所有编号为3的倍数的开关（其中关掉的灯将被打开，打开的将被关掉），依次类推。一共有k个人，问最后有哪些灯开着？\n\n#### 输入描述：\n> 多组输入。每组占一行，输入n表示灯的数目和k表示人数 ，输出开着的灯编号。\n\n#### 输出描述：\n> 多组输出。每组输出开着灯的编号，每个编号占一行，行数与开着的灯的个数相同。\n\n#### 样例输入:\n> 7  3\n\n#### 样例输出:\n> 1\n\n> 5\n\n> 6\n\n> 7","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":3293,"accepts":1328,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.318Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1112,"title":"歌手大奖赛","content":"#### 题目描述:\n> 青年歌手大奖赛中，评委会给参赛选手打分。选手得分规则为去掉一个最高分和一个最低分，然后计算平均得分，请编程输出某选手的得分。\n#### 输入描述：\n> 输入数据有多组，每组占一行，每行的第一个数是n(2<n<100)，表示评委的人数，然后是n个评委的打分。\n#### 输出描述：\n> 对于每组输入数据，输出选手的得分，结果按四舍五入方式保留2位小数，每组输出占一行。\n#### 样例输入:\n> 3 99 98 97\n\n> 4 100 99 98 97\n\n#### 样例输出:\n> 98.00\n\n> 98.50","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":433,"accepts":72,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.350Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1126,"title":"全排列","content":"#### 题目描述:\n> 使用交换法生成从 1 到 n (n < 10) 的 n 个数的全部可能的排列（不一定按升序输出）\n\n#### 输入描述：\n> 占一行，输入整数 n\n\n#### 输出描述：\n> 输出 1 到 n 的全排列\n\n#### 样例输入:\n> 3\n\n#### 样例输出:\n> 123\n\n> 132\n\n> 213\n\n> 231\n\n> 321\n\n> 312","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":3173,"accepts":593,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.352Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1129,"title":"走出泥潭","content":"#### 题目描述:\n> 探险队要穿越泥潭，必须选择可踩踏的落脚点。可是泥潭面积很大，落脚点又实在少得可怜，一不小心就会深陷泥潭而无法脱身。侦查员费尽周折才从老乡手里弄到了一份地图，图中标出了落脚点的位置，而且令人震惊的是：泥潭只有一条穿越路线，且对于nxm的地图，路线长度为n+m-1！请编程为探险队找出穿越路线。\n\n#### 输入描述：\n> 两个整数n和m，表示泥潭的长和宽。下面n行m列表示地形（0 表示泥潭，1 表示落脚点）\n\n#### 输出描述：\n> 用坐标表示穿越路线，坐标之间用>分隔 \n\n#### 样例输入:\n> 6 9\n\n> 1 1 1 0 0 0 0 0 0\n\n> 0 0 1 1 1 0 0 0 0\n\n> 0 0 0 0 1 0 0 0 0\n\n> 0 0 0 0 1 1 0 0 0\n\n> 0 0 0 0 0 1 1 1 1\n\n> 0 0 0 0 0 0 0 0 1\n\n#### 样例输出:\n> (1,1)>(1,2)>(1,3)>(2,3)>(2,4)>(2,5)>(3,5)>(4,5)>(4,6)>(5,6)>(5,7)>(5,8)>(5,9)>(6,9)","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":515,"accepts":126,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.354Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1130,"title":"All in All","content":"#### 题目描述:\n> 给定两个字符串s和t，请判断s是否是t的子序列。即从t中删除一些字符，将剩余的字符连接起来，即可获得s。\n\n#### 输入描述：\n> 包括若干组测试数据。每组测试数据由两个ASCII码的数字和字母串s和t组成， s和t的长度不超过100000。\n\n#### 输出描述：\n> 对每组测试数据，如果s是t的子序列则输出Yes;，否则输出No。\n\n#### 样例输入:\n> sequence subsequence\n\n> person compression\n\n> caseDoesMatter CaseDoesMatter\n\n#### 样例输出:\n> Yes\n\n> No\n\n> No","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":249,"accepts":101,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.358Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1132,"title":"错误序号","content":"#### 题目描述:\n> 某招聘现场,负责发号的工作人员给应聘者发放面试序号.当发到10^n号的时候,才发现打号机不能打出数字&ldquo;4&rdquo;.工作人员想纠正错误,但首先要知道出现错误的序号有多少个,请编写程序来解决.\n\n#### 输入描述：\n> 正整数n(<=1000)\n\n#### 输出描述：\n> 一个正整数，表示错误序号的个数\n\n#### 样例输入:\n> 2\n\n> 10\n\n#### 样例输出:\n> 19\n\n> 6513215599","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":19,"accepts":12,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.362Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1135,"title":"NBA总冠军","content":"#### 题目描述:\n> 又要考试了，Ljw决定放松一下，就打开电视，看见了篮球赛，他立即想到了每年的NBA总冠军队伍。由于复习紧张，他只记起了一部分，记忆的内容是正确的，可能不是按时间顺序排列的，记忆的内容可能有重复。现在请求学过编程的你帮助Ljw，按时间依次输出总冠军的球队（不能重复）。（NBA 从1947A.D到2017A.D）\n\n#### 输入描述：\n> 第一行是一个整数n（0<n<80）。接下来的n行，每行先是城市名（由大小写字母、空格组成），后是时间（由数字组成）二者之间用空格隔开。\n\n#### 输出描述：\n> 共n行，即排序后的NBA总冠军队伍。每行先是时间，后是城市名。\n\n#### 样例输入:\n>     \n>     4\n>     Boston 1963\n>     Boston 1959\n>     Philly 1947\n>     New York 1970\n>     6\n>     Los Angeles 2000\n>     Miami 2006\n>     Boston 1964\n>     Los Angeles 2000\n>     Boston 1965\n>     Los Angeles 2002\n\n#### 样例输出:\n> 1947 Philly\n\n> 1959 Boston\n\n> 1963 Boston\n\n> 1970 New York\n\n> 1964 Boston\n\n> 1965 Boston\n\n> 2000 Los Angeles\n\n> 2002 Los Angeles\n\n> 2006 Miami","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":69,"accepts":20,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.371Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1138,"title":"American Heritage","content":"#### 题目描述:\n> Farmer John takes the heritage of his cows very seriously. He is not, however, a truly fine bookkeeper. He keeps his cow genealogies as binary trees and, instead of writing them in graphic form, he records them in the more linear `tree in-order\" and `tree pre-order\" notations.\n\n> Your job is to create the `tree post-order\" notation of a cow\"s heritage after being given the in-order and pre-order notations. Each cow name is encoded as a unique letter. (You may already know that you can frequently reconstruct a tree from any two of the ordered traversals.) Obviously, the trees will have no more than 26 nodes.\n\n> Here is a graphical representation of the tree used in the sample input and output:\n\n                  C\n                /   \n               /     \n              B       G\n             /      /\n            A   D   H\n               / \n              E   F\n\n\tThe in-order traversal of this tree prints the left sub-tree, the root, and the right sub-tree.\n\n\tThe pre-order traversal of this tree prints the root, the left sub-tree, and the right sub-tree.\n\n\tThe post-order traversal of this tree print the left sub-tree, the right sub-tree, and the root.\n\n\t----------------------------------------------------------------------------------------------------------------------------\n\n#### 题目大意：\n\n> 给出一棵二叉树的前序遍历(preorder)和中序遍历(inorder)，求它的后序遍历(postorder)。\n\n>     \n\t你需要知道的：\n\n\t1：二叉树的 相关定义可以在书上或者网上找到。\n\n\t2：样例 输入输出反映的二叉树在上面。\n\n#### 输入描述：\n> Line 1:\n\n> The in-order representation of a tree.\n\n> Line 2:\n\n> The pre-order representation of that same tree.\n\n#### 输出描述：\n> A single line with the post-order representation of the tree.\n\n#### 样例输入:\n> ABEDFCHG\n\n> CBADEFGH\n\n#### 样例输出:\n> AEFDBHGC","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":26,"accepts":14,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.380Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1142,"title":"Encoding","content":"#### 题目描述:\n> Given a string containing only \"A\" - \"Z\", we could encode it using the following method: \n\n\t1. Each sub-string containing k same characters should be encoded to \"kX\" where \"X\" is the only character in this sub-string.\n\n\t2. If the length of the sub-string is 1, \"1\" should be ignored.\n\n#### 输入描述：\n> The first line contains an integer N (1 <= N <= 100) which indicates the number of test cases. The next N lines contain N strings. Each string consists of only \"A\" - \"Z\" and the length is less than 10000.\n\n#### 输出描述：\n> For each test case, output the encoded string in a line.\n\n#### 样例输入:\n> 2\n\n> ABC\n\n> ABBCCC\n\n#### 样例输出:\n> ABC\n\n> A2B3C","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":22,"accepts":6,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.383Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1143,"title":" Substrings","content":"#### 题目描述:\n> You are given a number of case-sensitive strings of alphabetic characters, find the largest string X, such that either X, or its inverse can be found as a substring of any of the given strings.\n\n#### 输入描述：\n> The first line of the input file contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. The first line of each test case contains a single integer n (1 <= n <= 100), the number of given strings, followed by n lines, each representing one string of minimum length 1 and maximum length 100. There is no extra white space before and after a string.\n\n#### 输出描述：\n> There should be one line per test case containing the length of the largest string found.\n\n#### 样例输入:\n> 2\n\n> 3   \n\n> ABCD\n\n> BCDFF\n\n> BRCD\n\n> 2\n\n> rose\n\n> orchid\n\n#### 样例输出:\n> 2\n\n> 2","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":27,"accepts":19,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.386Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1144,"title":"Calling Extraterrestrial Intelligence Again","content":"#### 题目描述:\n> A message from humans to extraterrestrial intelligence was sent through the Arecibo radio telescope in Puerto Rico on the afternoon of Saturday November 16, 1974. The message consisted of 1679 bits and was meant to be translated to a rectangular picture with 23 &times; 73 pixels. Since both 23 and 73 are prime numbers, 23 &times; 73 is the unique possible size of the translated rectangular picture each edge of which is longer than 1 pixel. Of course, there was no guarantee that the receivers would try to translate the message to a rectangular picture. Even if they would, they might put the pixels into the rectangle incorrectly. The senders of the Arecibo message were optimistic. \n\n> We are planning a similar project. Your task in the project is to find the most suitable width and height of the translated rectangular picture. The term \"most suitable\" is defined as follows. An integer m greater than 4 is given. A positive fraction a / b less than or equal to 1 is also given. The area of the picture should not be greater than m. Both of the width and the height of the translated picture should be prime numbers. The ratio of the width to the height should not be less than a / b nor greater than 1. You should maximize the area of the picture under these constraints.\n\n> In other words, you will receive an integer m and a fraction a / b. It holds that m > 4 and 0 < a / b < 1. You should find the pair of prime numbers p, q such that pq <= m and a / b <= p / q <= 1, and furthermore, the product pq takes the maximum value among such pairs of two prime numbers. You should report p and q as the \"most suitable\" width and height of the translated picture.\n\n#### 输入描述：\n> The input is a sequence of at most 2000 triplets of positive integers, delimited by a space character in between. Each line contains a single triplet. The sequence is followed by a triplet of zeros, 0 0 0, which indicated the end of the input and should not be treated as data to be processed.\n\n> The integers of each input triplet are the integer m, the numerator a, and the denominator b described above, in this order. You may assume 4 < m <= 100000 and 1 <= a <= b <= 1000.\n\n#### 输出描述：\n> The output is a sequence of pairs of positive integers. The i-th output pair corresponds to the i-th input triplet. The integers of each output pair are the width p and the height q described above, in this order.\n\n> Each output line contains a single pair. A space character is put between the integers as a delimiter. No other characters should appear in the output.\n\n#### 样例输入:\n> 5 1 2\n\n> 99999 999 999\n\n> 1680 5 16\n\n> 1970 1 1\n\n> 2002 4 11\n\n> 0 0 0\n\n#### 样例输出:\n> 2 2\n\n> 313 313\n\n> 23 73\n\n> 43 43\n\n> 37 53","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":22,"accepts":9,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.416Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1153,"title":"Generating Fast, Sorted Permutation","content":"#### 题目描述:\n> 生成排列一直是计算机科学中的一个重要问题。在本题中，请对一个给定的字符串按升序产生排列。你的算法必须有效率。\n\n#### 输入描述：\n> 输入的第一行给出一个整数n，表示后面给出多少字符串。后面的n行给出n个字符串。字符串只包含字母数字，不包含任何空格。字符串的最大长度为10。\n\n#### 输出描述：\n> 对于每个输入的字符串，按升序输出所有可能的排列。字符串的处理大小写敏感，排列不重复。在每个测试用例处理后输出一个空行。\n\n#### 样例输入:\n> 2\n\n> ab\n\n> bca\n\n#### 样例输出:\n> ab\n\n> ba\n\n> abc\n\n> acb\n\n> bac\n\n> bca\n\n> cab\n\n> cba","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":40,"accepts":18,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.419Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1154,"title":"Binomial Showdown","content":"#### 题目描述:\n> 有多少种方法可以从 n 个元素中不考虑顺序地选择 k 个元素？请编写一个程序来计算这个数字。\n\n#### 输入描述：\n> 输入包含一个或多个测试用例。每个测试用例一行，给出两个整数 n (n >= 1) 和 k (0 <= k <= n) 。输入以 n = k = 0 终止。\n\n#### 输出描述：\n> 对每个测试用例，输出一行，给出所要求的数。本题设定这个数在整数范围内，也就是说，小于 2 ^ 31。\n\n#### 样例输入:\n> 4 2\n\n> 10 5\n\n> 49 6\n\n> 0 0\n\n#### 样例输出:\n> 6\n\n> 252\n\n> 13983816","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":125,"accepts":10,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.428Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1157,"title":"Present","content":"#### 题目描述:\n> There are N friends who has bought one present each. They mix their presents together and then each person takes one randomly. What is the probability that exactly M people got their own present.\n\n#### 输入描述：\n> Each line is one case and contains two integers N (0 < N < 100), M (0 <= M <= N).\n\n#### 输出描述：\n> For each case, output the result in one line.\n\n> The result are exact to 8 decimal places.\n\n#### 样例输入:\n> 3 1\n\t\n> 4 2\n\n#### 样例输出:\n> 0.50000000\n\n> 0.25000000","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":42,"accepts":2,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.434Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1158,"title":"方格上的路径","content":"#### 题目描述:\n> 试求 n &times; m 的方格图形中，从点 (0, 0) 到点 (n, m) 的最短路径数目。\n\n#### 输入描述：\n> 有多组测试数据。输入的第一行为一个正整数 N，表示接下来有 N 组测试数据。\n\n> 在接下来的每行输入中有两个 32 位无符号整数 n 和 m，表示该方格图形的大小。\n\n#### 输出描述：\n> 对于每组测试数据，输出一行答案，即符合要求的最短路径数。\n\n#### 样例输入:\n> 2\n\n> 5 4\n\n> 1 1\n\n#### 样例输出:\n> 126\n\n> 2","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":117,"accepts":47,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.442Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1160,"title":"电子锁","content":"#### 题目描述:\n> 某机要部门安装了电子锁。M工作人员每人发一张磁卡，卡上有开锁的密码特征，为了确保安全，规定至少有N人同时使用各自的磁卡才能将锁打开。现在需要计算一下，电子锁上至少要有多少种特征，每个人的磁卡上至少要有多少特征?\n\n#### 输入描述：\n> 输入仅一行，有两个数即m（m<＝20），n（n<＝m且<＝10）\n\n#### 输出描述：\n> 输出第一行为两个数，既电子锁上的特征数，与磁卡上的特征数,每个数之间用一个空格分开.\n\n#### 样例输入:\n> 7 4\n\n> 9 6\n\n#### 样例输出:\n> 35 20\n\n> 126 56","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":39,"accepts":17,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.445Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1161,"title":"Lotto","content":"#### 题目描述:\n> 有k(k>=6)个数字，要求按字典序输出所有从该k个数字中取6个的组合。\n\n#### 输入描述：\n> 第1行是整数k (6<k<13) ,第2行k个用空格彼此分开的整数。\n\n#### 输出描述：\n> 输出所有可能的结果，每个组合在一行上。每个组合必须按升序排列，并用一个空格彼此分开\n\n#### 样例输入:\n> 7\n\n> 1 2 3 4 5 6 7\n\n#### 样例输出:\n> 1 2 3 4 5 6\n\n> 1 2 3 4 5 7\n\n> 1 2 3 4 6 7\n\n> 1 2 3 5 6 7\n\n> 1 2 4 5 6 7\n\n> 1 3 4 5 6 7\n\n> 2 3 4 5 6 7","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":47,"accepts":10,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.449Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1162,"title":"列车编组问题","content":"#### 题目描述:\n> 某火车站铁轨铺设如图，有 n 节车厢自 A 方向进入车站，按进站方向编号为 1 ~ n。现对其进行编组，编组过程可借助中转站 Station，其中 Station 可停靠任意多车厢，由于 Station 末端封顶，故驶入 Station 的车辆必须按相反方向驶出。对每个车厢，一旦自 A 进入 Station，就不能再驶入 A；且一旦自 Station 驶入 B，再不能返回 Station。给定 n 值，请判断某个车厢编组是否可能。\n\n#### 输入描述：\n> 有多组输入，每组输入占两行。\n\n> 第一行是车厢节数 n，第二行是 1, 2, ..., n 的一个排列。\n\n#### 输出描述：\n> 针对每种出站方案，输出该方案是否可行的判断结果。\n\n#### 样例输入:\n> 5\n\n> 1 2 3 4 5\n\n> 5\n\n> 5 4 1 2 3\n\n> 6\n\n> 6 5 4 3 2 1\n\n#### 样例输出:\n> Yes\n\n> No\n\n> Yes","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":77,"accepts":23,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.454Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1164,"title":"打印队列","content":"#### 题目描述:\n> The only printer in the computer science students\" union is experiencing an extremely heavy workload. Sometimes there are a hundred jobs in the printer queue and you may have to wait for hours to get a single page of output. \n\n> Because some jobs are more important than others, the Hacker General has invented and implemented a simple priority system for the print job queue. Now, each job is assigned a priority between 1 and 9 (with 9 being the highest priority, and 1 being the lowest), and the printer operates as follows：\n\n> The first job J in queue is taken from the queue.\n\n> If there is some job in the queue with a higher priority than job J, then move J to the end of the queue without printing it.\n\n> Otherwise, print job J (and do not put it back in the queue).\n\n> In this way, all those important muffin recipes that the Hacker General is printing get printed very quickly. Of course, those annoying term papers that others are printing may have to wait for quite some time to get printed, but that\"s life. \n\n> Your problem with the new policy is that it has become quite tricky to determine when your print job will actually be completed. You decide to write a program to figure this out. The program will be given the current queue (as a list of priorities) as well as the position of your job in the queue, and must then calculate how long it will take until your job is printed, assuming that no additional jobs will be added to the queue. To simplifymatters, we assume that printing a job always takes exactly one minute, and that adding and removing jobs from the queue is instantaneous.\n\n#### 输入描述：\n> One line with a positive integer: the number of test cases (at most 100). Then for each test case:\n\n> One line with two integers n and m, where n is the number of jobs in the queue (1 &le; n &le; 100) and m is the position of your job (0 &le; m &le; n &minus;1). The first position in the queue is number 0, the second is number 1, and so on.\n\n> One linewith n integers in the range 1 to 9, giving the priorities of the jobs in the queue. The first integer gives the priority of the first job, the second integer the priority of the second job, and so on.\n\n#### 输出描述：\n> For each test case, print one line with a single integer; the number of minutes until your job is completely printed, assuming that no additional print jobs will arrive.\n\n#### 样例输入:\n> 3\n\n> 1 0\n\n> 5\n\n> 4 2\n\n> 1 2 3 4\n\n> 6 0\n\n> 1 1 9 1 1 1\n\n#### 样例输出:\n> 1\n\n> 2\n\n> 5","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":10,"accepts":10,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.458Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1165,"title":"寻找相同的雪花","content":"#### 题目描述:\n> You may have heard that no two snowflakes are alike. Your task is to write a program to determine whether this is really true. Your program will read information about a collection of snowflakes, and search for a pair that may be identical. Each snowflake has six arms. For each snowflake, your program will be provided with a measurement of the length of each of the six arms. Any pair of snowflakes which have the same lengths of corresponding arms should be flagged by your program as possibly identical.\n\n#### 输入描述：\n> The first line of input will contain a single integer n, 0 < n &le; 100000, the number of snowflakes to follow. This will be followed by n lines, each describing a snowflake. Each snowflake will be described by a line containing six integers (each integer is at least 0 and less than 10000000), the lengths of the arms of the snow ake. The lengths of the arms will be given in order around the snowflake (either clockwise or counterclockwise), but they may begin with any of the six arms. For example, the same snowflake could be described as 1 2 3 4 5 6 or 4 3 2 1 6 5.\n\n#### 输出描述：\n> If all of the snowflakes are distinct, your program should print the message:\n\n>     No two snowflakes are alike.\n\n> If there is a pair of possibly identical snow akes, your program should print the message:\n\n>     Twin snowflakes found.\n\n#### 样例输入:\n> 2\n\n> 1 2 3 4 5 6\n\n> 4 3 2 1 6 5\n\n#### 样例输出:\n> Twin snowflakes found.","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":30,"accepts":11,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.462Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1166,"title":"欧几里德的游戏","content":"#### 题目描述:\n> 欧几里德的两个后代Stan和Ollie正在玩一种数字游戏，这个游戏是他们的祖先欧几里德发明的。给定两个正整数M和N，从Stan开始，从其中较大的一个数，减去较小的数的正整数倍，当然，得到的数不能小于0。然后是Ollie，对刚才得到的数，和M，N中较小的那个数，再进行同样的操作&hellip;&hellip;直到一个人得到了0，他就取得了胜利。下面是他们用(25，7)两个数游戏的过程：\n\n>\n\tStart：25 7\n\tStan：11 7\n\tOllie：4 7\n\tStan：4 3\n\tOllie：1 3\n\tStan：1 0\n\n> Stan赢得了游戏的胜利。\n\n> 现在，假设他们完美地操作，谁会取得胜利呢？\n\n#### 输入描述：\n> 第一行为测试数据的组数C。下面有C行，每行为一组数据，包含两个正整数M, N。（M, N不超过长整型。）\n\n#### 输出描述：\n> 对每组输入数据输出一行，如果Stan胜利，则输出&ldquo;Stan wins&rdquo;；否则输出&ldquo;Ollie wins&rdquo;。\n\n#### 样例输入:\n> 2\n\n> 25 7\n\n> 24 15\n\n#### 样例输出:\n> Stan wins\n\n> Ollie wins","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":48,"accepts":21,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.466Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1167,"title":"校庆上的娱乐活动","content":"#### 题目描述:\n> 某校举行百年校庆的时候，学校大发慈悲让全校同学放了一天假。Tom和John又在一起玩游戏了。因为以往的游戏决策都太少。Tom觉得几天就能研究透了，所以，他又发明了一个新的游戏。首先，地板上有k堆石子，Tom和John轮流进行如下操作：\n\n> 选择一堆石子，从中拿走若干个（至少一个），并可以把剩下的这堆石子拿若干（或全部）自由分到其他堆石子（包括原来没有石子的\"堆\"，而且可以同时分配石子给若干堆）。\n\n> 谁如果取走最后一个石子，谁就赢了。\n\n> Tom很大方的对John说:\"就让你先取吧。\"\n\n> Tom已经对这个游戏了如指掌，但是John也想赢，他吃了一罐菠菜，但是还是想不出来（大力水手），他想知道是不是他永远赢不了，他需要你来帮忙。\n\n#### 输入描述：\n> 第一行为k(k<=10)，表示有k组测试数据。对于每组测试数据，第一行为n，表示有n堆石子(n<=5000)，第二行n个数，表示每堆石子有多少(1<=每堆石子<=maxlongint)。\n\n#### 输出描述：\n> 每组数据k行，为\"Tom\"或\"John\"，表示谁能获得胜利。\n\n#### 样例输入:\n> 2\n\n> 1\n\n> 2\n\n> 2\n\n> 1   1\n\n#### 样例输出:\n> John\n\n> Tom","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":9,"accepts":4,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.470Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1168,"title":"伊甸园日历游戏","content":"#### 题目描述:\n> Adam和Eve玩一个游戏，他们先从1900.1.1到2001.11.4这个日期之间随意抽取一个日期出来。然后他们轮流对这个日期进行操作：\n\n>\n\t（1）把日期的天数加1，例如1900.1.1变到1900.1.2\n\t（2）把月份加1，例如：1900.1.1变到1900.2.1\n\n> 其中如果天数超过应有天数则日期变更到下个月的第1天。月份超过12则变到下一年的1月。而且进行操作（2）的时候，如果有这样的日期：1900.1.31，则变成了1900.2.31，这样的操作是非法的，我们不允许这样做。而且所有的操作均要考虑历法和闰年的规定。\n\n> 谁先将日期变到2001.11.4谁就赢了。每次游戏都是Adam先操作，问他有没有必胜策略？\n\n#### 输入描述：\n> 第一行为测试数据组数。接下来每行行X Y Z表示X年Y月Z日\n\n#### 输出描述：\n> 输出\"YES\"或\"NO\"表示亚当是否有必胜策略。\n\n#### 样例输入:\n> 3\n\n> 2001 11 3\n\n> 2001 11 2\n\n> 2001 10 3\n\n#### 样例输出:\n> YES\n\n> NO\n\n> NO","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":16,"accepts":10,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.474Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1169,"title":"乒乓球","content":"#### 题目描述:\n> 华华通过以下方式进行分析，首先将比赛每个球的胜负列成一张表，然后分别计算在11分制和21分制下，双方的比赛结果（截至记录末尾）。\n\n> 比赛规则和实际比赛规则相同, 即比分为10:11时还要继续比赛，直到分数差距达到2分.\n\n> 比如现在有这么一份记录，（其中W表示华华获得一分，L表示华华对手获得一分）：\n\n> WWWWWWWWWWWWWWWWWWWWWWLW\n\n> 在11分制下，此时比赛的结果是华华第一局11比0获胜，第二局11比0获胜，正在进行第三局，当前比分1比1。而在21分制下，此时比赛结果是华华第一局21比0获胜，正在进行第二局，比分2比1。如果一局比赛刚开始，则此时比分为0比0。\n\n> 你的程序就是要对于一系列比赛信息的输入（WL形式），输出正确的结果。\n\n#### 输入描述：\n> 每个输入文件包含若干行字符串（每行至多20个字母），字符串有大写的W、L和E组成,也许中间有若干个空格。其中E表示比赛信息结束，程序应该忽略E之后的所有内容,E后面可能有干扰文字。\n\n#### 输出描述：\n> 输出由两部分组成，每部分有若干行，每一行对应一局比赛的比分（按比赛信息输入顺序）。其中第一部分是11分制下的结果，第二部分是21分制下的结果，两部分之间由一个空行分隔。\n\n#### 样例输入:\n> WWWWWWWWWWWWWWWWWWWW\n\n> WWLWE\n\n#### 样例输出:\n>     \n    11:0\n    11:0\n    1:1\n>     \n    21:0\n    2:1","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":9,"accepts":6,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.478Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1170,"title":"Digit Primes","content":"#### 题目描述:\n> A prime number is a positive number, which is divisible by exactly two different integers. A digit prime is a prime number whose sum of digits is also prime. For example the prime number 41 is a digit prime because 4+1=5 and 5 is a prime number. 17 is not a digit prime because 1+7 = 8, and 8 is not a prime number. In this problem your job is to find out the number of digit primes within a certain range less than 1000000.\n\n#### 输入描述：\n> First line of the input file contains a single integer N (0<N<=500000) that indicates the total number of inputs. Each of the next N lines contains two integers t1 and t2 (0<t1<=t2<1000000).\n\n#### 输出描述：\n> For each line of input except the first line produce one line of output containing a single integer that indicates the number of digit primes between t1 and t2 (inclusive).\n\n#### 样例输入:\n> 3\n\n> 10 20\n\n> 10 100\n\n> 100 10000\n\n#### 样例输出:\n> 1\n\n> 10\n\n> 576\n\n#### Note: \n> ** You should at least use scanf() and printf() to take input and produce output for this problem. cin and cout is too slow for this problem to get it within time limit. **","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":62,"accepts":18,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.485Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1171,"title":"取石子","content":"#### 题目描述:\n> 小王喜欢与同事玩一些小游戏，今天他们选择了玩取石子。游戏规则如下：共有N堆石子，已知每堆中石子的数量，两个人轮流取子，每次只能选择N堆石子中的一堆，取一定数量的石子（最少取一个），取过子之后，还可以将该堆石子中剩下的任意多个石子中随意选取几个放到其它的任意一堆或几堆上。等哪个人无法取子时就表示此人输掉了游戏。注意，一堆石子没有子之后，就不能再往此处放石子了。假设每次都是小王先取石子，并且游戏双方都绝对聪明，现在给你石子的堆数、每堆石子的数量，请判断出小王能否获胜。\n\n#### 输入描述：\n> 可能有多组测试数据(测试数据组数不超过1000) ，每组测试数据的第一行是一个整数，表示N(1<=N<=100) ，第二行是N个整数分别表示该堆石子中石子的数量。（每堆石子数目不超过100）\n\n> 当输入的N为0时，表示输入结束 输出对于每组测试数据\n\n#### 输出描述：\n> Win表示小王可以获胜，输出Lose表示小王必然会败\n\n#### 样例输入:\n> 4\n\n> 3  1  4  2\n\n> 2\n\n> 1  0 \n\n#### 样例输出:\n> Win\n\n> Lose","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":10,"accepts":1,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.491Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1173,"title":"Web Navigation ","content":"#### 题目描述:\n> Standard web browsers contain features to move backward and forward among the pages recently visited. One way to implement these features is to use two stacks to keep track of the pages that can be reached by moving backward and forward. In this problem, you are asked to implement this.\n\n> The following commands need to be supported:\n\n> **BACK**: Push the current page on the top of the forward stack. Pop the page from the top of the backward stack, making it the new current page. If the backward stack is empty, the command is ignored.\n\n> **FORWARD**: Push the current page on the top of the backward stack. Pop the page from the top of the forward stack, making it the new current page. If the forward stack is empty, the command is ignored.\n\n> **VISIT**: Push the current page on the top of the backward stack, and make the URL specified the new current page. The forward stack is emptied.\n\n> **QUIT**: Quit the browser.\n\n> Assume that the browser initially loads the web page at the URL http://www.acm.org/\n\n#### 输入描述：\n> Input is a sequence of commands. The command keywords BACK, FORWARD, VISIT, and QUIT are all in uppercase. URLs have no whitespace and have at most 70 characters. You may assume that no problem instance requires more than 100 elements in each stack at any time. The end of input is indicated by the QUIT command.\n\n#### 输出描述：\n> For each command other than QUIT, print the URL of the current page after the command is executed if the command is not ignored. Otherwise, print \"Ignored\". The output for each command should be printed on its own line. No output is produced for the QUIT command.\n\n#### 样例输入:\n> VISIT http://acm.ashland.edu/\n\n> VISIT http://acm.baylor.edu/acmicpc/\n\n> BACK\n\n> BACK\n\n> BACK\n\n> FORWARD\n\n> VISIT http://www.ibm.com/\n\n> BACK\n\n> BACK\n\n> FORWARD\n\n> FORWARD\n\n> FORWARD\n\n> QUIT\n\n#### 样例输出:\n> http://acm.ashland.edu/\n\n> http://acm.baylor.edu/acmicpc/\n\n> http://acm.ashland.edu/\n\n> http://www.acm.org/\n\n> Ignored\n\n> http://acm.ashland.edu/\n\n> http://www.ibm.com/\n\n> http://acm.ashland.edu/\n\n> http://www.acm.org/\n\n> http://acm.ashland.edu/\n\n> http://www.ibm.com/\n\n> Ignored","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":4,"accepts":4,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.498Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1175,"title":"移动小球","content":"#### 题目描述:\n> 你有一些小球，从左到右依次编号为1,2,3,&hellip;,n，(1<=n,m<=2000)\n\n> 你可以执行两种指令。A X Y 把小球X移动到Y左边；B X Y 把小球X移动到Y右边。指令保证合法（X与Y不同）。\n\n#### 输入描述：\n> 输入: 第一行是2个正整数，第一个正整数是小球个数n，第二个正整数是指令条数m；随后输入m条指令。\n\n#### 输出描述：\n> 从左到右输出最后的序列中各小球序号。序号之间使用空格隔开。行末没有空格。\n\n#### 样例输入:\n> 6 2\n\n> A 1 4\n\n> B 3 5\n\n#### 样例输出:\n> 2 1 4 5 3 6","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":86,"accepts":14,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.510Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1177,"title":"Tree Recovery","content":"#### 题目描述:\n> Little Valentine liked playing with binary trees very much. Her favorite game was constructing randomly looking binary trees with capital letters in the nodes. \n\n> This is an example of one of her creations:\n\n> ![图片描述](/static/pic/1177_tree.png)\n\n> To record her trees for future generations, she wrote down two strings for each tree: a preorder traversal (root, left subtree, right subtree) and an inorder traversal (left subtree, root, right subtree). For the tree drawn above the preorder traversal is DBACEGF and the inorder traversal is ABCDEFG. \n\n> She thought that such a pair of strings would give enough information to reconstruct the tree later (but she never tried it). \n\n> Now, years later, looking again at the strings, she realized that reconstructing the trees was indeed possible, but only because she never had used the same letter twice in the same tree. \n\n> However, doing the reconstruction by hand, soon turned out to be tedious. \n\n> So now she asks you to write a program that does the job for her! \n\n#### 输入描述：\n> The input will contain one or more test cases. \n\n> Each test case consists of one line containing two strings preord and inord, representing the preorder traversal and inorder traversal of a binary tree. Both strings consist of unique capital letters. (Thus they are not longer than 26 characters.) \n\n> Input is terminated by end of file. \n\n#### 输出描述：\n> For each test case, recover Valentine\"s binary tree and print one line containing the tree\"s postorder traversal (left subtree, right subtree, root). \n\n#### 样例输入:\n> DBACEGF ABCDEFG\n\n> BCAD CBAD\n\n#### 样例输出:\n> ACBFGED\n\n> CDAB","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":34,"accepts":21,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.521Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1179,"title":"Let the Balloon Rise","content":"#### 题目描述:\n> Contest time again! How excited it is to see balloons floating around. But to tell you a secret, the judges\" favorite time is guessing the most popular problem. When the contest is over, they will count the balloons of each color and find the result.\u000b\u000bThis year, they decide to leave this lovely job to you. \n\n#### 输入描述：\n> Input contains multiple test cases. Each test case starts with a number N (0 < N <= 1000) -- the total number of balloons distributed. The next N lines contain one color each. The color of a balloon is a string of up to 15 lower-case letters.A test case with N = 0 terminates the input and this test case is not to be processed.\n\n#### 输出描述：\n> For each case, print the color of balloon for the most popular problem on a single line. It is guaranteed that there is a unique solution for each test case.\n\n#### 样例输入:\n> 5\n\n> green\n\n> red\n\n> blue\n\n> red\n\n> red\n\n> 3\n\n> pink\n\n> orange\n\n> pink\n\n> 0\n\n#### 样例输出:\n> red\n\n> pink","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":18,"accepts":15,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.525Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1180,"title":"Elevator","content":"#### 题目描述:\n> The highest building in our city has only one elevator. A request list is made up with N positive numbers. The numbers denote at which floors the elevator will stop, in specified order. It costs 6 seconds to move the elevator up one floor, and 4 seconds to move down one floor. The elevator will stay for 5 seconds at each stop.\n\n> For a given request list, you are to compute the total time spent to fulfill the requests on the list. The elevator is on the 0th floor at the beginning and does not have to return to the ground floor when the requests are fulfilled.\n\n#### 输入描述：\n> There are multiple test cases. Each case contains a positive integer N, followed by N positive numbers. All the numbers in the input are less than 100. A test case with N = 0 denotes the end of input. This test case is not to be processed.\n\n#### 输出描述：\n> Print the total time on a single line for each test case. \n\n#### 样例输入:\n> 1 2\n\n> 3 2 3 1\n\n> 0\n\n#### 样例输出:\n> 17\n\n> 41","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":15,"accepts":11,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.535Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1181,"title":"FatMouse \" Trade","content":"#### 题目描述:\n> FatMouse prepared M pounds of cat food, ready to trade with the cats guarding the warehouse containing his favorite food, JavaBean.\n\n> The warehouse has N rooms. The i-th room contains J[i] pounds of JavaBeans and requires F[i] pounds of cat food. FatMouse does not have to trade for all the JavaBeans in the room, instead, he may get J[i]* a% pounds of JavaBeans if he pays F[i]* a% pounds of cat food. Here a is a real number. Now he is assigning this homework to you: tell him the maximum amount of JavaBeans he can obtain.\n\n#### 输入描述：\n> The input consists of multiple test cases. Each test case begins with a line containing two non-negative integers M and N. Then N lines follow, each contains two non-negative integers J[i] and F[i] respectively. The last test case is followed by two -1\"s. All integers are not greater than 1000.\n\n#### 输出描述：\n> For each test case, print in a single line a real number accurate up to 3 decimal places, which is the maximum amount of JavaBeans that FatMouse can obtain\n\n#### 样例输入:\n> 5 3\n\n> 7 2\n\n> 4 3\n\n> 5 2\n\n> 20 3\n\n> 25 18\n\n> 24 15\n\n> 15 10\n\n> -1 -1\n\n#### 样例输出:\n> 13.333\n\n> 31.500","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":6,"accepts":4,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.545Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1183,"title":"Image Transformation","content":"#### 题目描述:\n> 图像是以像素矩阵存储在计算机中。在rgb三色系统中，一个像素的颜色以&ldquo;r g b&rdquo;格式表示；r,g,b：0~255;\n\n> 然而，有时候我们需要灰度图像而不是彩色图像。\n\n> 把RGB图像转换为灰度图像的一种简单方法为：把一个像素的r,g,b值都设置为一个相同的值（即(r+g+b)/3，这里假定(r+g+b)总能被3整除）。\n\n> 编写程序测试这种方法的有效性。\n\n#### 输入描述：\n> 输入包含多个测试样例,每个测试样例以2个整数N和M(1&le;N,M&le;100)打头，表示图像的高度和宽度，接下来是3个N*M矩阵，分别代表每个像素的r,g,b值。当一行上的N和M都为0时，表示输入结束，这行数据不需处理。\n\n#### 输出描述：\n> 对每个测试样例，先输出&ldquo;Case #:&rdquo;，&ldquo;#&rdquo;是测试样例序号，从1开始。然后输出一个N*M矩阵，它描述了灰度图像中每个像素的灰度值。应当有N行，每行有M个整数，其间用逗号隔开。\n\n#### 样例输入:\n>         \n    2 2\n    1 4\n    6 9\n    2 5\n    7 10\n    3 6\n    8 11\n    2 3\n    0 1 2\n    3 4 2\n    0 1 2\n    3 4 3\n    0 1 2\n    3 4 4\n    0 0\n\n#### 样例输出:\n>         \n    Case 1:\n    2,5\n    7,10\n    Case 2:\n    0,1,2\n    3,4,3","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":12,"accepts":7,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.549Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1184,"title":"Argus","content":"#### 题目描述:\n> A data stream is a real-time, continuous, ordered sequence of items. Some examples include sensor data, Internet traffic, financial tickers, on-line auctions, and transaction logs such as Web usage logs and telephone call records. Likewise, queries over streams run continuously over a period of time and incrementally return new results as new data arrives. For example, a temperature detection system of a factory warehouse may run queries like the following. \n\n>    \n        Query-1: \"Every five minutes, retrieve the maximum temperature over the past five minutes.\"\n        Query-2: \"Return the average temperature measured on each floor over the past 10 minutes.\"\n\n> We have developed a Data Stream Management System called Argus, which processes the queries over the data streams. Users can register queries to the Argus. Argus will keep the queries running over the changing data and return the results to the corresponding user with the desired frequency.\n\n> For the Argus, we use the following instruction to register a query: \n\n>     \n        Register Qnum Period\n\n> Qnum (0 < Qnum <= 3000) is query ID-number, and Period (0 < Period <= 3000) is the interval between two consecutive returns of the result. After Period seconds of register, the result will be returned for the first time, and after that, the result will be returned every Period seconds. \n\n> Here we have several different queries registered in Argus at once. It is confirmed that all the queries have different Qnum. Your task is to tell the first K queries to return the results. If two or more queries are to return the results at the same time, they will return the results one by one in the ascending order of Qnum. \n\n#### 输入描述：\n> The first part of the input are the register instructions to Argus, one instruction per line. You can assume the number of the instructions will not exceed 1000, and all these instructions are executed at the same time. This part is ended with a line of \"#\".\n\n> The second part is your task. This part contains only one line, which is one positive integer K ( K <= 10000).\n\n#### 输出描述：\n> You should output the Qnum of the first K queries to return the results, one number per line.\n\n#### 样例输入:\n> Register 2004 200\n\n> Register 2005 300\n\n> #\n\n> 5\n\n#### 样例输出:\n> 2004\n\n> 2005\n\n> 2004\n\n> 2004\n\n> 2005","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":3,"accepts":2,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.552Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1185,"title":"Falling Leaves","content":"#### 题目描述:\n> Figure 1 shows a graphical representation of a binary tree of letters. People familiar with binary trees can skip over the definitions of a binary tree of letters, leaves of a binary tree, and a binary search tree of letters, and go right to The problem.\n\n> A binary tree of letters may be one of two things:\n>         \n\t1. It may be empty.\n\t2. It may have a root node. A node has a letter as data and refers to a left and a right subtree. The left and right subtrees are also binary trees of letters.\n\n> In the graphical representation of a binary tree of letters:\n>         \n\t1. Empty trees are omitted completely.\n\t2. Each node is indicated by Its letter data,\n\tA line segment down to the left to the left subtree, if the left subtree is nonempty,\n\tA line segment down to the right to the right subtree, if the right subtree is nonempty.\n\n> A leaf in a binary tree is a node whose subtrees are both empty. In the example in Figure 1, this would be the five nodes with data B, D, H, P, and Y.\n\n> The preorder traversal of a tree of letters satisfies the defining properties:\n\n>         \n    1.  If the tree is empty, then the preorder traversal is empty.\n    2.  If the tree is not empty, then the preorder traversal consists of the following, in order\n        &bull;  The data from the root node,\n        &bull;  The preorder traversal of the root\"s left subtree,\n        &bull;  The preorder traversal of the root\"s right subtree.\n\n> The preorder traversal of the tree in Figure 1 is KGCBDHQMPY.\n\n> A tree like the one in Figure 1 is also a binary search tree of letters. A binary search tree of letters is a binary tree of letters in which each node satisfies:\n>         \n    The root\"s data comes later in the alphabet than all the data in the nodes in the left subtree.\n    The root\"s data comes earlier in the alphabet than all the data in the nodes in the right subtree.\n\n> The problem:\n\n> Consider the following sequence of operations on a binary search tree of letters\n\n> Remove the leaves and list the data removed\n\n> Repeat this procedure until the tree is empty\n\n> Starting from the tree below on the left, we produce the sequence of trees shown, and then the empty tree\n\n> Your problem is to start with such a sequence of lines of leaves from a binary search tree of letters and output the preorder traversal of the tree.\n\n#### 输入描述：\n> The input will contain one or more data sets. Each data set is a sequence of one or more lines of capital letters.\n\n> The lines contain the leaves removed from a binary search tree in the stages described above. The letters on a line will be listed in increasing alphabetical order. Data sets are separated by a line containing only an asterisk (\"*\").\n\n> The last data set is followed by a line containing only a dollar sign (\"$\"). There are no blanks or empty lines in the input.\n\n#### 输出描述：\n> For each input data set, there is a unique binary search tree that would produce the sequence of leaves. The output is a line containing only the preorder traversal of that tree, with no blanks.\n\n#### 样例输入:\n> BDHPY\n\n> CM\n\n> GQ\n\n> K\n\n> *\n\n> AC\n\n> B\n\n> $\n\n#### 样例输出:\n> KGCBDHQMPY\n\n> BAC","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":5,"accepts":0,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.558Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1186,"title":"搬砖盒","content":"#### 题目描述:\n> Little Bob likes playing with his box of bricks. He puts the bricks one upon another and builds stacks of different height. ``\"Look, I have built a wall!\"``, he tells his older sister Alice. ``\"Nah, you should make all stacks the same height. Then you would have a real wall.\"``, she retorts. After a little consideration, Bob sees that she is right. So he sets out to rearrange the bricks, one by one, such that all stacks are the same height afterwards. But since Bob is lazy he wants to do this with the minimum number of bricks moved. Can you help?\n\n#### 输入描述：\n> The input consists of several data sets. Each set begins with a line containing the number n of stacks Bob has built. The next line contains n numbers, the heights hi of the n stacks. You may assume 1 <= n <=50 and 1 <= hi <= 100.\n\n> The total number of bricks will be divisible by the number of stacks. Thus, it is always possible to rearrange the bricks such that all stacks have the same height.\n\n> The input is terminated by a set starting with n = 0. This set should not be processed.\n\n#### 输出描述：\n> For each set, first print the number of the set, as shown in the sample output. Then print the line ``\"The minimum number of moves is k.\"``, where k is the minimum number of bricks that have to be moved in order to make all the stacks the same height.\n\n#### 样例输入:\n> 6\n\n> 5 2 4 1 7 5\n\n> 0\n\n#### 样例输出:\n> Set #1\n\n> The minimum number of moves is 5.","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":31,"accepts":5,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.564Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1188,"title":"Beautiful Number","content":"#### 题目描述:\n> Mike is very lucky, as he has two beautiful numbers, 3 and 5. But he is so greedy that he wants infinite beautiful numbers. So he declares that any positive number which is dividable by 3 or 5 is beautiful number. Given you an integer N (1 <= N <=100000), could you please tell mike the Nth beautiful number?\n\n#### 输入描述：\n> The input consists of one or more test cases. For each test case, there is a single line containing an integer N.\n\n#### 输出描述：\n> For each test case in the input, output the result on a line by itself. \n\n#### 样例输入:\n> 1\n\n> 2\n\n> 3\n\n> 4\n\n#### 样例输出:\n> 3\n\n> 5\n\n> 6\n\n> 9","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":53,"accepts":28,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.567Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1189,"title":"Doubles","content":"#### 题目描述:\n> As part of an arithmetic competency program, your students will be given randomly generated lists of from 2 to 35000 unique positive integers and asked to determine how many items in each list are twice some other item in the same list. You will need a program to help you with the grading. This program should be able to scan the lists and output the correct answer for each one.\n\n> For example, given the list 1 4 3 2 9 7 18 22 , your program should answer 3, as 2 is twice 1, 4 is twice 2, and 18 is twice 9.\n\n#### 输入描述：\n> The input will consist of one or more lists of numbers. Each list will contain from 2 to 35000 unique positive integers. Each list will be terminated with the integer 0, which is not considered part of the list. A line with the single number -1 will mark the end of the input. \n\n#### 输出描述：\n> The output will consist of one line per input list, containing a count of the items that are double some other item. \n\n#### 样例输入:\n> 1 4 3 2 9 7 18 22 0\n\n> 2 4 8 10 0\n\n> 7 5 11 13 1 3 0\n\n> -1\n\n#### 样例输出:\n> 3\n\n> 2\n\n> 0","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":17,"accepts":3,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.570Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1191,"title":"Children’s Queue","content":"#### 题目描述:\n> There are many students in PHT School. One day, the headmaster whose name is PigHeader wanted all students stand in a line. He prescribed that girl can not be in single. In other words, either no girl in the queue or more than one girl stands side by side. The case n=4 (n is the number of children) is like FFFF, FFFM, MFFF, FFMM, MFFM, MMFF, MMMM . Here F stands for a girl and M stands for a boy. The total number of queue satisfied the headmaster&rsquo;s needs is 7. Can you make a program to find the total number of queue with n children?\n\n#### 输入描述：\n> There are multiple cases in this problem and ended by the EOF. In each case, there is only one integer n means the number of children (1 <= n <= 30)\n\n#### 输出描述：\n> For each test case, there is only one integer means the number of queue satisfied the headmaster&rsquo;s needs.\n\n#### 样例输入:\n> 1\n\n> 2\n\n> 3\n\n#### 样例输出:\n> 1\n\n> 2\n\n> 4","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":12,"accepts":9,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.572Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1193,"title":"LELE的RPG难题","content":"#### 题目描述:\n> 人称 “AC 女之杀手” 的超级偶像 LELE 最近忽然玩起了深沉，这可急坏了众多 “Cole”（LELE 的粉丝，即“可乐”），经过多方打探，某资深 Cole 终于知道了原因。原来，LELE 最近研究起了著名的 RPG 难题:\n\n> 有排成一行的 n 个方格，用红(Red)、粉(Pink)、绿(Green)三色涂每个格子，每格涂一色，要求任何相邻的方格不能同色，且首尾两格也不同色。求全部的满足要求的涂法。\n\n> 以上就是著名的 RPG 难题。如果你是 Cole，我想你一定会想尽办法帮助 LELE 解决这个问题的；如果不是，看在众多漂亮的痛不欲生的 Cole 女的面子上，你也不会袖手旁观吧？\n\n#### 输入描述：\n> 输入数据包含多个测试实例，每个测试实例占一行，由一个整数 N 组成 (0 <= N <= 30)\n\n#### 输出描述：\n> 对于每个测试实例，请输出全部的满足要求的涂法，每个实例的输出占一行。\n\n#### 样例输入:\n> 1\n\n> 2\n\n#### 样例输出:\n> 3\n\n> 6","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":39,"accepts":25,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.578Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1196,"title":"直线分割圆的区域数量","content":"#### 题目描述:\n> 在一个平面上有一个圆和 n 条直线，这些直线中每一条在圆内同其他直线相交，假设没有 3 条直线相交于一点，试问这些直线将圆分成多少区域。\n\n#### 输入描述：\n> 每行一个整数，表示分割圆的直线条数\n\n#### 输出描述：\n> 每行一个结果，表示划分圆的区域个数\n\n#### 样例输入:\n> 1\n\n> 2\n\n> 3\n\n#### 样例输出:\n> 2\n\n> 4\n\n> 7","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":51,"accepts":44,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.579Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1198,"title":"十进制到六进制","content":"#### 题目描述:\n> 进制转换: 将十进制(不超过 int 类型表示的范围)的数转换为六进制的数.\n\n#### 输入描述：\n> 输入为第一行是组数 n，后面 n 行是需要进制转换的十进制数\n\n#### 输出描述：\n> 进制转换后的 n 行六进制数\n\n#### 样例输入:\n> 3\n\n> 13\n\n> 46\n\n> 265\n\n#### 样例输出:\n> 21\n\n> 114\n\n> 1121","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":108,"accepts":74,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.584Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1201,"title":"因子问题","content":"#### 题目描述:\n> 任给两个正整数 N、M，求一个最小的正整数 a，使得 a 和 (M - a) 都是 N 的因子\n\n#### 输入描述：\n> 共 K + 1 行。第一行是一个整数 K，表示共有 K 个案例。以后每行分别是一个案例，包括两个整数 N、M。N 不超过 1,000,000\n\n#### 输出描述：\n> 共 K 行，每行是一个整数 a，代表一个案例的结果。如果某个案例中满足条件的正整数不存在，则在对应行输出 -1\n\n#### 样例输入:\n> 4\n\n> 35 8\n\n> 35 9\n\n> 35 10\n\n> 24 7\n\n#### 样例输出:\n> 1\n\n> -1\n\n> 5\n\n> 1","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":50,"accepts":34,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.591Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1203,"title":"寻找能被5整除的斐波拿契数","content":"#### 题目描述:\n> 有一个序列满足： F(0) = 2, F(1) = 5, F(n) = F(n-1) + F(n-2) (n>=2).的值，输入n (0 <= n <= 10 ^ 10) 要求判断能被 5 整除的 F(n)\n\n#### 输入描述：\n> 多行输入，每行一个正整数\n\n#### 输出描述：\n> 每行一个提示信息，若 F(n) 能被 5 整除，输出 \"yes\"；否则，输出 \"no\"\n\n#### 样例输入:\n> 0\n\n> 1\n\n> 2\n\n> 3\n\n> 4\n\n> 5\n\n> 6\n\n#### 样例输出:\n> no\n\n> yes\n\n> no\n\n> no\n\n> no\n\n> no\n\n> yes","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":169,"accepts":38,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.595Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1204,"title":"电池的寿命","content":"#### 题目描述:\n> Steven 买了一个模型直升机，这架飞机由两节 5 号电池供电。为了保证能够长时间飞行，他买了很多 5 号电池。这些电池的生产商不同，质量也有差异，因而使用寿命也有所不同。有的能使用 5 个小时，有的可能就只能使用 3 个小时。显然如果他只有两个电池，一个能用 5 小时一个能用 3 小时，那么他只能进行 3 个小时的驾驶飞行，有一个电池剩下的电量无法使用。但是如果他有更多的电池，就可以更加充分地利用它们。比如他有三个电池分别能用 3、3、5 小时，他可以先使用两节能用 3 个小时的电池，使用半个小时后再把其中一个换成能使用 5 个小时的电池，两个半小时后再把剩下的一节电池换成刚才换下的电池（那个电池还能用 2.5 个小时），这样总共就可以使用 5.5 个小时，没有一点浪费。\n\n> 现在已知电池的数量和电池能够使用的时间，请你帮 Steven 找一种方案使得使用时间尽可能的长。\n\n#### 输入描述：\n> 输入包含多组数据。每组数据包括两行，第一行是一个整数 N (2 <= N <= 1000)，表示电池的数目，接下来一行是 N 个正整数表示电池能使用的时间。\n\n#### 输出描述：\n> 对每组数据输出一行，表示电池能使用的时间，保留到小数点后 1 位\n\n#### 样例输入:\n> 2\n\n> 3 5\n\n> 3\n\n> 3 3 5\n\n#### 样例输出:\n> 3.0\n\n> 5.5","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":21,"accepts":15,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.604Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1206,"title":"字符个数统计","content":"#### 题目描述:\n> 统计一段英文文字中指定字符的个数。\n\n#### 输入描述：\n> 每组测试数据包括 2 行，第一行为一段英文文字 (长度小于 100)，第二行为待统计的字符。\n\n#### 输出描述：\n> 每组测试数据输出一行，为文字中指定字符的个数。\n\n#### 样例输入:\n> AaBbABC\n\n> A\n\n> AAB BABC\n\n> a\n\n#### 样例输出:\n> 2\n\n> 0","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":114,"accepts":28,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.607Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1207,"title":"数制转换","content":"#### 题目描述:\n> 求任意两个不同进制非负整数的转换（2 进制 ～ 16 进制），所给整数在 long 所能表达的范围之内。\n\n> 不同进制的表示符号为（0，1，...，9，a，b，...，f）或者（0，1，...，9，A，B，...，F）。\n\n#### 输入描述：\n> 每组输入占一行，包含用空格分开的三个整数 a, n, b\n\n> a 表示其后的 n 是 a 进制整数\n\n> b 表示欲将 a 进制整数 n 转换成 b 进制整数。\n\n> a, b是十进制整数，2 <= a, b <= 16。\n\n#### 输出描述：\n> 每组输入输出一行，为转换后的 b 进制数。输出时字母符号全部用大写表示，即（0，1，...，9，A，B，...，F）。\n\n#### 样例输入:\n> 8 376 12\n\n> 15 Aab3 7\n\n#### 样例输出:\n> 192\n\n> 210306","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":32,"accepts":20,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.611Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1208,"title":"采药","content":"#### 题目描述:\n> 辰辰是个很有潜能、天资聪颖的孩子，他的梦想是称为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到个到处都是草药的山洞里对他说：\"孩子，这个山洞里有一些不同的草药，采每一株都需要一些时间，每一株也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。\"\n\n> 如果你是辰辰，你能完成这个任务吗？\n\n#### 输入描述：\n> 输入的第一行有两个整数 T（1 <= T <= 1000）和 M（1 <= M <= 100），T 代表总共能够用来采药的时间，M 代表山洞里的草药的数目。接下来的 M 行每行包括两个在 1 到 100 之间（包括 1 和 100）的整数，分别表示采摘某株草药的时间和这株草药的价值。\n\n#### 输出描述：\n> 输出只包括一行，这一行只包含一个整数，表示在规定的时间内，可以采到的草药的最大总价值。\n\n#### 样例输入:\n> 70 3\n\n> 71 100\n\n> 69 1\n\n> 1 2\n\n#### 样例输出:\n> 3","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":189,"accepts":48,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.619Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1211,"title":"数的距离差","content":"#### 题目描述:\n> 给定一组正整数，其中的最大值和最小值分别为 max 和 min，其中的一个数 x 到 max 和 min 的距离差 D 定义为 abs(abs(x - max) - abs(x - min))。其中，abs()表示求一个数的绝对值。\n\n#### 输入描述：\n> 第一行为一个整数 T，表示测试数据的组数。\n\n> 每组测试数据占一行，为一组以空格分隔的整数。\n\n> 其中第一个整数 n（n <= 100）表示该组中正整数的个数，接下来的 n 个正整数为该组输入。\n\n#### 输出描述：\n> 每组测试数据输出一行，其值为使得距离差 D 最小的 x。\n\n#### 样例输入:\n> 2\n\n> 5 3 1 7 5 9\n\n> 8 11 9 7 15 6 19 12 10\n\n#### 样例输出:\n> 5\n\n> 12","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":35,"accepts":23,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.622Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1212,"title":"构造新的模运算","content":"#### 题目描述:\n> 给定整数 a, b, n 要求计算 (a ^ b) mod n\n\n#### 输入描述：\n> 多组数据，每组数据一行，为三个用空格隔开的整数 a, b, n\n\n> 1 <= a <= 40, 0 <= b <= 3, 1 <= n <= 500\n\n#### 输出描述：\n> 每组数据输出一行，为所求值。\n\n#### 样例输入:\n> 2 3 5\n\n> 2 2 4\n\n#### 样例输出:\n> 3\n\n> 0","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":32,"accepts":22,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.628Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1214,"title":"特殊回文数","content":"#### 题目描述:\n> 123321 是一个非常特殊的数，它从左边读和从右边读是一样的。\n\n> 输入一个正整数 n， 编程求所有这样的五位和六位十进制数，满足各位数字之和等于 n。\n\n#### 输入描述：\n> 每组输入包含一个正整数 n（1 <= n <= 54），占一行。\n\n#### 输出描述：\n> 针对每个输入的 n，按从小到大的顺序输出满足条件的整数，每个整数占一行。**每两组输出之间有一行空白行**。\n\n#### 样例输入:\n> 52\n\n> 5\n\n#### 样例输出:\n> 899998\n\n> 989989\n\n> 998899\n\n> ``\n\n> 10301\n\n> 11111\n\n> 20102","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":89,"accepts":29,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.631Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1215,"title":"智力周期","content":"#### 题目描述:\n> 据塞伯坦星球的 Automan 研究所的研究报告，一个特别特别健康的人，也有智力周期性变化的规律。智力最高点是由身体的健康周期和情绪的变化周期的最高点确定的。由于塞伯坦星球的特殊生存性，急需选出健康而有智慧的使者去其他星球交流拜访。指挥官交给你一份名单，包含了每个人的健康周期和情绪的变化周期，作为新人的你，指挥官仅要求给出每个人的最小智力周期间隔。为了能够快速完成任务，体现出自己的出众才华，你决定通过自己非凡的编程能力为塞伯坦实现这个任务。\n\n> 提示：最小智力周期间隔即为健康周期和情绪的变化周期的最小公倍数，用类型 long 来存储变量。\n\n#### 输入描述：\n> 第一行一个数 n（n<100），接下来有 n 行，每行给出两个整数 (小于 1000)，分别表示一个人的健康周期和情绪周期。\n\n#### 输出描述：\n> 共 n 行，每行输出一个数，表示最小智力周期间隔。\n\n#### 样例输入:\n> 2\n\n> 2 3\n\n> 6 8\n\n#### 样例输出:\n> 6\n\n> 24","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":42,"accepts":36,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.634Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1216,"title":"又是数制转换","content":"#### 题目描述:\n> 输入一个数 n（n < 10），接下来有 n 行，每行给出一个十进制数 m，将 m 由十进制转换成 17 进制（超过 9 的数分别用大写字母 A - G 表示）并输出。数据范围：m < 30000。\n\n#### 输入描述：\n> 第一行为一个数 n，接下来为 n 行，每行一个十进制数。\n\n#### 输出描述：\n> 输出 n 行，每行一个 17 进制数。\n\n#### 样例输入:\n> 2\n\n> 16\n\n> 17\n\n#### 样例输出:\n> G\n\n> 10","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":37,"accepts":24,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.640Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1218,"title":"神兽的粉丝","content":"#### 题目描述:\n> 有 n (n < 100) 只羊驼，他们两两之间有的相互仰慕，有的单方面仰慕，有的则不存在仰慕关系。设有两只羊驼 A 和 B，A 是 B 的粉丝，当且仅当羊驼 A 仰慕羊驼 B 但是羊驼 B 不仰慕羊驼 A。\n\n> 现在给出每一只羊驼仰慕的其他羊驼，求出每一只羊驼的粉丝数。\n\n#### 输入描述：\n> 第一行一个数 n，接下来为一个 n &times; n的 0 1 矩阵，第 i 行第 j 列为 1 代表第 i 只羊驼仰慕第 j 只羊驼，i = j 的时候矩阵上的值总为 0（一只羊驼不会仰慕自己）。\n\n#### 输出描述：\n> n 行，每行一个数，代表第 i 只羊驼的粉丝数。\n\n#### 样例输入:\n> 3\n\n> 0 1 1\n\n> 1 0 0\n\n> 0 1 0\n\n#### 样例输出:\n> 0\n\n> 1\n\n> 1\n\n#### 样例解释：\n> 第一只羊驼仰慕第二、三只羊驼；\n\n> 第二只羊驼仰慕第一只羊驼；\n\n> 第三只羊驼仰慕第二只羊驼；\n\n> 第一只羊驼仰慕所有其他羊驼，所以粉丝数为 0；\n\n> 第二只羊驼不仰慕第三只但是第三只却仰慕第二只，并且第二只与第一只互相仰慕，所以粉丝数为 1；\n\n> 第三只羊驼被第一只羊驼仰慕却不仰慕第一只，所以粉丝数为 1.","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":26,"accepts":17,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.643Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1219,"title":"列队","content":"#### 题目描述:\n> 一队军官按照军功的大小排成一列，你作为总司令需要挑选一些人去参加中华人民共和国 65 周年国庆阅兵。但是问题出现了，由于是按照军功大小排队，军官们的身高参差不齐（这样是不美观的！），但是又必须按照军功大小来排队，所以只能在原有按军功排好的队伍的基础上撤下军官，你很体谅军官们的辛苦，想尽量撤下最少的人，来让队伍保持美观，让后面的人的身高总是不低于前面一个人，现在给出队伍人数以及代表队伍中每个人身高的一组数，求最少撤下多少人才能让队伍保持美观。\n\n> 队伍人数 < 1000, 身高为正整数且小于 30000;\n\n#### 输入描述：\n> 第一行为整数 n，接下来为 n 行，每行一个正整数，代表当前位置的军官的身高。\n\n#### 输出描述：\n> 一个整数，为最少需要撤下的人数。\n\n#### 样例输入:\n> 5\n\n> 2\n\n> 6\n\n> 2\n\n> 5\n\n> 3\n\n#### 样例输出:\n> 2\n\n#### 说明：\n> 撤下 2 号和 4 号军官，剩下的队列身高为 2、2、3，后面一个人总不矮于前一个人，实际上这就是撤下最少人数的方案。","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":13,"accepts":6,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.650Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1221,"title":"The Suspects","content":"#### 题目描述:\n> Severe acute respiratory syndrome (SARS), an atypical pneumonia of unknown aetiology, was recognized as a global threat in mid-March 2003. To minimize transmission to others, the best strategy is to separate the suspects from others. \n\n> In the Not-Spreading-Your-Sickness University (NSYSU), there are many student groups. Students in the same group intercommunicate with each other frequently, and a student may join several groups. To prevent the possible transmissions of SARS, the NSYSU collects the member lists of all student groups, and makes the following rule in their standard operation procedure (SOP).\n\n> Once a member in a group is a suspect, all members in the group are suspects. \n\n> However, they find that it is not easy to identify all the suspects when a student is recognized as a suspect. Your job is to write a program which finds all the suspects.\n\n#### 输入描述：\n> The input file contains several cases. Each test case begins with two integers n and m in a line, where n is the number of students, and m is the number of groups. You may assume that 0 < n <= 30000 and 0 <= m <= 500. Every student is numbered by a unique integer between 0 and n - 1, and initially student 0 is recognized as a suspect in all the cases. This line is followed by m member lists of the groups, one line per group. Each line begins with an integer k by itself representing the number of members in the group. Following the number of members, there are k integers representing the students in this group. All the integers in a line are separated by at least one space. \n\n> A case with n = 0 and m = 0 indicates the end of the input, and need not be processed.\n\n#### 输出描述：\n> For each case, output the number of suspects in one line.\n\n#### 样例输入:\n> 100 4\n\n> 2 1 2\n\n> 5 10 13 11 12 14\n\n> 2 0 1\n\n> 2 99 2\n\n> 200 2\n\n> 1 5\n\n> 5 1 2 3 4 5\n\n> 1 0\n\n> 0 0\n\n#### 样例输出:\n> 4\n\n> 1\n\n> 1","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":20,"accepts":12,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.657Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1222,"title":"Find them, Catch them","content":"#### 题目描述:\n> The police office in Tadu City decides to say ends to the chaos, as launch actions to root up the TWO gangs in the city, Gang Dragon and Gang Snake. However, the police first needs to identify which gang a criminal belongs to. The present question is, given two criminals; do they belong to a same clan? You must give your judgment based on incomplete information. (Since the gangsters are always acting secretly.) \n\n> Assume N (N <= 10 ^ 5) criminals are currently in Tadu City, numbered from 1 to N. And of course, at least one of them belongs to Gang Dragon, and the same for Gang Snake. You will be given M (M <= 10 ^ 5) messages in sequence, which are in the following two kinds: \n\n>     \n    1. D [a] [b]\n    where [a] and [b] are the numbers of two criminals, and they belong to different gangs. \n\n> ``\n>     \n    2. A [a] [b]\n    where [a] and [b] are the numbers of two criminals. This requires you to decide whether a and b belong to a same gang. \n\n#### 输入描述：\n> The first line of the input contains a single integer T (1 <= T <= 20), the number of test cases. Then T cases follow. Each test case begins with a line with two integers N and M, followed by M lines each containing one message as described above.\n\n#### 输出描述：\n> For each message \"A [a] [b]\" in each case, your program should give the judgment based on the information got before. The answers might be one of \"In the same gang.\", \"In different gangs.\" and \"Not sure yet.\"\n\n#### 样例输入:\n> 1\n\n> 5 5\n\n> A 1 2\n\n> D 1 2\n\n> A 1 2\n\n> D 2 4\n\n> A 1 4\n\n#### 样例输出:\n> Not sure yet.\n\n> In different gangs.\n\n> In the same gang.","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":13,"accepts":9,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.664Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1223,"title":"Cube Stacking","content":"#### 题目描述:\n> Farmer John and Betsy are playing a game with N (1 <= N <= 30,000)identical cubes labeled 1 through N. They start with N stacks, each containing a single cube. Farmer John asks Betsy to perform P (1<= P <= 100,000) operation. There are two types of operations: \n\n>     \n    moves and counts. \n    * In a move operation, Farmer John asks Bessie to move the stack containing cube X on top of the stack containing cube Y. \n    * In a count operation, Farmer John asks Bessie to count the number of cubes on the stack with cube X that are under the cube X and report that value. \n\n> Write a program that can verify the results of the game. \n\n#### 输入描述：\n> * Line 1: A single integer, P \n\n> * Lines 2..P+1: Each of these lines describes a legal operation. Line 2 describes the first operation, etc. Each line begins with a \"M\" for a move operation or a \"C\" for a count operation. For move operations, the line also contains two integers: X and Y.For count operations, the line also contains a single integer: X. \n\n> Note that the value for N does not appear in the input file. No move operation will request a move a stack onto itself. \n\n#### 输出描述：\n> Print the output from each of the count operations in the same order as the input file. \n\n#### 样例输入:\n> 6\n\n> M 1 6\n\n> C 1\n\n> M 2 4\n\n> M 2 6\n\n> C 3\n\n> C 4\n\n#### 样例输出:\n> 1\n\n> 0\n\n> 2","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":8,"accepts":7,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.683Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1228,"title":"翻硬币","content":"#### 题目描述:\n> 一摞硬币共有 m 枚，每一枚都是正面朝上。取下最上面的一枚硬币，将它翻面后放回原处。然后取下最上面的 2 枚硬币，将他们一起翻面后再放回原处。再取 3 枚，取 4 枚 ...... 直至 m 枚。然后再从这摞硬币最上面的一枚开始，重复刚才的做法。这样一直做下去，直到这摞硬币中的每一枚又都是正面朝上为止。\n\n#### 输入描述：\n> 仅有的一个数字是这摞硬币的枚数 m，0 < m < 1000。\n\n#### 输出描述：\n> 使这摞硬币中的每一枚又都是正面朝上所必需翻的次数。\n\n#### 样例输入:\n> 3\n\n> 30\n\n> 300\n\n#### 样例输出:\n> 9\n\n> 899\n\n> 7500","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":17,"accepts":12,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.687Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1229,"title":"开始探险","content":"### [2014 NUIST 程序设计竞赛]\n### A. 开始探险\n> \n#### 题目描述:\n> Ipomy 决心开始他的探险之旅，探险是需要经费的嘛，所以 Ipomy 绞尽脑汁打算赚一笔钱来。他听说最近 doge 币比较火，于是他就打算投资 doge 币来赚取探险经费。\n\n> Ipomy 现在有一枚 doge 币，他已经通过秘密渠道了解到接下来 n 天 doge 币的交易价格，他想知道自己的 doge 币最多能卖多少钱。这是一枚 doge 币\n\n#### 输入描述：\n> 多组输入，每组数据第一行为一个数 n，表示天数。\n\n> 接下来 n 行每行有一个数，按顺序表示每一天 doge 币的交易价格。\n\n#### 输出描述：\n> 多组输出，每组数据一行，每行一个数，表示当前数据最高交易价格。\n\n#### 样例输入:\n> 2\n\n> 10\n\n> 17\n\n> 4\n\n> 8\n\n> 4\n\n> 7\n\n> 1\n\n#### 样例输出:\n> 17\n\n> 8","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":215,"accepts":104,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.691Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1230,"title":"古城大门","content":"### [2014 NUIST 程序设计竞赛]\n### B. 古城大门\n> \n#### 题目描述:\n> Ipomy 来到了一座阿兹特克古城，打算到这里探险。与一般的考古发现的古迹不同的是，这一古城充斥着各种带有数学味道的机关。现在，Ipomy 站在了古城的大门口前，他需要想办法打开大门。这道门每次都会出示两个自然数 a 和 b，Ipomy 需要做的，是把这两个自然数相除后得到的最简分数输入到机关内，这样大门才得以打开。请你帮助 Ipomy 编写一个程序，完成进入古城的第一步。\n\n#### 输入描述：\n> 多组输入。\n\n> 对于每组输入，第一行包含两个大于 0 的整数 a 和 b，意义如题中所述。这里保证 a 和 b 均在 int\n 型的表示范围内。\n\n#### 输出描述：\n> 多组输出。\n\n> 每组输出包含两个整数，中间用一个空格隔开，表示 a 和 b 相除后得到的最简分数的分子和分母。每组输出均占一行。\n\n#### 样例输入:\n> 6 10\n\n> 47 57\n\n#### 样例输出:\n> 3 5\n\n> 47 57","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":134,"accepts":95,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.692Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1231,"title":"破解咒语","content":"### [2014 NUIST 程序设计竞赛]\n### C. 破解咒语\n> \n#### 题目描述:\n> 一把宝剑插在了前方的土地中，Ipomy 想将其拔出来，作为自己探险途中的武器，但他使尽了浑身的力气也无法将其拔出。这时，他发现宝剑上刻着一串咒语，上面全是他看不懂的句子。这段阿兹特克咒语是由英文小写字母组成的，Ipomy 回想起他的师父教过他的破解阿兹特克咒语的方法：把咒语中只出现过一次的字母找出来，将它们按字母表顺序排列一下，并把排好的字母写在纸上，即可将咒语破解，从而拔出宝剑。现在，请你帮 Ipomy 编写一个破解咒语的程序。\n\n#### 输入描述：\n> 多组输入。每组输入为一个仅由小写字母组成的字符串。输入数据保证有解，即至少有一个字母仅出现一次。字符串的长度不超过 255。\n\n#### 输出描述：\n> 多组输出。每组输出占一行，为只出现过一次的字母按字典序排列所构成的字符串。\n\n#### 样例输入:\n> goodlucktoyou\n\n> nuist\n\n#### 样例输出:\n> cdgklty\n\n> instu","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":104,"accepts":76,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.698Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1232,"title":"摆渡者","content":"### [2014 NUIST 程序设计竞赛]\n### D. 摆渡者\n> \n#### 题目描述:\n> Ipomy 发现其前方有一条河。这条河上漂浮着若干圆木，圆木的长度不一，这些圆木排成一列，连接河的两岸。突然，Ipomy 眼前出现了一位巫师，这位巫师说：“河的对岸还有一道门，你需要把那些短的圆木放置在离你这边尽量近的位置，越短的圆木与你越近，这样对岸的门才能打开。我可以用我的巫术帮你，但我的能力有限，我每次只能将相邻两个圆木交换位置。” Ipomy很感激巫师对他的帮助，他想知道，这位巫师需要移动圆木多少次，才能把圆木放置好，使得对岸的门能够打开。\n\n#### 输入描述：\n> 多组输入。\n\n> 每组输入的第一行是圆木总数 n（不大于 1000）。第二行是 n 个不同的数，表示初始的每个圆木的长度。第一个长度对应的圆木距离 Ipomy 所在的河岸最近，最后一个数对应的圆木距离 Ipomy 所在的河岸最远。保证所有长度均在 int 型的表示范围内。\n\n#### 输出描述：\n> 多组输出。\n\n> 每组输出占据一行，为一个整数，是需要的移动次数。\n\n#### 样例输入:\n> 4\n\n> 4 3 2 1\n\n> 3\n\n> 1 4 7\n\n#### 样例输出:\n> 6\n\n> 0","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":116,"accepts":72,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.703Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1233,"title":"斯芬克斯的挑战","content":"### [2014 NUIST 程序设计竞赛]\n### E. 斯芬克斯的挑战\n> \n#### 题目描述:\n> 来到河对岸后，Ipomy 遇到了神兽斯芬克斯（从古埃及穿越来了阿兹特克= =）。这次斯芬克斯换了一个更艰难的问题刁难路人。它说，每个自然数 N 都可以被拆成若干个较小的自然数之和，它想要 Ipomy 回答的是，对于一个指定的自然数 N，究竟有多少种拆分方法。\n\n> 自然数 7 的拆分方法如下所示，共 14 种：\n\n>     \n    7=1+1+1+1+1+1+1\n    7=1+1+1+1+1+2\n    7=1+1+1+1+3\n    7=1+1+1+2+2\n    7=1+1+1+4\n    7=1+1+2+3\n    7=1+1+5\n    7=1+2+2+2\n    7=1+2+4\n    7=1+3+3\n    7=1+6\n    7=2+2+3\n    7=2+5\n    7=3+4\n\n#### 输入描述：\n> 多组输入。\n\n> 每组输入包含一个自然数 N，为待拆分的数，保证 1 < N &le; 60。\n\n#### 输出描述：\n> 多组输出。\n\n> 每组输出占据一行，为一个整数，表示拆分的方法数。\n\n#### 样例输入:\n> 7\n\n> 9\n\n#### 样例输出:\n> 14\n\n> 29","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":49,"accepts":36,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.710Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1234,"title":"猜谜大师","content":"### [2014 NUIST 程序设计竞赛]\n### F. 猜谜大师\n> \n#### 题目描述:\n> 过了斯芬克斯的关卡后，Ipomy 遇见了一只叫做咕噜的妖精。咕噜特别喜欢和别人猜谜，它和 Ipomy 轮番猜谜，声称如果 Ipomy 猜错了，就会把他吃掉；如果咕噜猜对了，就会让 Ipomy 通过它这里。\n\n> 咕噜想猜的是一个 5 次方程 Ax^5 + Bx^4 + Cx^3 + Dx^2 + Ex + F 在某个指定区间的实根。Ipomy对咕噜如何猜测毫无兴趣，他只希望自己不会猜错结果，于是他请求你，帮助他写一个程序，能够得到上述5次方程在指定区间的实根。\n\n> 请不要使用 == 作为判断两个浮点数是否相等的方法。请定义一个极小值，当两个浮点数之差的绝对值小于这个极小值时，即判为两个数相等，例如：\n\n>    \n    double eps = 1e-5;  /* 一个极小值 */\n    if (fabs(a-b) < eps) /* fabs()为求浮点数绝对值的函数，其属于 math.h库 */\n\n> 此外，为了保证精度要求，请将所有浮点型变量定义成 double 类型。\n\n#### 输入描述：\n> 多组输入。\n\n> 每组输入的第一行为 6 个浮点数，对应方程的系数以及常数项。系数对应 x 的次数由高到低排列。第二行为 2 个浮点数，为待求根所在的区间。保证所给区间内有且仅有一个实根。\n\n#### 输出描述：\n> 多组输出。\n\n> 每组输出占据一行，为一个实数，对应方程的根。保留 4 位小数输出。\n\n#### 样例输入:\n> -7.0 -2.0 6.0 -4.0 5.0 0.0\n\n> 0.9 1.0\n\n> 0.0 0.0 0.0 0.0 1.0 0.0\n\n> -1.0 1.0\n\n#### 样例输出:\n> 0.9111\n\n> 0.0000","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":99,"accepts":23,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.718Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1236,"title":"夺取宝藏","content":"### [2014 NUIST 程序设计竞赛]\n### H. 夺取宝藏\n> \n#### 题目描述:\n> Ipomy 现在来到了阿兹特克宝藏堆中。这些宝藏散落放在一个 m * n 的网格上，每个宝藏都有一个价值。Ipomy 自然是希望将所有宝藏统统拿走，但他在走出迷宫时，不小心中了魔咒，一次只能向下或向右移动一步。假设 Ipomy 身处网格的左上角，而古城的出口在右下角，他想在离开古城前，拿到价值之和尽可能大的宝藏。请你编写程序，帮助他计算他可以拿到的最大价值之和。\n\n#### 样例解释\n\n> 一路向下走，取到 4 和 8，接着一路向右走，取到 9, 10 和 11，价值之和为 42。\n\n#### 输入描述：\n> 多组输入。\n\n> 每组输入的第一行为两个整数 m 和 n，用来描述网格的规格。保证 1 <= m, n <= 1000。\n\n> 接下来的 m 行，每行 n 个整数，表示每个格子上面的宝藏的价值。输入数据保证 Ipomy 起始所在处没有宝藏，即价值为 0，以及每个宝藏的价值均在 int 型的表示范围内。\n\n#### 输出描述：\n> 多组输出。\n\n> 每组输出占据一行，为一个整数，表示最大的价值之和。\n\n#### 样例输入:\n> 3 4\n\n> 0 5 2 3\n\n> 4 5 6 7\n\n> 8 9 10 11\n\n#### 样例输出:\n> 42","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":61,"accepts":26,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.728Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1239,"title":"钢板切割","content":"#### 题目描述:\n> 一张长方形的钢板，长为 a 厘米，宽为 b 厘米，其中 a, b 均为整数且 10 < b < a < 1000。现在要把它切割成若干块大小一样的正方形钢板，要求切得的正方形钢板的边长也是整数厘米，并且要使切割出的正方形面积最大，求切得的正方形数目。\n\n#### 输入描述：\n> 多组输入，每一行两个用空格分开的正整数，表示矩形钢板的长和宽。\n\n#### 输出描述：\n> 一行，输出切得的正方形数。\n\n#### 样例输入:\n> 48 28\n\n#### 样例输出:\n> 4","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":4,"accepts":3,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.732Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1240,"title":"双重回文数","content":"#### 题目描述:\n> 如果一个数从左往右读和从右往左读都是一样，那么这个数就叫做 “回文数” 。例如，12321 就是一个回文数，而 77778 就不是。本题约定回文数的首和尾都应是非零的，因此 0220 就不是回文数。然而，有一些数（如 21），在十进制时不是回文数，但在其它进制（如二进制时为 10101）时就是回文数。编一个程序，读入两个十进制数 N (1 <= N <= 15), S (0 < S < 2^31)然后找出前 N 个满足大于 S 且在两种或两种以上进制（二进制至十进制）上是回文数的十进制数。如果多于两种,只要求输出前两种。\n\n#### 输入描述：\n> 一行，用空格隔开的两个数 N 和 S。\n\n#### 输出描述：\n> N 行, 每行一个满足上述要求的数，并按从小到大的顺序输出。\n\n#### 样例输入:\n> 3 25\n\n#### 样例输出:\n> 262728","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":23,"accepts":9,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.736Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1241,"title":"删除字符","content":"#### 题目描述:\n>     假定输入的字符串中只包含字母和 * 号。请编程实现：除了尾部的 * 号之外，将字符串中其他 * 号全部删除。例如，若字符串中的内容为 ****A*BC*DEF*G******，删除后，字符串中的内容应当是 ABCDEFG******。\n\n#### 输入描述：\n>     多组输入，每组占一行，输入一个只包含 * 和字母的字符串。\n\n#### 输出描述：\n> 一行，经过处理后的字符串。\n\n#### 样例输入:\n>     ****A*BC*DEF*G******\n\n#### 样例输出:\n>     ABCDEFG******","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":36,"accepts":19,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.748Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1245,"title":"进制转换","content":"#### 题目描述:\n> 我们可以用这样的方式来表示一个十进制数：将每个阿拉伯数字乘以一个以该数字所处位置的（值减 1）为指数，以 10 为底数的幂之和的形式。例如：123 可表示为 1 &times; 10 ^ 2 + 2 &times; 10 ^ 1 + 3 &times; 10 ^ 0 这样的形式。对二进制数来说，也可表示成每个二进制数码乘以一个以该数字所处位置的（值减 1）为指数，以 2 为底数的幂之和的形式。\n\n> 一般说来，任何一个正整数 R 或一个负整数 -R 都可以被选来作为一个数制系统的基数。如果是以 R 或 -R 为基数，则需要用到的数码为 0, 1, ..., R - 1。例如，当 R = 7 时，所需用到的数码是 0, 1, 2, 3, 4, 5 和 6，这与其是 R 或 -R 无关。\n\n> 如果作为基数的数绝对值超过 10，则为了表示这些数码，通常使用英文字母来表示那些大于 9 的数码。例如对 16 进制数来说，用 A 表示 10，用 B 表示 11，用 C 表示 12，用 D 表示 13，用 E 表示 14，用 F 表示 15。\n\n> 在负进制数中是用 -R 作为基数，例如 -15（十进制）相当于 110001（-2 进制），并且它可以被表示为 2 的幂级数的和数：\n\n>     110001 ＝ 1 &times; (-2)5 + 1 &times; (-2)4 + 0 &times; (-2)3 + 0 &times; (-2)2 + 0 &times; (-2)1 + 1 &times; (-2)0\n\n> 设计一个程序，读入一个十进制数和一个负进制数的基数，并将此十进制数转换为此负进制下的数：-R &isin; {-2, -3, -4, ..., -20}\n\n#### 输入描述：\n> 一行两个数，第一个是十进制数 n (-32768 <= N <= 32767)， 第二个是负进制数的基数 -R。\n\n#### 输出描述：\n> 输出所求负进制数及其基数，若此基数超过 10，则参照 16 进制的方式处理。（格式参照样例）\n\n#### 样例输入:\n> 30000 -2\n\n> -25000 -16\n\n#### 样例输出:\n> 30000=11011010101110000(base-2)\n\n> -25000=7FB8(base-16)","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":8,"accepts":5,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.762Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1249,"title":"运动会开幕","content":"#### 题目描述:\n> 2014 年 8 月在南京举行第 2 届奥林匹克青年运动会，每个国家在报名参加时需要填写国家名字，参加的人数，所属的洲，同时系统会自动生成一个报名序号，在开幕式的运动员出场顺序上，按照国家名字的英文字母顺序来出场。请编写一个计算机程序实现国家名字的排序（升序），东道主中国（China）在最后一个出场\n\n#### 输入描述：\n> 多组输入，其中每组输入的第一行表示参加国家数 n（占一行），下面 n 行是国家的报名信息（序号、国家名称、参加人数、所属大洲）\n\n#### 输出描述：\n> 按国家名字的字母序输出信息（东道主国家名字最后输出）。\n\n#### 样例输入:\n> 5\n\n> 1 France 123 Europe\n\n> 2 Russia 254 Europe\n\n> 3 Japan 235 Asia\n\n> 4 Germany 185 Europe\n\n> 5 China 560 Asia\n\n#### 样例输出:\n> 1 France 123 Europe\n\n> 4 Germany 185 Europe\n\n> 3 Japan 235 Asia\n\n> 2 Russia 254 Europe\n\n> 5 China 560 Asia","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":102,"accepts":9,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.764Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1250,"title":"小数乘法","content":"#### 题目描述:\n> 一般来说两个小数相乘所得的积仍然是小数，从键盘上输入两个双精度浮点数，求它们相乘所得的积的小数部分，结果保留 5 位小数（最后一位四舍五入）。\n\n#### 输入描述：\n> 多组输入，每组是用一个空格分开的两个单精度浮点数。\n\n#### 输出描述：\n> 占一行，对于输入的每组两个数相乘所得的积的小数部分（保留 5 位小数）\n\n#### 样例输入:\n> 1.233 2.345\n\n> 3.5 4.78\n\n#### 样例输出:\n> 0.89139\n\n> 0.73000","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":40,"accepts":11,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.771Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1252,"title":"拐角矩阵（2）","content":"#### 题目描述:\n> 可以利用数字构成一些有趣的矩阵图形，输入一个正整数 n (1 <= n <= 20)，输出一个 n 阶右下拐角方阵。\n\n#### 输入描述：\n> 多组输入，每组一个正整数，占一行。\n\n#### 输出描述：\n> 输出一个 n 阶回形方阵，每行的数字之间用一个空格分开\n\n#### 样例输入:\n> 5\n\n> 3\n\n#### 样例输出:\n>     5 4 3 2 1\n>     4 4 3 2 1\n>     3 3 3 2 1\n>     2 2 2 2 1\n>     1 1 1 1 1\n>     3 2 1\n>     2 2 1\n>     1 1 1","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":81,"accepts":41,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.775Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1253,"title":"排名问题","content":"#### 题目描述:\n> 计算机学院最近得到某公司的一笔赞助，用于奖励大一新生期末考试成绩优秀的前 5 名学生。本学期大一新生有程序设计、高等数学、英语三门必修课。要求先按总分从高到低排序，如果两个同学的总分相同，再按程序设计这门课的成绩从高到低排序，如果两个同学的总分和程序设计成绩都相同，则规定学号大的同学排在前面，这样每个学生的排名是唯一的。学生的信息包含学生姓名、学号以及三门课成绩。\n\n#### 输入描述：\n> 包括 n + 1 行，第 1 行为一个正整数 n，表示学院参加评选的学生人数。第 2 到 n + 1 行，每行有\n 5 个用一个空格分开的数据，第一个表示学生姓名、第 2 个表示学生学号（1 <= 学号 <= n）、第 3 到第 5 个表示三门课的成绩。成绩在 0 - 100 之间的整数。\n\n#### 输出描述：\n> 共 5 行，每行是用一个空格分隔开的三个数据依次表示前5个学生的姓名、学号和总分。\n\n#### 样例输入:\n>     6\n>     AA 1 90 67 80\n>     BB 2 87 66 91\n>     CC 3 84 89 91\n>     DD 4 88 99 77\n>     EE 5 67 89 64\n>     FF 6 78 89 98\n\n#### 样例输出:\n> FF 6 265\n\n> DD 4 264\n\n> CC 3 264\n\n> BB 2 244\n\n> AA 1 237","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":22,"accepts":10,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.787Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1255,"title":"Max Sum","content":"#### 题目描述:\n> Given a sequence a[1], a[2], a[3], ..., a[n], your job is to calculate the max sum of a sub-sequence.\n\n> For example, given (6,-1,5,4,-7), \nthe max sum in this sequence is 6 + (-1) + 5 + 4 = 14.\n\n#### 输入描述：\n> The first line of the input contains an integer T (1 <= T <= 20) which means the number of test cases. Then T lines follow, each line\nstarts with a number N (1 <= N <= 100000), then N integers followed (all the integers are between -1000 and 1000).\n\n#### 输出描述：\n> For each test case, you should output one line. The line contains three integers, the Max Sum in the sequence, the start position\nof the sub-sequence, the end position of the sub-sequence. If there are more than one result, output the first one. Output a blank\nline between two cases.  \n\n#### 样例输入:\n> 2\n\n> 5 \n\n> 6 -1 5 4 -7\n\n> 7\n\n> 0 6 -1 1 -6 7 -5\n\n#### 样例输出:\n> 14 1 4\n\n> 7 1 6","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":17,"accepts":7,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.790Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1256,"title":"最佳舞伴","content":"#### 题目描述:\n> 学校每年九月份都要举行研究生的新生文艺演出，张三所在的学院决定排练一个舞蹈节目，为了选择表演者，辅导员定下了如下规则：为了保证舞蹈的美观，当且仅当男女舞伴的身高之差不超过给定的整数（厘米表示）c 时，这两个人可以成为舞伴而参加演出。\n\n> 张三所在的学院今年共招收了 m (m <= 1000) 名男研究生和 n (n <= 1000) 名女研究生，给定学院每名男女研究生新生的身高（用厘米表示的整数），求最多有多少对舞伴参加演出？\n\n#### 输入描述：\n> 多组输入，每组输入分三行。\n\n> 第一行三个整数 m, n, c，分别表示男生、女生人数和身高的最大差值，每个输之间用一个空格分开。\n\n> 第二行有 m 个整数，分别表示每个男生的身高，每个数之间用一个空格分开。\n\n> 第三行有 n 个整数，分别表示每个女生的身高，每个数之间用一个空格分开。\n\n#### 输出描述：\n> 对应于每组输入，输出一行，仅一个整数，表示参加演出的舞伴对数。\n\n#### 样例输入:\n> 3 3 7\n\n> 170 185 175\n\n> 160 170 175\n\n#### 样例输出:\n> 2","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":10,"accepts":5,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.796Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1258,"title":"字符串处理","content":"#### 题目描述:\n>     规定字符串中只包含字母和 * 号，你的任务是除了字符串前导的 * 号外，将字符串中其位置的 * 全部删除。\n\n#### 输入描述：\n> 多组输入，每组一个字符串，占一行，每行字符串的长度不超过 1000 个字符。\n\n#### 输出描述：\n> 对应于每组输入，输出处理后的字符串，占一行。\n\n#### 样例输入:\n>     ****A*BC*DEF*G******** \n>     **********LKJFHG****KHJ***SDFGH****KJKJ*J*K*K*J*****\n\n#### 样例输出:\n>     ****ABCDEFG\n>     **********LKJFHGKHJSDFGHKJKJJKKJ","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":87,"accepts":38,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.803Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1259,"title":"正整数的树根","content":"#### 题目描述:\n> 一个正整数的数根表示的含义为：计算该数的各数位之和，若结果为单个数字 (0 ~ 9)，则该数字即为所求数的根；若结果值是由两位或两位以上的数字组成的数，则继续计算各位数字的和，直到结果值只有一位数字为止，该数字即为树根。\n\n> 如：正整数 24，2 + 4 = 6，则 6 为 24 的根。又如：39，其各数位的和表示为 3 + 9 = 12，其中 12 不是单个数字，则需继续计算，1 + 2 = 3，所以 39 的根为 3。\n\n#### 输入描述：\n> 包括多组测试数据，每组测试数据包括一个正整数，并且占一行，若输入的数据为 0，则表示输入结束。\n\n#### 输出描述：\n> 每行表示一个测试数据的结果。\n\n#### 样例输入:\n> 24\n\n> 39\n\n> 0\n\n#### 样例输出:\n> 6\n\n> 3","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":40,"accepts":28,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.815Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1262,"title":"构造新的单词","content":"#### 题目描述:\n> 现在给出一种新的方法产生单词。对于给定一个单词（长度大于 3），从第 3 位开始将其后的字母作为单词的首部，前两位逆序后接在首部之后，构成新的单词。若得到的单词与原单词一致，则输出 NO，否则输出这个新单词。\n\n#### 输入描述：\n> 第一行表示有 n 个单词，接着的 n 行每行表示一个单词\n\n#### 输出描述：\n> 每行一个单词，若不能构成新单词，则输出 NO\n\n#### 样例输入:\n> 3\n\n> throw\n\n> especially\n\n> level\n\n#### 样例输出:\n> rowht\n\n> peciallyse\n\n> velel","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":38,"accepts":24,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.818Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1263,"title":"高精度乘法（二）","content":"#### 题目描述:\n> 两个长度小于 100 位的正整数，求其乘积。\n\n#### 输入描述：\n> 第一行是一个正整数 n (n < 50)，表示有 n 组测试数据，每组测试数据由两行构成。每行表示一个测试数据，每个测试数据是长度小于 100 位的正整数。\n\n#### 输出描述：\n> n 行，每行一个计算结果。\n\n#### 样例输入:\n> 2\n\n> 11111\n\n> 22222\n\n> 1937\n\n> 2931\n\n#### 样例输出:\n> 246908642\n\n> 5677347","source":"nuistoj","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":42,"accepts":30,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.824Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1265,"title":"大数的位数","content":"#### 题目描述:\n> 在很多的应用中都会涉及到大数的位数问题，比如数据的传输、数据加密等应用中。现在需要计算一个整数的阶乘的位数。\n\n#### 输入描述：\n> 多组输入。第一行为一个整数 n，表示共有 n 组测试数据，接下来的 n 行，每行表示一个大于等于 1 且小于 10 ^ 7 的整数\n\n#### 输出描述：\n> 每行输出一个对应整数阶乘的位数。\n\n#### 样例输入:\n> 2\n\n> 10\n\n> 20\n\n#### 样例输出:\n> 7\n\n> 19","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":33,"accepts":22,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.827Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1266,"title":"表达式求值","content":"#### 题目描述:\n> 计算仅含有加法计算的表达式的值。改表达式的长度不超过 200，中间没有空格和括号，且计算结果在整数范围内。\n\n#### 输入描述：\n> 若干行，每行一个仅含有加法的表达式。\n\n#### 输出描述：\n> 若干行，每行一个表达式的计算结果。\n\n#### 样例输入:\n> 1+2+3\n\n> 12+23+21\n\n#### 样例输出:\n> 6\n\n> 56","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":189,"accepts":92,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.833Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1267,"title":"判断三角形的类别","content":"#### 题目描述:\n> 根据输入的三个正整数，判断他们能否构成三角形。若能，如是等边的，输出 regular triangle；若是等腰的，输出 isosceles triangle；是直角三角形，则输出 right triangle；若是普通三角形，输出 triangle。若不能构成三角形，输出 not a triangle。\n\n#### 输入描述：\n> 若干行，每行三个正整数，表示三边长\n\n#### 输出描述：\n> 若干行，每行一个三角形的类别\n\n#### 样例输入:\n> 3 3 3\n\n> 3 4 5\n\n> 1 3 8\n\n#### 样例输出:\n> regular triangle\n\n> right triangle\n\n> not a triangle","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":106,"accepts":35,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.836Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1268,"title":"连续子段的最大和","content":"#### 题目描述:\n> 从一组数据（长度为 n，其中 n <= 10000，数据的值都大于 -60000）中找出连续的一段数，使得这段数的和最大。\n\n#### 输入描述：\n> 第一行是一个正整数 n，表示数据的个数，从第二行开始是 n 个数据。\n\n#### 输出描述：\n> 一行，子段的最大和。\n\n#### 样例输入:\n> 5\n\n> 1 -3 4 1 -9\n\n#### 样例输出:\n> 5","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":24,"accepts":18,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.840Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1269,"title":"Calculate Expression","content":"#### 题目描述:\n> The contest starts now! How excited it is to see balloons floating around. You, one of the best programmers in Nuist, can get a very beautiful balloon if only you have solved the very very very ... easy problem.\n\n> Give you an operator (+, -, *, / --denoting addition, subtraction, multiplication, division respectively) and two positive integers, your task is to output the result.   Is it very easy? Good Luck!\n\n#### 输入描述：\n> Input contains multiple test cases. The first line of the input is a single integer T (0 < T < 1000) which is the number of test cases. T test cases follow. Each test case contains a char C (+, -, *, /) and two integers A and B (0 < A, B < 10000). Of course, we all know that A and B are operands and C is an operator.\n\n#### 输出描述：\n> For each case, print the operation result. The result should be rounded to 2 decimal places If and only if it is not an integer.\n\n#### 样例输入:\n>     4\n>     + 1 2\n>     - 1 2\n>     * 1 2\n>     / 1 2\n\n#### 样例输出:\n> 3\n\n> -1\n\n> 2\n\n> 0.50","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":21,"accepts":12,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.846Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1271,"title":"计算表达式的值","content":"#### 题目描述:\n> 计算仅含有加法运算的表达式的值，该表达式的长度不超过 1000 个字符，中间没有空格和括号，并且计算机结果在长整数范围内。\n\n#### 输入描述：\n> 输入一行仅包含有加法运算的表达式。\n\n#### 输出描述：\n> 对于输入，输出一行，表示计算结果。\n\n#### 样例输入:\n> 12+23+21\n\n#### 样例输出:\n> 56","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":21,"accepts":18,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.848Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1272,"title":"五一节礼物","content":"#### 题目描述:\n> 五一节快到了，乐乐打算给他的好朋友们发贺卡，而且他已经选好了自己要购买的贺卡样式。俗话说得好，货比三家，乐乐来到了商店，看了各商普的同种贺卡的价格，不仅如此，乐乐还记下了每个商铺的存货量。已知乐乐打算购买 m 张贺卡，问他最少花多少钱？\n\n#### 输入描述：\n> 第一行有两个整数 m 和 n。其中 m 表示要购买贺卡的数量，n 表示商铺的个数，数据之间用一个空格分开。以下 n 行，每行有两个用一个空格分开的整数，分别表示该商铺这种贺卡的单价和存货量。\n\n#### 输出描述：\n> 仅一个数，表示乐乐所花的最少钱数（数据都在长整数范围内）\n\n#### 样例输入:\n> 10 4\n\n> 4 3\n\n> 6 2\n\n> 8 10\n\n> 3 6\n\n#### 样例输出:\n> 36","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":18,"accepts":16,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.851Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1273,"title":"输出数阵","content":"#### 题目描述:\n> 数字按照一定的要求排列成各种图形，称为数阵图。给定正整数 n，输出 n 阶回文方阵。\n\n#### 输入描述：\n> 输入一个正整数 n (1 <= n <= 1000)，占一行。\n\n#### 输出描述：\n> 输出一个 n &times; n 阶的回文矩阵，每个数字之间，用一个空格分开。\n\n#### 样例输入:\n> 5\n\n#### 样例输出:\n> 1 1 1 1 1\n\n> 1 2 2 2 1\n\n> 1 2 3 2 1\n\n> 1 2 2 2 1\n\n> 1 1 1 1 1","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":24,"accepts":12,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.854Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1274,"title":"整数的分块乘法","content":"#### 题目描述:\n> 对于 32 位字长的机器，大约超过 20 亿，用 int 类型就无法表示了，我们可以选择 int64 类型，但无论怎样扩展，固定的整数类型总是有表达的极限！如果对超级大整数进行精确运算呢？一个简单的办法是：仅仅使用现有类型，但是把大整数的运算化解为若干小整数的运算，即所谓：“分块法”。如图所示：表示了分块乘法的原理。可以把大数分成多段（此处为 2 段）小数，然后用小数的多次运算组合表示一个大数。可以根据 int 的承载能力规定小块的大小，比如要把 int 分成 2 段，则小块可取 10000 为上限值。注意，小块在进行纵向累加后，需要进行进位校正。\n\n> 现在，请你使用上面介绍的方法实现两个大整数的乘法。\n\n#### 输入描述：\n> 若干行，每行两个正整数 n, m (n, m < 2^31），用空格隔开。\n\n#### 输出描述：\n> 若干行，每行一个计算结果。\n\n#### 样例输入:\n> 1111111 2222222\n\n> 3333333 4444444\n\n#### 样例输出:\n> 2469135308642\n\n> 14814811851852","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":9,"accepts":2,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.856Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1275,"title":"基本不可约分数的数量","content":"#### 题目描述:\n> 一个分数m/n如果满足0<=m<n则它是基本分数；如果满足gcd(m,n)=1，则它是不可约的(irreducible)。给出一个正整数n，要求找到分母为n的不可约基本分数的数量。n<=10000。\n\n> 例如：n=12,其中1/12，5/12，7/12，11/12均为不可约分数。\n\n#### 输入描述：\n> 每行一个正整数n，表示分数的分母\n\n#### 输出描述：\n> 每行一个数值，表示以n为分母的不可约分数的个数\n\n#### 样例输入:\n> 12\n\n> 15\n\n#### 样例输出:\n> 4\n\n> 8","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":12,"accepts":11,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.859Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1276,"title":"位素数的个数","content":"#### 题目描述:\n> 一个位素数表示一个素数的所有位数相加的和也是素数的素数。如41就是一个位素数，因为4+1=5,5也是素数。本题要求在11000范围内给出位素数的数量。\n\n#### 输入描述：\n> 第一行表示一个正整数n(0<n<=50000),表示输入的数据组数，接下来的n行，每行两个数t1和t2(0<t1,t2<=10000)，表示在区间[t1,t2]范围。\n\n#### 输出描述：\n> 每个区间中位素数的个数占一行。即，在t1和t2范围内(包含t1,t2)位素数的个数\n\n#### 样例输入:\n> 3\n\n> 10 20\n\n> 10 100\n\n> 100 10000\n\n#### 样例输出:\n> 1\n\n> 10\n\n> 576","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":18,"accepts":14,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.863Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1277,"title":"Speak Time","content":"#### 题目描述:\n> 给定当前的时间，请用英文的读法将它读出来。时间用时 h 和分 m 表示。在英文的读法中，读一个时间的方法是：\n\n> 如果 h 为 0，则将小时读为 zero，如 0:30 读作 zero thirty；\n\n> 如果 m 为 0，则将时读出来，然后加上 \"o'clock\"，如 3:00 读作 \"three o'clock\"；\n\n> 如果 m 不为 0，则将时读出来，然后将分读出来，如 5:30 读作 \"five thirty\"。\n\n> 时和分的读法使用的是英文数字的读法，其中 0 ~ 23 读作：\n\n>     \n    0: zero      1: one          2: two            3: three          4: four\n    5: five      6: six          7: seven          8: eight          9: nine\n    10: ten      11: eleven      12: twelve        13: thirteen      14: fourteen\n    15: fifteen  16: sixteen     17: seventeen     18: eighteen      19: nineteen\n    20: twenty   21: twenty one  22: twenty two    23: twenty three\n    30: thirty   40: forty       50: fifty\n\n> 对于大于 20 小于 60 的数字，首先读整十的数，然后再加上个位数。\n\n> 如 31 首先读 30 再加 1 的读法，读作 \"thirty one\"。\n\n> 按上面的规则 21:54 读作 \"twenty one fifty four\"，9:07 读作 \"nine seven\"，0:15 读作 \"zero fifteen\"。\n\n#### 输入描述：\n> 输入包含两个非负整数 h 和 m，表示时间的时和分。非零的数字前没有前导 0。h 小于 24，m 小于 60。\n\n#### 输出描述：\n> 输出时间时刻的英文。\n\n#### 样例输入:\n> 0 15\n\n> 14 56\n\n#### 样例输出:\n> zero fifteen\n\n> fourteen fifty six","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":20,"accepts":7,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.868Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1279,"title":"晕头的蚂蚁","content":"#### 题目描述:\n> n 只蚂蚁以每秒 1cm 的速度在长为 Lcm 的竿子上爬行。当蚂蚁爬到竿子的端点时就会掉落。由于竿子太细，两只蚂蚁相遇时，它们不能交错通过，只能各自反向爬回去。对于每只蚂蚁，我们知道它距离竿子左端的距离 xi，但不知道它当前的朝向。请计算所有蚂蚁落下竿子所需的最短时间和最长时间。限制条件：所有的整数都 <= 10000 （提示：当两只相遇后，可以认为它们穿越。）\n\n#### 输入描述：\n> 第一行表示测试数据的组数。下一行输入两个整数，分别表示杆子的长度L和蚂蚁的个数n。接着的一行表示n只蚂蚁的在杆子上的位置（不分头的方向）。\n\n#### 输出描述：\n> 每组测试数据占一行，表示全部落下的最短时间和最长时间，每个数据用一个空格隔开，每行的最后一个数据后没有空格。\n\n#### 样例输入:\n> 2\n\n> 10 3\n\n> 2 6 7\n\n> 214 7\n\n> 11 12 7 13 176 23 191\n\n#### 样例输出:\n> 4 8\n\n> 38 207\n\n#### 相关问题：\n> 试试此题的数据加强版：[1378](/problem/submit?tw=1378)","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":12,"accepts":7,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.872Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1280,"title":"莫尔斯电码翻译","content":"#### 题目描述:\n> 莫尔斯电码表示方式为：\n\n>        \n        a/A .-\n        b/B -...\n        c/C -.-.\n        d/D -..\n        e/E .\n        f/F ..-.\n        g/G --.\n        h/H ....\n        i/I ..\n        j/J .---\n        k/K -.-\n        l/L .-..\n        m/M --\n        n/N -.\n        o/O ---\n        p/P .--.\n        q/Q --.-\n        r/R .-.\n        s/S ...\n        t/T -\n        u/U ..-\n        v/V ...-\n        w/W .--\n        x/X -..-\n        y/Y -.--\n        z/Z --..\n        0 .----\n        1 ..---\n        2 ...--\n        3 ....-\n        4 .....\n        5 -....\n        6 --...\n        7 ---..\n        8 ----.\n        9 -----\n\n> 其中字母部分不区分大小写。任务要求是将输入的字符串(测试数据中所有的字母字符均为大写字母，无须再做判断，且长度小于等于100)转换成莫尔斯电码，每个电码间用\"===\"分割开来\n\n#### 输入描述：\n> 每行输入大写字母和数字构成的符号串，长度小于等于100，没有分隔符\n\n#### 输出描述：\n> 对应的莫尔斯电码，每个莫尔斯码都用\"===\"隔开\n\n#### 样例输入:\n> ABCD123456EFG\n\n#### 样例输出:\n> .-===-...===-.-.===-..===..---===...--===....-===.....===-....===--...===.===..-.===--.","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":545,"accepts":256,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.876Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1281,"title":"笑笑的烦恼（二）","content":"#### 题目描述:\n> 笑笑在班里一直是个很公正的孩子，这点同学和老师都很清楚，这不，老师每周都会从家里带来一些糖果，然后叫笑笑把糖果分给其他小朋友，但这个班里的同学都有一个很特别的性格，就是他们只喜欢偶数，对于糖果也一样，所以笑笑在分糖果时也必须要保证这一点,即使每个同学分的糖果数量不一样。但是奇怪的是，笑笑有时候并不能够合格的分糖果，这让他大为苦恼，害怕别的同学会不再信任他（尽管其他同学不会这么想），所以他想请你帮帮他，在每次老师把糖果给他时，就帮他判断出糖果能不能分成功。注意糖果必须全部分完。\n\n#### 输入描述：\n> 有多组数据，每周给你两个数N，M，N<=50000,M<=10000; N代表有N个糖果，M代表有M个同学（笑笑也在其中）。\n\n#### 输出描述：\n> 如果能够分成功，输出Yes，否则输出No。\n\n#### 样例输入:\n> 4 2\n\n> 3 2\n\n> 15 1\n\n> 31 4\n\n#### 样例输出:\n> Yes\n\n> No\n\n> No\n\n> No","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":22,"accepts":11,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.883Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1283,"title":"铭记历史，展望未来","content":"#### 题目描述:\n> 斐波那契数列 (Fibonacci sequence)，又称黄金分割数列、因数学家斐波那契以兔子繁殖为例子而引入，故又称为“兔子数列”。\n\n> 他的第 1 项是 0，第 2 项是 1，后面的每一项等于前面两项的和。\n\n> Fib(0) = 0;\n\n> Fib(1) = 1;\n\n> 计算第 n 项的结果 Fib(n)，其中 n <= 1000，但是这个结果会很大，所以我们只要求输出他对于 47 取模的结果，如：Fib(1000) % 47。\n\n> 如果你使用递归超时了，可以看下面这段话\n\n>     速度与激情 7，开场的第一句话是：“我想知道未来会发生什么，所以我努力研究过去”\n\n> 你想知道 Fib(1000) % 47 等于多少嘛？所以你应该记录 Fib(999) % 47 和 Fib(998) % 47\n\n> 你想知道 Fib(998) % 47 等于多少嘛？所以你应该记录 Fib(997) % 47 和 Fib(996) % 47......\n\n> Fib(0) % 47 和 Fib(1) % 47 你已经知道了，不是嘛？\n\n> 铭记历史，展望未来。这也是动态规划算法的“精髓”，正式比赛开始后，如果有题目卡住了，可以想想这句话。\n\n#### 输入描述：\n> 没有输入\n\n#### 输出描述：\n> Fib(1000) % 47\n\n#### 样例输入:\n> \n\n#### 样例输出:\n> 唯一结果，不做样例","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":79,"accepts":33,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.889Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1284,"title":"图灵的密码","content":"### [2016 NUIST 程序设计竞赛]\n### C. 图灵的密码\n> \n#### 题目描述\n> 图灵，英国数学家、逻辑学家，被称为计算机之父，人工智能之父。第二次世界大战其间，德国研制的密码机enigma让英国即使拦截到了消息也束手无策。1939年秋，图灵应召到英国外交部通信处从事军事工作，主要是破译enigma的工作。那时候破译都是用纸和笔计算但是德国人每天都会更换密钥，破译几乎不可能。就在人们一筹莫展的时候，图灵说：“只有机器才能战胜机器”，不顾世人的嘲讽开始制造大型机，最终破译成功帮助盟友取得了二战的胜利。\n>\n> 图灵留下的是加密算法，用0来对应一个“.”和四个“-”的组合，用1来对应两个“.”和三个“-”的组合......其余对照方式如下：\n>        \n        0 .----           1 ..---\n        2 ...--           3 ....-\n        4 .....           5 -....\n        6 --...           7 ---..\n        8 ----.           9 -----\n> 每行密码都以“-”开头和结束，每个电码间用一个“-”隔开\n\n#### 输入描述\n> 输入一行数字明文，请你给出相应的密码。\n\n#### 输出描述\n> 输出密码\n\n#### 样例输入\n> 01\n\n#### 样例输出\n> -.-----..----\n\n#### 本题最短代码记录\n> 105 字符","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":108,"accepts":40,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.893Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1285,"title":"达朗贝尔的台阶","content":"### [2016 NUIST 程序设计竞赛]\n### D. 达朗贝尔的台阶\n> \n#### 描述\n> 达朗贝尔是法国数学家，哲学家。当牛顿和莱布尼兹一直在微积分的的基本问题上犯错误时，罗尔指着牛顿的鼻子说：“你的微积分就是小的谬误加起来的大谬误”。牛顿哑口无言，这时候达朗贝尔站了出来：“我虽然不能解释为什么微积分是正确的，但是只有向前进我们才能看见希望！”这句话激励了一代又一代的人。达朗贝尔小时候被母亲抛弃在教堂附近的一个台阶上，被一位玻璃匠收养，后来这个教堂的名字就成了他的教名 。当他出名后他的母亲回来找他，达朗贝尔对他的母亲说：“you are my stepmother”一语双关讽刺了他势力的母亲\n>\n> 达朗贝尔留下的是一个关于台阶的问题。\n>\n> 如果我每一步只能迈上1个或者2个台阶。先迈左脚，然后左右交替，最后一步迈右脚，也就是说一共要走偶数步，那么迈上n级台阶，有多少种不同的上法呢？\n\n#### 输入\n> 第一行一个整数n，表示台阶的数量。\n\n#### 输出\n> 结果占一行，表示用偶数步，迈上n级台阶不同的方案数目，测试数据保证结果不超出int范围\n\n#### 样例输入\n> 10\n\n#### 样例输出\n> 44","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":109,"accepts":52,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.897Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1286,"title":"欧拉的拓扑排序","content":"### [2016 NUIST 程序设计竞赛]\n### E. 欧拉的拓扑排序\n>\n#### 描述\n> 欧拉是科学史上最多产的一位杰出的数学家，他一生大部分时间在俄国和普鲁士度过。欧拉患上了眼病被赶出了普鲁士，但是俄国接纳了他。欧拉完全失明以后，仍然以惊人的毅力与黑暗搏斗，凭着记忆和心算进行研究完成了一生中将近一半的著作。欧拉的两个学生把一个复杂的收敛级数的17项加起来，算到第50位数字，两人相差一个单位，欧拉为了确定究竟谁对，用心算进行全部运算，最后把错误找了出来。欧拉在数学上的建树很多，对著名的哥尼斯堡七桥问题的解答开创了图论的研究。\n>\n> 欧拉留下的是关于图的问题，人们做事情总有不同的顺序，我们可以有向图的方式来抽象表示这种关系，拓扑排序就是将这些顺序线性表示出来。\n\n#### 输入\n> 第一行两个整数n,m.表示一共有n个不同的节点,m条边接下来m行，每行两个数据v和t，表示有向边从v到t\n\n#### 输出\n> 输出一行：字典序最大的拓扑排序结果。注意拓扑排序可能存在很多种结果，输出字典序最大的一组就可以了。最后一个结果后面没有空格，直接回车。\n\n#### 样例输入\n> 3 2\n>\n> 1 2\n>\n> 2 3\n\n#### 样例输出\n> 1 2 3","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":38,"accepts":11,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.900Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1287,"title":"莱布尼兹的最值","content":"### [2016 NUIST 程序设计竞赛]\n### A. 莱布尼兹的最值\n>\n#### 描述\n> 莱布尼兹是德国哲学家、数学家，历史上少见的通才，被誉为十七世纪的亚里士多德。他和牛顿分别创立了微积分，而且在几何意义和符号记法上都要比牛顿高明。但是牛顿一直以皇家学会会长的身份打压势单力薄的莱布尼兹，欺骗世人。莱布尼兹含恨而死，但是历史最终还给了莱布尼兹一个清白，他说：“我穷尽我的一生的研究，包括我所创立的微积分都在研究一个问题，那就是最值。”\n\n> 所以，莱布尼兹留下的是一个关于最值的问题.\n\n#### 输入\n> 第一行一个整数 n，表示数据的个数。\n\n> 接下来 n 行输入 n 个不同的正整数。莱布尼兹并不想为难大家，所以数据都在 int 类型所能表示的范围内。\n\n#### 输出\n> 输出一行：表示这 n 个数里面的最小值\n\n#### 样例输入\n> 5\n\n> 120\n\n> 80\n\n> 150\n\n> 100\n\n> 90\n\n#### 样例输出\n> 80","source":"admin","timeLimit":1,"memoryLimit":8,"difficulty":null,"cases":64,"multiCases":true,"submits":220,"accepts":41,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.905Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1288,"title":"欧几里得的公约数","content":"### [2016 NUIST 程序设计竞赛]\n### B. 欧几里得的公约数\n>\n#### 描述\n> 古希腊数学家欧几里得被称为“几何之父”，他最著名的著作《几何原本》是欧洲数学的基础，提出五大公式，欧几里得几何，被广泛的认为是历史上最成功的教科书。欧几里德算法又称辗转相除法，用于计算两个整数a,b的最大公约数，至今仍然被广泛运用。\n>\n> 欧几里得留下了n+1个数。\n\n#### 输入\n> 第一个数为n，后面有n个数，请你计算出这n个数有多少与n互质\n\n#### 输出\n> 整数n与其后的n个数互质的个数\n\n#### 样例输入\n> 5 8 10 12 14 15\n\n#### 样例输出\n> 3","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":83,"accepts":39,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.908Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1289,"title":"阿贝尔的序列","content":"### [2016 NUIST 程序设计竞赛]\n### F. 阿贝尔的序列\n>\n#### 描述\n> 阿贝尔，挪威数学家，一生穷困潦倒，他希望以他的才华在皇家科学院谋职以支撑他的生活。他给当时的权威高斯寄去了他的研究成果，但是高斯不希望有人能超过他，不愿意收阿贝尔为徒弟。尽管阿贝尔成就极高，却在生前没有得到认可，他的生活非常贫困，死时只有27岁。就在他死后的第二天，皇家科学院给他寄去了任职信。\n>\n> 阿贝尔定理应用于数列判敛，所以正如你们所料，阿贝尔留下的是两个序列，希望你能计算出最长的公共子序列。\n>\n> 举个例子，cnblogs这个字符串中子序列有多少个呢？很显然有27个，比如其中的cb,cgs等等都是其子序列，我们可以看出子序列不见得一定是连续的，连续的那是子串。\n\n#### 输入\n> 第一行为第一个字符串，第二行为第二个字符串，两个字符串的长度均不超过100\n\n#### 输出\n> 输出这两个字符串的最长的公共子序列\n\n#### 样例输入\n> cnblogs\n>\n> belong\n\n#### 样例输出\n> blog","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":76,"accepts":20,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.912Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1290,"title":"希尔伯特的空间","content":"### [2016 NUIST 程序设计竞赛]\n### G. 希尔伯特的空间\n>\n#### 描述\n> 希尔伯特领导的数学学派是19世纪末20世纪初数学界的一面旗帜，希尔伯特被称为“数学界的无冕之王”，他是天才中的天才。他在对积分方程的研究中研究了希尔伯特空间。希尔伯特空间是欧几里德空间的一个推广，其不再局限于有限维的情形。\n>\n> 希尔伯特带来了一个容量为n的空间,以及m个体积不同的物体。希望你能尽可能多占有空间，每件物品不可拆分，计算最小的剩余容量数。\n\n#### 输入\n> 第一行一个整数n表示空间的容量。\n>\n> 第二行一个整数m表示一共有m个不同的物体。\n>\n> 接下来m行分别表示m个物体的体积。\n\n#### 输出\n> 输出一个整数，表示空间最小的剩余容量。\n\n#### 样例输入\n> 3\n>\n> 1\n>\n> 3\n\n#### 样例输出\n> 0","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":44,"accepts":17,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.915Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1291,"title":"西蒙斯的金钱帝国","content":"### [2016 NUIST 程序设计竞赛]\n### H. 西蒙斯的金钱帝国\n>\n#### 描述\n> 詹姆斯·西蒙斯是世界级的数学家，也是最伟大的对冲基金经理之一。全球收入最高的对冲基金经理，年净赚15亿美元。在华尔街，韬光养晦是优秀的对冲基金经理恪守的准则，詹姆斯?西蒙斯也是如此，即使是华尔街专业人士，对他及其旗下的文艺复兴科技公司也所知甚少。然而在数学界，西蒙斯却是大名鼎鼎。早在上个世纪，詹姆斯?西蒙斯就是一位赫赫有名的数学大师。在2007年“华尔街最会赚钱的基金经理”排行榜中，这位70岁的数学大师以年收入13亿美元，位列第五。\n>\n> 西蒙斯留下的是关于金钱的问题。想象一下，如果一个国家只有3块、6块或者10块三种货币，你就不可能付清1、2、4、5、7、8、11、14或者17块钱，显然这样的金融系统将会崩溃。给出N种货币计算出不能用这n种货币表示的最大面值数目（每种货币数量无限），数据保证一定有解。\n\n#### 输入\n> 第一行一个整数n，表示货币的数目。\n>\n> 接下来n行表示n种不同的货币。\n\n#### 输出\n>  输出一行，表示不能用这n种货币表示的最大面值数目\n\n#### 样例输入\n> 3\n>\n> 3 6 10\n\n#### 样例输出\n> 17","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":11,"accepts":6,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.919Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1292,"title":"高斯的骰子","content":"### [2016 NUIST 程序设计竞赛]\n### I. 高斯的骰子\n>\n#### 描述\n> 伟大的高斯身为才气横溢的大数学家，对数具有非凡的记忆力。他不仅是一位伟大的理论家，又是一个杰出的数学实践家。如果我们把18世纪的数学家想象为一系列的高山峻岭，那么最后一个令人肃然起敬的巅峰就是高斯；如果把19世纪的数学家想象为一条条江河，那么其源头就是高斯。\n>\n> 高斯是\"人类的骄傲\"。天才、早熟、高产、创造力不衰……人类智力领域的几乎所有褒奖之词，对于高斯都不过分。\n>\n>        爱因斯坦曾评论说：“高斯对于近代物理学的发展，尤其是对于相对论的数学基础所作的贡献（指曲面论），其重要性是超越一切，无与伦比的。”\n>\n>                                                                                           --来自度娘\n>\n> 高斯晚年迷恋上了垒骰子，就是把骰子一个垒在另一个上边，不能歪歪扭扭，要垒成方柱体。\n>\n> 经过长期观察，高斯发现了稳定骰子的奥秘：有些数字的面贴着会互相排斥！\n>\n> 我们先来规范一下骰子：1 的对面是 4，2 的对面是 5，3 的对面是 6。\n>\n> 假设有 m 组互斥现象，每组中的那两个数字的面紧贴在一起，骰子就不能稳定的垒起来。 \n>\n> 高斯想计算一下有多少种不同的可能的垒骰子方式。\n>\n> 两种垒骰子方式相同，当且仅当这两种方式中对应高度的骰子的对应数字的朝向都相同。\n>\n> 由于方案数可能过多，请输出模1007 的结果。\n\n#### 输入\n> 第一行两个整数 n m\n>\n> n表示骰子数目，接下来 m 行，每行两个整数 a b ，表示 a 和 b 数字不能紧贴在一起。\n>\n> 数据范围：  0 < n <= 10^9,  m <= 36\n\n#### 输出\n> 一行一个数，表示答案模 1007 的结果。\n\n#### 样例输入\n> 2 1\n>\n> 1 2\n\n#### 样例输出\n> 544","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":4,"accepts":1,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.927Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1294,"title":"地盘划分","content":"#### 题目描述:\n> 修罗王与邪狼被关进监狱，该监狱的地下秩序实际上被不少黑暗势力所把持，这些黑暗势力根据其实力不同，划分出了大大小小的势力范围。具体为：监狱是一个给定的矩形，每一个黑暗势力的势力范围都必须是一个正方形，划分时，最大的黑暗势力尽可能多地从矩形中划一块正方形，接下来是第二大的黑暗势力在剩下的矩形中尽可能多地划分出一块正方形……\n\n#### 输入描述：\n> 多组输入，每组两个整型数，表示矩形的长和宽\n\n#### 输出描述：\n> 对应于每组数据，划分的正方形的个数\n\n#### 样例输入:\n> 3 4\n\n#### 样例输出:\n> 4","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":176,"accepts":165,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.931Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1295,"title":"棋子移动","content":"#### 题目描述:\n> 有2n个棋子（n≥4）排成一行，开始位置为白色全部在左边，黑色全部在右边。（其中字母O表示白色棋子，字母X表示黑色棋子）OOOOXXXX。移动棋子的规则是：每次必须同时移动相邻两个棋子，颜色不限，可以左移也可以右移一空位上去，但不能调换两个棋子的左右位，每次移动必须跳过若干个棋子（不能平移），要求最后能够移成黑白相间的一行棋子。例如当n=4时，最终排列情况为：OXOXOXOX。输出棋子移动的过程。\n\n#### 输入描述：\n> 多组输入，每组一个正整数，占一行。\n\n#### 输出描述：\n> 输出移动步骤，每一步操作占一行\n\n#### 样例输入:\n> 4\n\n#### 样例输出:\n> 4,5-->9,10\n\n> 8,9-->4,5\n\n> 2,3-->8,9\n\n> 7,8-->2,3\n\n> 1,2-->7,8","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":1056,"accepts":672,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.937Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1296,"title":"分形宇宙","content":"#### 题目描述:\n> 魔法世界的科学家分形宇宙论，即宇宙是一个基本微粒，构成宇宙的无数个微粒又会有其他的小宇宙。分形定义如下：\n\n> 1 度的分形为：\n\n>    \n    X\n\n> 2 度的分形为：\n\n>    \n    X X\n     X\n    X X\n\n> 如果 B(n-1) 表示 n-1 度的分形，则 n 度的分形递归定义如下：\n\n>        \n    B(n-1) B(n-1)\n       B(n-1)\n    B(n-1) B(n-1)\n\n> 要求给定分形的度，输出相应的分形图。\n\n#### 输入描述：\n> 多组输入，每组输入一个正整数 n\n\n#### 输出描述：\n> 对应于每组数，输出相应的分形图，并用一个 “-” 分隔\n\n#### 样例输入:\n> 1\n\n> 2\n\n#### 样例输出:\n>    \n    X\n    -\n    X X\n     X\n    X X\n    -","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":880,"accepts":501,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.948Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1299,"title":"Factorials阶乘","content":"#### 题目描述:\n> N 的阶乘写作 N!，表示小于等于 N 的所有正整数的乘积。阶乘会变大得很快，如 13! 就必须用 32\n 位整数类型来存储，到了 70! 即使用浮点数也存不下了。你的任务是找到阶乘最后面的非零位。举个例子：\n\n> 5! = 1 &times; 2 &times; 3 &times; 4 &times; 5 = 120，所以 5! 的最靠后的非零位是 2。\n\n> 7! = 1 &times; 2 &times; 3 &times; 4 &times; 5 &times; 6 &times; 7 = 5040，所以最靠后的非零位是 4。\n\n#### 输入描述：\n> 共一行，一个不大于 1,000,000,000,000,000,000 的正整数 N\n\n#### 输出描述：\n> 共一行，输出 N! 最靠后的非零位。\n\n#### 样例输入:\n> 7\n\n#### 样例输出:\n> 4","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":24,"accepts":2,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.951Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1300,"title":"两船载物问题","content":"#### 题目描述:\n> 给定n个物品的重量和两艘载重量分别为c1和c2的船，问能否用这两艘船装下所有的物品。\n\n#### 输入描述：\n> 输入包含多组测试数据，每组测试数据由若干行数据组成。\n\n> 第一行为三个整数，n c1 c2，（1 <= n <= 100）,(1<=c1,c2<=5000)。\n\n> 接下去n行，每行一个整数，代表每个物品的重量(重量大小不大于100)。\n\n#### 输出描述：\n> 对于每组测试数据，若只使用这两艘船可以装下所有的物品，输出YES。否则输出NO。\n\n#### 样例输入:\n> 3 5 8\n\n> 6\n\n> 3\n\n> 3\n\n> 3 5 8\n\n> 5\n\n> 3\n\n> 4\n\n#### 样例输出:\n> NO\n\n> YES","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":1,"accepts":1,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.954Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1301,"title":"入学考试  ","content":"#### 题目描述:\n> 辰辰是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同的草药，采每一株都需要一些时间，每一株也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。”\n\n> 如果你是辰辰，你能完成这个任务吗？\n\n#### 输入描述：\n> 第一行有两个整数T（1 <= T <= 1000）和M（1 <= M <= 100），用一个空格隔开，T代表总共能够用来采药的时间，M代表山洞里的草药的数目。接下来的M行每行包括两个在1到100之间（包括1和100）的整数，分别表示采摘某株草药的时间和这株草药的价值。\n\n#### 输出描述：\n> 包括一行，这一行只包含一个整数，表示在规定的时间内，可以采到的草药的最大总价值。\n\n#### 样例输入:\n> 70 3\n\n> 71 100\n\n> 69 1\n\n> 1 2\n\n#### 样例输出:\n> 3","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":11,"accepts":4,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.960Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1303,"title":"msquare","content":"#### 题目描述:\n> 在成功地发明了魔方之后，鲁比克先生发明了它的二维版本，称作魔板。这是一张有8个大小相同的格子的魔板：\n\n> 1  2  3  4\n\n> 8  7  6  5\n\n> 我们知道魔板的每一个方格都有一种颜色。这8种颜色用前8个正整数来表示。可以用颜色的序列来表示一种魔板状态，规定从魔板的左上角开始，沿顺时针方向依次取出整数，构成一个颜色序列。对于上图的魔板状态，我们用序列（1，2，3，4，5，6，7，8）来表示。这是基本状态。\n\n> 这里提供三种基本操作，分别用大写字母“A”，“B”，“C”来表示（可以通过这些操作改变魔板的状态）：\n\n> “A”：交换上下两行；\n\n> “B”：将最右边的一列插入最左边；\n\n> “C”：魔板中央四格作顺时针旋转。\n\n> 下面是对基本状态进行操作的示范：\n\n>        \n        A:  8  7  6  5\n            1  2  3  4\n        B:  4  1  2  3\n            5  8  7  6\n        C:  1  7  2  4\n            8  6  3  5\n\n> 对于每种可能的状态，这三种基本操作都可以使用。\n\n> 你要编程计算用最少的基本操作完成基本状态到目标状态的转换，输出基本操作序列。\n\n#### 输入描述：\n> 只有一行，包括8个整数，用空格分开（这些整数在范围 1——8 之间）不换行，表示目标状态。\n\n#### 输出描述：\n> Line 1: 包括一个整数，表示最短操作序列的长度。\n\n> Line 2: 在字典序中最早出现的操作序列，用字符串表示，除最后一行外，每行输出60个字符。\n\n#### 样例输入:\n> 2 6 8 4 5 7 3 1\n\n#### 样例输出:\n> 7\n\n> BCABCCB","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":3,"accepts":0,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.964Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1304,"title":"最小公倍数","content":"#### 题目描述:\n> 给定两个正整数，求它们的最小公倍数\n\n#### 输入描述：\n> 有多组数据，每行为两个正整数，且不超过long可以表示的范围。\n\n#### 输出描述：\n> 行对应输出最小公倍数。\n\n#### 样例输入:\n> 4  8\n\n> 200  100\n\n#### 样例输出:\n> 8\n\n> 200","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":106,"accepts":41,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.967Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1305,"title":"素数环","content":"#### 题目描述:\n> 有一个整数n，把从1到n的数字无重复的排列成环，且使每相邻两个数（包括首尾）的和都为素数，称为素数环。为了简便起见，我们规定每个素数环都从1开始。\n\n#### 输入描述：\n> 有多组测试数据，每组输入一个n(0<n<16)。\n\n#### 输出描述：\n> 每组第一行输出对应的Case序号，从1开始。素数环从小到大输出。\n\n#### 样例输入:\n> 6\n\n> 3\n\n> 8\n\n#### 样例输出:\n>        \n    Case 1:\n    1 4 3 2 5 6\n    1 6 5 2 3 4\n>\n    Case 2:\n>\n    Case 3:\n    1 2 3 8 5 6 7 4\n    1 2 5 8 3 4 7 6\n    1 4 7 6 5 8 3 2\n    1 6 7 4 3 8 5 2","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":38,"accepts":15,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.971Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1306,"title":"背包问题","content":"#### 题目描述:\n> 有n种物品，每种均有无穷多个。第i种物品的体积为Vi，重量为Wi。选一些物品装到一个体积容量为C的背包中，使得背包内物品在总体积不超过C的前提下重量尽量大。\n\n#### 输入描述：\n> 第一行有两个整数n（1 <= n <= 100）和C（1 <= C <= 10000），用一个空格隔开，n表示货物种类数，C代表背包体积容量。接下来的n行每行包括两个在1到10000之间（包括1和10000）的整数Vi,Wi，分别表示物品的体积和重量。\n\n#### 输出描述：\n> 包括一行，这一行只包含一个整数，表示在规定的背包体积大小内，背包内物品的最大重量\n\n#### 样例输入:\n> 3 5\n\n> 1 2\n\n> 2 3\n\n> 3 2\n\n#### 样例输出:\n> 10","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":90,"accepts":36,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.979Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1308,"title":"阶乘末尾0的个数 [数据加强版]","content":"#### 题目描述:\n> 给定一个正整数 n，那么 n 的阶乘 n! 末尾有多少个 0？\n\n> 比如 10! = 3628800，末尾有 2 个 0。\n\n#### 输入描述：\n> 多组输入，每组一个正整数 n (0 <= n <= 10000)。\n\n#### 输出描述：\n> 对于每组输入，输出为一行整数，为 n! 末尾 0 的个数。\n\n#### 样例输入:\n> 1\n\n> 10\n\n#### 样例输出:\n> 0\n\n> 2","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":56,"accepts":23,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.982Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1309,"title":"最长单调递增子序列 ","content":"#### 题目描述:\n> 求一个字符串的最长递增子序列的长度\n\n> 如：dabdbf最长递增子序列就是abdf，长度为4\n\n#### 输入描述：\n> 第一行一个整数0<n<20,表示有n个字符串要处理\n\n> 随后的n行，每行有一个字符串，该字符串的长度不会超过10000\n\n#### 输出描述：\n> 输出字符串的最长递增子序列的长度\n\n#### 样例输入:\n> 3\n\n> aaa\n\n> ababc\n\n> abklmncdefg\n\n#### 样例输出:\n> 1\n\n> 3\n\n> 7","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":48,"accepts":14,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.984Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1310,"title":"牛式","content":"#### 题目描述:\n> 下面是一个乘法竖式，如果用我们给定的那n个数字来替代*，可以使式子成立的话，我们就叫这个式子牛式。\n\n> ![牛式](/static/pic/1310_niushi.png)\n\n> 数字只能取代*，当然第一位不能为0,况且给定的数字里不包括0。\n\n> 注意一下在美国的学校中教的“部分乘积”，第一部分乘积是第二个数的个位和第一个数的积，第二部分乘积是第二个数的十位和第一个数的乘积.\n\n> 写一个程序求出所有牛式的总数。\n\n#### 输入描述：\n> Line 1:数字的个数n。\n\n> Line 2:N个用空格分开的数字（每个数字都属于{1,2,3,4,5,6,7,8,9}）。\n\n#### 输出描述：\n> 共一行，一个数字。表示牛式的总数。\n\n#### 样例输入:\n> 5\n\n> 2 3 4 6 8\n\n#### 样例输出:\n> 1","source":"usaco","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":5,"accepts":5,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.988Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1311,"title":"奖金分配","content":"#### 题目描述:\n> 某计算机程序设计大赛，要求每个参赛队报 N 名参赛队员，并为获奖的每个队提供 M 元的奖金。求获奖后每个队员平均分配的奖金。要求每个队员得到的奖金四舍五入保留两位小数。\n\n#### 输入描述：\n> 每行输入用一个空格分开的两个整数，分别表示每队获得的奖金数和参赛的队员数。\n\n#### 输出描述：\n> 占一行，输出每个队员可以获得的奖金数。\n\n#### 样例输入:\n> 1230 8\n\n#### 样例输出:\n> 153.75","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":50,"accepts":33,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:13.992Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1312,"title":"选拔队员","content":"#### 题目描述:\n> 为了参加程序设计大赛，计算机学院准备从水平相同的 m (1 <= m <= 30) 个学生中随机选出 n (1 <= n <= 30) 个学生进行集训，求有多少种不同的选法。\n\n#### 输入描述：\n> 每行输入用一个空格分开的两个整数，分别表示总的学生数和要选取的集训队员数。\n\n#### 输出描述：\n> 占一行，输出不同的选法数\n\n#### 样例输入:\n> 10 8\n\n#### 样例输出:\n> 45","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":13,"accepts":7,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.002Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1314,"title":"奇妙的矩阵","content":"#### 题目描述:\n> 对一个 N &times; N 阶矩阵，输入阶数 N (N <= 1000)，输出一个矩阵（规律如输出样例中所示），每行的元素之间用一个空格分开，但每行的最后一个元素后面没有空格。\n\n#### 输入描述：\n> 输入一个正整数 N。\n\n#### 输出描述：\n> 按输出样例中的规律，输出一个 N &times; N 阶矩阵。\n\n#### 样例输入:\n> 7\n\n#### 样例输出:\n> 1   0   0   0   0   0   1\n\n> 3   1   0   0   0   1   4\n\n> 3   3   1   0   1   4   4\n\n> 3   3   3   1   4   4   4\n\n> 3   3   1   2   1   4   4\n\n> 3   1   2   2   2   1   4\n\n> 1   2   2   2   2   2   1","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":48,"accepts":17,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.006Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1315,"title":"安全的山洞","content":"#### 题目描述:\n> 围绕着山顶有 m (m <= 1000) 个山洞，兔子和狐狸各住在其中的一个山洞中。狐狸总想吃掉兔子。某一天兔子就对狐狸说：“你想吃我有一个条件，你把山洞用 1 到 m 进行编号，我躲在其中的一个山洞中，你每次间隔 n (n < 1000) 个山洞找我，而且每个山洞只能找一次，直到还剩最后一个山洞。只要不是在剩最后一个山洞找到我，我就让你吃掉！”\n\n> 问：兔子躲在哪个山洞能保证不被吃掉？\n\n#### 输入描述：\n> 一行输入两个正整数，两个数之间用一个空格分开，分别表示山洞数和间隔数。\n\n#### 输出描述：\n> 一个整数，占一行，表示安全的山洞编号。\n\n#### 样例输入:\n> 9 5\n\n#### 样例输出:\n> 8","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":749,"accepts":444,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.010Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1316,"title":"合唱队形","content":"#### 题目描述:\n> N位同学站成一排，音乐老师要请其中的(N-K)位同学出列，使得剩下的K位同学排成合唱队形。合唱队形是指这样的一种队形：设K位同学从左到右依次编号为1，2…，K，他们的身高分别为T1，T2，…，TK，\n\n> 则他们的身高满足T1<...< Ti > Ti+1>…>TK(1<=i<=K)。\n\n> 你的任务是，已知所有N位同学的身高，计算最少需要几位同学出列，可以使得剩下的同学排成合唱队形。\n\n#### 输入描述：\n> 一组数据有两行。其中，第一行为一个正整数n。第二行为n个正整数\n\n#### 输出描述：\n> 每行一个正整数。表示需要出列的同学人数。\n\n#### 样例输入:\n> 8\n\n> 186 186 150 200 160 130 197 220\n\n#### 样例输出:\n> 4","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":14,"accepts":12,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.013Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1317,"title":"多项式的系数","content":"#### 题目描述:\n> 输出多项式（1+x）^n指定项的系数\n\n#### 输入描述：\n> 每行两个正整数k和m，用空格隔开，表示n次多项式的第k项的系数\n\n#### 输出描述：\n> 每行一个数，表示第k项的系数\n\n#### 样例输入:\n> 3 10\n\n#### 样例输出:\n> 120","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":9,"accepts":4,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.020Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1319,"title":"冰鞋的烦恼","content":"#### 题目描述:\n> 2030年之后，气候突变。往后的每年冬天，玄武湖全面冰封。不过对滑冰者来说却是极好的消息。冰面上都是滑冰的好地方。公园准备了许多冰鞋，可是人太多了，每天下午收工后，常常一双冰鞋都不剩。\n\n> 每天早上，租鞋窗口都会排起长龙，假设有还鞋的m个，有需要租鞋的n个。现在的问题是，这些人有多少种排法，可以避免出现体育组没有冰鞋可租的尴尬场面。（两个同样需求的人（比如都是租鞋或都是还鞋）交换位置是同一种排法）\n\n#### 输入描述：\n> 每行两个整数，表示m和n，其中m,n不太大\n\n#### 输出描述：\n> 每行一个整数，表示队伍的排法的方案数\n\n#### 样例输入:\n> 3 2\n\n#### 样例输出:\n> 5","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":22,"accepts":6,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.024Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1320,"title":"2的方幂形式","content":"#### 题目描述:\n> 任何一个正整数都可以用2进制表示，例如：137的2进制表示为10001001。\n\n> 将这种2进制表示写成2的次幂的和的形式，令次幂高的排在前面，可得到如下表达式：137=2^7+2^3+2^0\n\n> 现在约定幂次用括号来表示，即a^b表示为a（b）\n\n> 此时，137可表示为：2（7）+2（3）+2（0）\n\n> 进一步：7=2^2+2+2^0 （2^1用2表示）\n\n> 3=2+2^0\n\n> 所以最后137可表示为：2（2（2）+2+2（0））+2（2+2（0））+2（0）\n\n> 又如：1315=2^10+2^8+2^5+2+1\n\n> 所以1315最后可表示为：2（2（2+2（0））+2）+2（2（2+2（0）））+2（2（2）+2（0））+2+2（0）\n\n#### 输入描述：\n> 每行一个正整数（1<=n<=20000）\n\n#### 输出描述：\n> 每行一个有0，2和括号表示的方幂\n\n#### 样例输入:\n> 137\n\n> 1315\n\n#### 样例输出:\n> 2(2(2)+2+2(0))+2(2+2(0))+2(0)\n\n> 2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":5,"accepts":3,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.045Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1324,"title":"迷雾山岭","content":"#### 题目描述:\n> Peter喜欢中国的名山大川，看着层峦叠嶂的秀美景色。Peter完全乐不思美了。望着眼前云雾缭绕的山峦，他开始怀疑自己的眼睛了。到底有多少座山峰啊？！ 能帮着他数数吗？高山峰一定会遮挡住它后面的矮山峰，即使高度相同，也只能看到前面的一座。\n\n#### 输入描述：\n> 第一行的正整数n，表示输入数据的组数。接下来的n行，每行若干个正整数，以-1表示当前行的结束\n\n#### 输出描述：\n> 每行一个结果，表示能看到的山峰个数\n\n#### 样例输入:\n> 3\n\n> 1 2 3 4 5 6 7 8 9 -1\n\n> 7 1 2 6 8 9 10 3 -1\n\n> 100 20 200 200 205 300 1000 800 -1\n\n#### 样例输出:\n> 9\n\n> 4\n\n> 5","source":"admin","timeLimit":1,"memoryLimit":4,"difficulty":null,"cases":1,"multiCases":true,"submits":28,"accepts":16,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.052Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1325,"title":"区间合并","content":"#### 题目描述\n> 由若干个区间，可能重叠，相交或相离，编写程序合并这些区间\n\n#### 输入描述\n> 每组数据的第一行是一个整数n，表示区间的个数，接下来的n行数据，每行两个正整数，表示区间的左右端点\n\n#### 输出描述\n> 合并之后的区间，每行两个数，表示区间的两个端点，用一个空格隔开。每组测试数据用空行隔开\n\n#### 输入样例\n> 3\n\n> 20 25\n\n> 10 19\n\n> 24 35\n\n> 4\n\n> 10 19\n\n> 2 8\n\n> 18 25\n\n> 21 24\n\n#### 输出样例\n> 10 19\n\n> 20 35\n\n> 2 8\n\n> 10 25","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":33,"accepts":4,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.059Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1326,"title":"分数的值","content":"#### 题目描述：\t\n> 有理数的分数表示方法简洁清晰。计算时，我们通常需要利用有理数的小数形式。现在给定一个分数式和有理数的小数点后的位数，请计算出这个分数的数值\n\n#### 输入：\t\n> 每行一个分数式和小数点后的位数，其中分子n和分母m的值均<=60000，小数点的位数t<=100\n\n#### 输出：\t\n> 每行一个分数的值，若不是循环小数，则无须输出多余的0。最后一位无须四舍五入\n\n#### 样例输入：\t\n> 1/2 10\n\n> 11/19 20\n\n> 101/19 10\n\n#### 样例输出：\t\n> 0.5\n\n> 0.57894736842105263157\n\n> 5.3157894736","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":20,"accepts":7,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.067Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1327,"title":"数的统计","content":"#### 题目描述：\t\n> 在一个有限的正整数序列中，有些数会多次重复出现在这个序列中。\n\n> 如序列：3，1，2，1，5，1，2。其中1就出现3次，2出现2次，3出现1 次，5出现1次。\n\n> 你的任务是对于给定的正整数序列，从小到大依次输出序列中出现的数及出现的次数。\n\n#### 输入：\t\n> 每组测试数据由两行构成。\n\n> 第一行正整数n，表示给定序列中正整数的个数。\n\n> 第二行是n 个用空格隔开的正整数x，代表给定的序列。\n\n#### 输出：\t\n> 每组结果由若干行，每行两个用一个空格隔开的数，第一个是数列中出现的数，第二个是该数在序列中出现的次数。每组结果用空行隔开。\n\n#### 样例输入：\t\n> 12\n\n> 8 2 8 2 2 11 1 1 8 1 13 13\n\n> 20\n\n> 10 8 9 18 7 18 11 14 15 16 16 7 10 12 16 14 15 8 16 14\n\n#### 样例输出：\t\n>    \n    1 3\n    2 3\n    8 3\n    11 1\n    13 2\n> \n    7 2\n    8 2\n    9 1\n    10 2\n    11 1\n    12 1\n    14 3\n    15 2\n    16 4\n    18 2","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":28,"accepts":11,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.074Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1328,"title":"高考分数","content":"#### 题目描述：\t\n> 高考计分模式今年的试点在上海、浙江开始。总体方案是 3 + 3 模式。\n\n> 除了语数外三门课程的成绩外，在学业水平测试中选择 3 门成绩最好的科目计入总分。现给出一些学生各科成绩，要求求出他们的高考总成绩。\n\n#### 输入描述：\t\n> 有多组测试数据，测试数据的组数 n 在第一行给出。\n\n> 接下来的 n 行中有若干个正整数 (不超过 20)，前三个分别表示语数外的成绩，其余的表示学业水平测试中其他科目的成绩。每行以 -1 结尾\n\n#### 输出描述：\t\n> 对于每组测试数据，输出一行正整数，表示该考生的高考总成绩。\n\n#### 样例输入：\t\n> 3\n\n> 110 168 110 89 78 91 79 92 79 -1\n\n> 100 159 108 71 79 96 91 90 67 78 -1\n\n> 108 168 111 78 90 89 100 87 69 92 98 -1\n\n#### 样例输出：\t\n> 660\n\n> 644\n\n> 677","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":21,"accepts":19,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.078Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1329,"title":"黑色星期五","content":"#### 题目描述：\t\n> 有些西方人比较迷信，如果某个月的13号正好是星期五，他们就会觉得不太吉利，用古人的说法，就是“诸事不宜”。请你编写一个程序，统计出在某个特定的年份中，出现了多少次既是13号又是星期五的情形，以帮助你的迷信朋友解决难题。\n\n> 说明：\n\n> （1）一年有365天，闰年有366天，所谓闰年，即能被4整除且不能被100整除的年份，或是既能被100整除也能被400整除的年份；\n\n> （2）已知2016年1月1日是星期五，用户输入的年份肯定大于或等于2016年。\n\n#### 输入：\t\n> 每行一个某个特定的年份N（N大于或等于2016年）\n\n#### 输出：\t\n> 每行包含两个正整数，用一个空格隔开，即在这一年中，出现了多少次既是13号又是星期五的情形\n\n#### 样例输入：\t\n> 2016\n\n> 2017\n\n#### 样例输出：\t\n> 2016 1\n\n> 2017 2","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":11,"accepts":3,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.082Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1330,"title":"集合运算","content":"#### 题目描述：\n> 给出两个整数集合 A, B，求出 A - A ∩ B\n\n#### 输入描述：\n> 每组数据包含四行：\n\n> 第一行为一个整数 n，表示集合 A 中的元素个数。\n\n> 第二行有 n 个互不相同的用空格隔开的整数，表示集合 A 中的元素。\n\n> 第三行为一个整数 m，表示集合 B 中的元素个数。\n\n> 第四行有m个互不相同的用空格隔开的整数，表示集合 B 中的元素。\n\n> 集合中的所有元素均为 int 范围内的整数，n, m <= 1000。\n\n#### 输出描述：\n> 每组数据的结果占一行，从小到大的顺序输出 A - A ∩ B 中的所有元素。\n\n#### 样例输入：\n> 5\n\n> 1 2 3 4 5\n\n> 5\n\n> 2 4 6 8 10\n\n> 10\n\n> 1 5 3 9 10 2 12 16 8 7\n\n> 6\n\n> 1 2 3 4 5 6\n\n#### 样例输出：\t\n> 1 3 5\n\n> 7 8 9 10 12 16","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":53,"accepts":2,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.096Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1333,"title":"科学计数法","content":"### [2017 NUIST 程序设计竞赛 模拟赛]\n### B. 科学计数法\n>\n#### 题目描述\n> 众所周知，任意大的整数均可用科学计数法近似地表示。现请你用科学计数法表示出 a 的 b 次方的结果\n\n#### 输入描述\n> 有多组输入。在每一组输入中，有一个正整数 a 和 一个非负整数 b ( a 和 b 小于 2 的 26 次方)。\n\n#### 输出描述\n> 对于每一组输入，输出一行结果。结果表示为 \"m*10^n\" 的形式。其中，**m 四舍五入保留至小数点后三位。输出中没有多余的空格。**\n\n#### 输入样例\n> 3 5\n\n> 2 128\n\n> 255 0\n\n> 31415926 27182818\n\n#### 输出样例\n> 2.430*10^2\n\n> 3.403*10^38\n\n> 1.000*10^0\n\n> 2.027*10^203793660","source":"倪文卿","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":14,"accepts":5,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.101Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1334,"title":"单独出现的字符","content":"### [2017 NUIST 程序设计竞赛 模拟赛]\n### A. 单独出现的字符\n>\n#### 题目描述\n> 给定 n 个字符 (0 < n &le; 10000)，这些字符仅包含英文字母和数字，求出这些字符中只出现了一次的字符。\n\n#### 输入描述\n> 有多组输入。每组输入包含一行，每行包含 n 个字符 (0 < n &le; 10000)。\n\n#### 输出描述\n> 按顺序输出这些字符中只出现了一次的字符。字符与字符之间没有空格。如果找不到只出现了一次的字符，输出 -1。\n\n#### 输入样例\n> adaccbeff\n\n> aaa\n\n#### 输出样例\n> dbe\n\n> -1","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":63,"accepts":23,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.105Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1335,"title":"遛牛","content":"### [2017 NUIST 程序设计竞赛 模拟赛]\n### C. 遛牛\n>\n#### 题目描述\n> 今天天气好晴朗，处处好风光。在经过了一个多月的阴雨天气，农夫 Jony 和他的母牛都快发霉了，\n\n> 终于今天天气放晴了。Jony 决定带着他的母牛一起出去溜达溜达。\n\n> 他们来到田野里，田野里的青草是那么的诱人，母牛想吃青草，但是有些地方种上了玉米，不能通过。\n\n> 母牛走过的地方青草都被吃完了，所以母牛不会再往回走（不会走回头路）。\n\n> 现在 Jony 站在田野的一边，问有多少种方法能够到达终点。\n\n#### 输入描述\n> 一行  两个字符 m , n  ( 2 < m, n < 20 )\n\n> 表示 m 行 n 列 的一片田野  \n\n> 接着 m 行，每行 n 个字符表示田野 \n\n> 1 表示草地 (可以通行)\n\n> 0 表示玉米地 (不能通行)\n\n> S 表示起点\n\n> E 表示终点\n\n#### 输出描述\n> 一行，问有多少条路线可以从起点到达终点。\n\n#### 样例输入 \n> 5 5\n\n> 000S0\n\n> 01010\n\n> 01010\n\n> 01110\n\n> E1000\n\n#### 样例输出 \n> 1","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":52,"accepts":14,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.109Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1336,"title":"最长递增子序列","content":"### [2017 NUIST 程序设计竞赛 模拟赛]\n### E. 最长递增子序列\n>\n#### 题目描述\n> 给出长度为 N 的数组，找出这个数组的最长递增子序列。\n\n> 子序列可以不连续，连续的那叫字串。而递增子序列是指，子序列中后一个元素一定比前面一个大。\n\n> 例如：5 1 6 8 2 4 5 10，最长递增子序列是 1 2 4 5 10。\n\n#### 输入描述\n> 有多组输入，每一组输入由两行构成。\n\n> 第 1 行中有 1 个数 N，表示序列的长度( 2 <= N <= 50000 )\n\n> 第 2 行：每行 1 个数，对应序列的元素( -10^9 <= S[i] <= 10^9 )\n\n#### 输入描述\n> 输出最长递增子序列的长度。\n\n#### 输入样例\n> 8\n\n> 5  1  6  8  2  4  5  10\n\n#### 输入样例\n> 5","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":61,"accepts":31,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.113Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1337,"title":"Subset sums","content":"### [2017 NUIST 程序设计竞赛 模拟赛]\n### F. Subset sums\n>\n#### 题目描述\n> 给定一个数 N ( 1 <= N <= 39 ), 将集合 { 1, 2, 3, 4, ... , N } 拆分成两个子集合，要求两个子集合中的元素之和相等。试求总共有多少不同的分法。\n\n> 例如当 N = 3 时, 集合 { 1, 2, 3 } 可以分成 { 3 } 和 { 1，2 } 两个集合。\n\n#### 输入描述\n> 有多组输入，每组输入一个整数 N 。\n\n#### 输出描述\n> 对于每一组输入，输出一行答案。\n\n#### 样例输入\n> 7\n\n#### 样例输出\n> 4","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":25,"accepts":7,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.127Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1341,"title":"当然是选择AC它了！","content":"### [2017 NUIST 程序设计竞赛]\n### A. 当然是选择AC它了！\n>\n#### 题目描述\n> 听闻第八届程序设计大赛马上就要开始了，已经报名的童鞋们都纷纷去 OJ 刷题。但你的女朋友\n (tan90°) 想知道她写的 \"A + B 问题\" 是否可以一次 AC (Accepted)，所以她请你来写一个程序帮她判断她的程序的输入输出是否正确。(题外话: 如果你 AC 此题，你的女朋友会托付我们交给你一个惊喜，所以一定要 AC 它哟！)\n\n#### 输入描述\n> 有多组测试数据，对于每组测试数据，第一行有一个整数 n，代表该组测试数据共有 n 个表达式需要判断，接下来的 n 行每行一个 A + B = C 的表达式 (0 <= A, B, C <= 50000)\n\n#### 输出描述\n> 对于每组测试数据，如果 n 个表达式全都正确，输出 Accepted，反之，如果有至少一个表达式错误，输出 Wrong Answer\n\n#### 样例输入\n> 1\n\n> 1+1=2\n\n> 2\n\n> 1+1=2\n\n> 1+1=3\n\n#### 样例输出\n> Accepted\n\n> Wrong Answer","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":120,"accepts":60,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.134Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1343,"title":"买戒指","content":"### [2017 NUIST 程序设计竞赛]\n### C. 买戒指\n>\n#### 题目描述\n> 你和你的女朋友(tan90°)去买戒指，店里有好多戒指，编号为1，2，3……戒指上的钻石大小各不相同。你们从一堆戒指中随机抽取两枚并比较它们钻石的大小。在比较 m 次之后，你们看中了两枚戒指 a 和 b 。现在请你根据之前比较的信息判断这两枚戒指哪一枚的钻石更大。\n\n#### 输入描述\n> 有多组输入。\n\n> 每组第一行三个整数，a, b, m (1 <= a, b, c <= 1000)。\n\n> a 和 b 是最终要比较的两枚戒指，m 表示比较的次数。\n\n> 接下来 m 行，每行两个整数 u, v，表示第 u 个戒指的钻石比第 v 个大。\n\n#### 输出描述\n> 如果戒指 a 的钻石比 b 大，则输出 1。\n\n> 如果戒指 a 的钻石比 b 小，则输出 -1。\n\n> 如果根据现有信息，戒指 a 和 b 无法比较，则输出 0。\n\n#### 样例输入\n> 2 3 4\n\n> 1 2\n\n> 2 4\n\n> 1 3\n\n> 4 3\n\n#### 样例输出\n> 1","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":59,"accepts":25,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.136Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1344,"title":"最长回文长度","content":"### [2017 NUIST 程序设计竞赛]\n### D. 最长回文长度\n>\n#### 题目描述\n> 回文字符串就是从前往后读和从后往前读都一样的字符串。比如 abcba, aaa, QoQ。现在给你一个字符串，你可以从中删去一些字符，在不改变原来字符相对顺序的情况下，得到一个最长的回文字符串。\n\n> 比如 abxdba, 删去字符 x 后，可以得到 abdba，是一个回文字符串。你的任务就是求出给定的字符串删去若干字符后可以得到的最长的回文字符串的长度。字符串长度不超过 1000，字符范围为 ‘a’ 到 ‘z’。\n\n#### 输入描述\n> 有多组输入。\n\n> 每组一行字符串。\n\n#### 输出\n> 每组测试数据输出一个整数，表示可以得到的最长的回文字符串的长度。\n\n#### 样例输入\n> aabbaabb\n\n> computer\n\n> abzla\n\n> samhita\n\n#### 样例输出\n> 6\n\n> 1\n\n> 3\n\n> 3","source":"admin","timeLimit":1,"memoryLimit":4,"difficulty":null,"cases":1,"multiCases":true,"submits":70,"accepts":26,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.139Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1345,"title":"通天塔","content":"### [2017 NUIST 程序设计竞赛]\n### E. 通天塔\n>\n#### 题目描述\n> 大魔王抓走了你的女朋友(tan90°)，并对你的女朋友说：“你叫破喉咙也不会有人来救你的。” 你的女朋友开始呼救：“破喉咙！破喉咙！” 你听到了女朋友的呼救，马上赶来营救。在你面前有一座直上云霄的通天塔，你的女朋友就被大魔王关在塔顶。塔的形状可以看一个作圆柱体。塔的侧面展开，可以看作一个 m * n 的矩形。塔一共有 n 层，每层都有 m 个房间，每个房间里都有小怪看守，击败它们需要的消耗一定的体力值(甚至有可能是负数，表示恢复体力值)。你只能往上走，不能回头，且每次只能爬一层，到达直接相邻的上方的房间，或者对角线方向的两个斜上方的房间。为了保存体力，到了塔顶还需要和大魔王打一架，你需要花费最少的体力到达塔顶。请计算出从塔底到塔顶需要消耗的最少的体力值(甚至可以为负数)。你可以从塔底的任意一个房间开始登塔，从最顶层的任意一个房间到达塔顶。\n\n#### 输入描述\n> 有多组输入。\n\n> 每组第一行为两个整数m, n。(1 <= m <= 10, 1 <= n <= 100)\n\n> 接下来 m 行，每行 n 个数字。表示打败第 n 层第 m 个房间的小怪需要消耗的体力值。\n\n> **注意：** 输入的 n 表示塔的层数，m 是每层的房间数，不要搞混，输入的每一列是一层，第一列表示塔底，最后一列表示塔顶。\n\n> 对于下面的前两个样例，你可以走的方向是：\n\n> ![图片描述](/static/pic/1345_ways.png)\n\n> 你可以走的路线是：\n\n> ![图片描述](/static/pic/1345_ttt1.png)\n\n#### 输出描述\n> 每组测试数据输出一个整数，表示最少需要消耗的体力。\n\n#### 样例输入\n> 5 6\n\n> 3 4 1 2 8 6\n\n> 6 1 8 2 7 4\n\n> 5 9 3 9 9 5\n\n> 8 4 1 3 2 6\n\n> 3 7 2 8 6 4\n\n> 5 6\n\n> 3 4 1 2 8 6\n\n> 6 1 8 2 7 4\n\n> 5 9 3 9 9 5\n\n> 8 4 1 3 2 6\n\n> 3 7 2 1 2 3\n\n> 2 2\n\n> 9 10\n\n> 9 10\n\n#### 样例输出\n> 16\n\n> 11\n\n> 19","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":64,"accepts":27,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.142Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1346,"title":"推箱子","content":"### [2017 NUIST 程序设计竞赛]\n### F. 推箱子\n>\n#### 题目描述\n> 大家的童年一定少不了 “推箱子” 这个经典的游戏。具体规则就是在一个 N * M 的地图上，有 1 个玩家、1 个箱子、1 个目的地以及若干障碍，其余是空地。玩家可以往上下左右 4 个方向移动，但是不能移动出地图或者移动到障碍里去。如果往这个方向移动推到了箱子，箱子也会按这个方向移动一格。当然，箱子也不能被推出地图或推到障碍里。当箱子被推到目的地以后，游戏目标达成。现在告诉你游戏开始是初始的地图布局，请你求出玩家最少需要移动多少步才能够将游戏目标达成。\n\n#### 输入描述\n> 有多组输入。\n\n> 对于每组测试数据，第一行输入两个数字 N, M 表示地图的大小。其中 0 < N, M <= 10。\n\n> 接下来有 N 行，每行包含 M 个字符表示该行地图。其中 . 表示空地、X 表示玩家、* 表示箱子、# 表示障碍、@ 表示目的地。\n\n> 每个地图必定包含 1 个玩家、1 个箱子、1 个目的地。\n\n#### 输出描述\n> 对于每组输入，输出一个数字表示玩家最少需要移动多少步才能将游戏目标达成。当无论如何达成不了的时候，输出 -1。\n\n#### 样例输入\n> \n    4 4\n    ....\n    ..*@\n    ....\n    .X..\n    6 6\n    ...#..\n    ......\n    #*##..\n    ..##.#\n    ..X...\n    .@#...\n\n#### 样例输出\n> 3\n\n> 11","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":23,"accepts":3,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.149Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1347,"title":"供电站","content":"### [2017 NUIST 程序设计竞赛]\n### G. 供电站\n>\n#### 题目描述\n> 你一个程序员，不知为何就当上了你们镇的镇长（人的一生当然要靠自我奋斗，当然也要考虑历史的进程）。你们镇有 N (3 <= N <= 35)个村，分别标号为 1, 2, ..., N，有些村常年供电不足。现在你需要重新规划镇上的供电站的选址。现在的要求是，对于镇里的每个村，要么这个村有个供电站，要么这个村相邻的村中有一个供电站。你最少需要建几个供电站？\n\n#### 输入\n> 有多组输入。\n\n> 对于每组测试数据，第一行两个数 N, M，分别表示村子数量和直接相连的村子关系的数量。\n\n> 接下来 M 行，每行两个数，表示这两个村子直接相连。\n\n> **注意：** 最后一组测试数据为 N = 0, M = 0，是一个标记，表示输入结束，无需计算和输出任何东西。\n\n#### 输出\n> 每组测试数据输出一个整数，表示最少需要建的供电站数量。\n\n#### 样例输入\n> \n    8 12\n    1 2\n    1 6\n    1 8\n    2 3\n    2 6\n    3 4\n    3 5\n    4 5\n    4 7\n    5 6\n    6 7\n    6 8\n    0 0\n\n#### 样例输出\n> 2","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":35,"accepts":5,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.152Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1348,"title":"青蛙跳荷叶","content":"### [2017 NUIST 程序设计竞赛]\n### H. 青蛙跳荷叶\n>\n#### 题目描述\n> 校园的池塘里有 m 片荷叶，刚好围成一个圈，且相邻的荷叶之间间距相等。给这些荷叶编号为 1, 2, ..., m。有两只小青蛙 A 和 B 在荷叶上嬉戏玩耍。他们\n guguguagua 一番之后，决定玩个游戏。起始时，A 在第 s1 位置上，每次可以跳 v1 片荷叶的距离，B 在 s2 位置上，每次可以跳 v2 片荷叶的距离。两只青蛙朝着相同的方向同时顺时针跳荷叶，且跳的频率相等，当它们同时跳在同一片荷叶时，游戏结束。你知道它们最少需要跳多少次才能在同一片荷叶上相遇么？\n\n#### 输入描述\n> 有多组输入。\n\n> 每组测试数据输入 5 个整数 s1, s2, v1, v2, m。其中 0 ≤ v1, v2 ≤ m ≤ 1,000,000,000。0 ≤ s1, s2 < m。\n\n> 中间过程可能很大，最好使用 64 位整型。\n\n#### 输出描述\n> 每组测试数据输出 1 个整数，表示解，若该组数据无解则输出 -1。\n\n#### 样例输入\n> 0 1 1 2 6\n\n#### 样例输出\n> 5","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":46,"accepts":4,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.159Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1350,"title":"面朝大海 春暖花开 [ 基础版 ]","content":"#### 题目描述：\n> 选择那些大晴天的日子,行走在孤单的海岸线,静静地种花给自己看~\n\n> 我们假设把海岸线分为n块,每块的分别标记为1...n,每块都可以种花,每次种花可以选择某个[left,right]的闭区间,每块种上一朵花.经过m次种花操作后,根据输入的区间,求该区间内花的总数.\n#### 输入描述：\n> 多组输入\n\n> 对每组输入，第一行有两个整数n m,分别代表总块数和种花的次数.(1 <= n, m <= 100)\n\n> 接下来的m行, 每行两个整数 L,R 代表[L,R]区间内每块种上一朵花.(1 <= L <= R <= n)\n\n> 最后一行,输入两个整数 a,b 代表最后要查询的花的总数的区间.(1 <= a <= b <= n)\n#### 输出描述：\n> 对每组测试数据，输出区间[a,b]内花的总数\n#### 样例输入：\n> 5 2\n\n> 1 5\n\n> 1 2\n\n> 2 3\n#### 样例输出：\n> 3","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":47,"accepts":33,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.163Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1351,"title":"面朝大海 春暖花开 [ 数据加强版 ]","content":"#### 题目描述：\n> 依然选择那些大晴天的日子,再一次行走在孤单的海岸线,静静地种**更多的**花给自己看~\n\n> 我们假设把海岸线分为n块,每块的分别标记为1...n,每块都可以种花,每次种花可以选择某个[left,right]的闭区间,每块种上一朵花.经过m次种花操作后,根据输入的区间,求该区间内花的总数.\n#### 输入描述：\n> 多组输入\n\n> 对每组输入，第一行有两个整数n m,分别代表总块数和种花的次数.(1 <= n, m <= 100000)\n\n> 接下来的m行, 每行两个整数 L,R 代表[L,R]区间内每块种上一朵花.(1 <= L <= R <= n)\n\n> 最后一行,输入两个整数 a,b 代表最后要查询的花的总数的区间.(1 <= a <= b <= n)\n#### 输出描述：\n> 对每组输入，输出区间[a,b]内花的总数\n#### 样例输入：\n> 5 2\n\n> 1 5\n\n> 1 2\n\n> 2 3\n#### 样例输出：\n> 3","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":44,"accepts":23,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.164Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1352,"title":"面朝大海 春暖花开 [ 数据更强版 ]","content":"#### 题目描述：\n> 第三次选择那些大晴天的日子,第三次行走在孤单的海岸线,第三次静静地种**更多的**花给自己看~\n\n> 我们假设把海岸线分为n块,每块的分别标记为1...n,每块都可以种花,每次种花可以选择某个[left,right]的闭区间,每块种上一朵花.经过m次种花操作后, 输入t次区间, 根据输入的区间,求该区间内花的总数.\n\n> **注意这一次,我们要看更多次的花儿，所以在第一行要输入看花的次数t**\n#### 输入描述：\n> 多组输入\n\n> 对每组输入，第一行有三个整数n m t,分别代表总块数和种花的次数以及我们希望查询区间的次数.(1 <= n, m, t<= 100000)\n\n> 接下来的m行, 每行两个整数 L,R 代表[L,R]区间内每块种上一朵花.(1 <= L <= R <= n)\n\n> 接下来的t行, 每行输入两个整数 a,b 代表最后要查询的花的总数的区间.(1 <= a <= b <= n)\n#### 输出描述：\n> 每组输入中, 对每次查询, 输出区间[a,b]内花的总数\n#### 样例输入：\n> 5 2 2\n\n> 1 5\n\n> 1 2\n\n> 2 3\n\n> 3 4\n#### 样例输出：\n> 3\n\n> 2\n#### 样例说明\n> 第一行的三个数5 2 2 分别代表一共有5块可以种花的地方, 种花2次, 种完花后要查询2次\n\n> 下面的两行 1 5 以及 1 2 表示在区间[1,5],[1,2]分别种一次花,不难算出,种完花后每个位置花的总数分别为2 2 1 1 1,最后两行2 3 以及3 4 表示我们要分别求出[2,3],[3,4]区间内花的总数,所以输出的结果分别为3 2","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":76,"accepts":12,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.168Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1353,"title":"pow(a,b) [ 基础版 ]","content":"#### 题目描述\n> 22 的 4 次方的运算结果为 234256，结果的个位数为 6\n\n> 现请问 a 的 b 次方的运算结果的个位数是多少？\n\n#### 输入描述\n> 有多组测试数据，每组测试数据在一行上\n\n> 在每组数据中，有以 pow(a,b) 的形式呈现的一个正整数 a 和另一个非负整数 b ( a 的 b 次方的运算结果小于 2,147,483,647 )\n\n#### 输出描述\n> a 的 b 次方的运算结果的个位数\n\n#### 输入样例\n> pow(2,3)\n\n> pow(22,4)\n\n#### 输出样例\n> 8\n\n> 6","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":39,"accepts":24,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.172Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1354,"title":"pow(a,b) [ 数据加强版 ]","content":"#### 题目描述\n> 22 的 4 次方的运算结果为 234256，结果的个位数为 6\n\n> 现请问 a 的 b 次方的运算结果的个位数是多少？\n\n#### 输入描述\n> 有多组测试数据，每组测试数据在一行上\n\n> 在每组数据中，有以 pow(a,b) 的形式呈现的一个正整数 a 和另一个非负整数 b ( a 与 b 都不超过 2,147,483,647 )\n\n#### 输出描述\n> a 的 b 次方的运算结果的个位数\n\n#### 输入样例\n> pow(2,3)\n\n> pow(22,4)\n\n> pow(2147483646,2147483646)\n\n#### 输出样例\n> 8\n\n> 6\n\n> 6","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":27,"accepts":19,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.176Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1355,"title":"pow(a,b) [ 数据更强版 ]","content":"#### 题目描述\n> 22 的 4 次方的运算结果为 234256，结果的个位数为 6\n\n> 现请问 a 的 b 次方的运算结果的个位数是多少？\n\n#### 输入描述\n> 有多组测试数据，每组测试数据在一行上\n\n> 在每组数据中，有以 pow(a,b) 的形式呈现的一个正整数 a 和另一个非负整数 b ( a 与 b 不超过 100 位 )\n\n#### 输出描述\n> a 的 b 次方的运算结果的个位数\n\n#### 输入样例\n> pow(2,3)\n\n> pow(22,4)\n\n> pow(1893332944142476335492500321067113,67661633578477690446116988752588267926993)\n\n#### 输出样例\n> 8\n\n> 6\n\n> 3","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":30,"accepts":9,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.180Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1356,"title":"画图签到","content":"#### 题目描述\n> 签到题，找规律画图．．．．．．\n\n#### 输入描述\n> 多组输入，每组输入一个整数 n (n &le; 10)\n\n#### 输出描述\n> 对每组输入，第一行输出 n 和一个冒号，从下一行开始输出对应的图形。\n\n#### 样例输入\n> 1\n\n> 2\n\n> 3\n\n> 4\n\n#### 样例输出\n>     1:\n>     *\n>     2:\n>     *\n>     *-\n>     3:\n>     *\n>     *-\n>     *-*\n>     4:\n>     *\n>     *-\n>     *-*\n>     *-*-","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":35,"accepts":15,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.183Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1357,"title":"食物链(一)","content":"####题目描述\n> 如图所示为某生态系统的食物网示意图，据图回答第一小题。\n\n> ![图片描述](/static/pic/1357_1358_swl.png)\n\n> 1.数一数，在这个食物网中最长的食物链包含的物种数是( )\n\n> ......\n\n> 现在给你 n 个物种和 m 条能量流动关系，求其中的食物链条数。\n\n> 物种的名称为从 1 到 n 编号，m 条能量流动关系形如\n\n> a1 b1\n\n> a2 b2\n\n> a3 b3\n\n> ……\n\n> am−1 bm−1\n\n> am bm\n\n> 其中 ai bi 表示能量从物种 ai 流向物种 bi，即 ai 和 bi 之间存在捕食关系，且 ai 是被捕食者，\nbi 是捕食者。一条食物链是从顶到底的，即从能量流向的起点到终点。如图中的草－＞兔－＞狐就是一条食物链，而草－＞兔则不是。\n\n> 一条食物链至少包含两种生物。\n\n####输入描述\n> 多组输入，每组第一行两个正整数 n 和 m。0 < n, m <= 1000\n\n> 接下来 m 行每行两个整数 ai bi 表示 m 个捕食关系。\n\n> ( 数据保证输入数据符号合生物学特点，且不会有重复的能量流动关系出现 )\n\n####输出描述\n> 一个整数即食物网中的最长的食物链包含的生物数。\n\n####样例输入\n> 10 16\n\n> 1 2\n\n> 1 4\n\n> 1 10\n\n> 2 3\n\n> 2 5\n\n> 4 3\n\n> 4 5\n\n> 4 8\n\n> 6 8\n\n> 7 6\n\n> 7 9\n\n> 8 5\n\n> 9 8\n\n> 10 6\n\n> 10 7\n\n> 10 9\n\n####样例输出\n> 6\n\n####样例解释\n> 输入的图就是上面题目描述的那个图。\n\n> 各个物种的编号依次为：\n\n> 草<->1 兔<->2 狐<->3 鼠<->4 猫头鹰<->5 吃虫的鸟<->6 蜘蛛<->7 蛇<->8 青蛙<->9 食草昆虫<->10。","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":19,"accepts":9,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.187Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1358,"title":"食物链(二)","content":"####题目描述\n> 如图所示为某生态系统的食物网示意图，据图回答第二小题。\n\n> ![图片描述](/static/pic/1357_1358_swl.png)\n\n> ２.数一数，在这个食物网中一共有多少条食物链(　)\n\n> 现在给你 n 个物种和 m 条能量流动关系，求其中的食物链条数。\n\n> 物种的名称为从 1 到 n 编号，m 条能量流动关系形如\n\n> a1 b1\n\n> a2 b2\n\n> a3 b3\n\n> ……\n\n> am−1 bm−1\n\n> am bm\n\n> 其中 ai bi 表示能量从物种 ai 流向物种 bi，即 ai 和bi 之间存在捕食关系，且 ai 是被捕食者，bi 是捕食者。一条食物链是从顶到底的，即从能量流向的起点到终点。如图中的草－＞兔－＞狐就是一条食物链，而草－＞兔则不是。\n\n> 一条食物链至少包含两种生物。\n\n####输入描述\n> 多组输入，每组第一行两个正整数 n 和 m。0 < n, m <= 1000\n\n> 接下来 m 行每行两个整数 ai bi 表示 m 个捕食关系。\n\n> ( 数据保证输入数据符号合生物学特点，且不会有重复的能量流动关系出现 )\n\n####输出描述\n> 一个整数即食物网中的食物链条数。\n\n####样例输入\n> 10 16\n\n> 1 2\n\n> 1 4\n\n> 1 10\n\n> 2 3\n\n> 2 5\n\n> 4 3\n\n> 4 5\n\n> 4 8\n\n> 6 8\n\n> 7 6\n\n> 7 9\n\n> 8 5\n\n> 9 8\n\n> 10 6\n\n> 10 7\n\n> 10 9\n\n####样例输出\n> 9\n\n####样例解释\n> 输入的图就是上面题目描述的那个图。\n\n> 各个物种的编号依次为：\n\n> 草<->1 兔<->2 狐<->3 鼠<->4 猫头鹰<->5 吃虫的鸟<->6 蜘蛛<->7 蛇<->8 青蛙<->9 食草昆虫<->10。","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":444,"accepts":110,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.205Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1362,"title":"Mr.Z 的四因子数","content":"### [2017 江苏科技大学 程序设计竞赛]\n### B. Mr.Z 的四因子数\n>\n#### **题目描述**\n> Mr.Z 是一多高超的数学大师，最喜欢研究的领域是数论，由于要经常做各类特殊的整数分布研充，所以他想麻烦你帮他解决一个问题。\n\n> 考虑这样的一个数 K，它只含有四个因子，比如 10，它只有：1、2、5、10 这四个因子。我们将满足上述性质的数称为四因子数。\n\n> 现在想请问你在区间 [ a, b ] 内有多少个四因子数。\n\n#### **输入描述**\n> 有多组测试数据，每组测试数据占一行。\n\n> 每一行中，有两个用空格分隔的正整数 a 和 b。\n\n> a 和 b 均不超过 70000。\n\n#### **输出描述**\n> 对每组测试数据，输出一行答案。\n\n#### **输入样例**\n> 1 66666\n\n#### **输出样例**\n> 15878","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":28,"accepts":14,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.212Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1364,"title":"重复成绩统计","content":"### [2017 江苏科技大学 程序设计竞赛]\n### D. 重复成绩统计\n>\n#### **题目描述**\n> 上海闵行膜法学院刚刚结束了高等膜法期中考试，现在有 N ( 0 < N < 1000000) 个学生的成绩需要统计，管理教学的长者们想要知道成绩的总体分布情况，请将不同分数的成绩和人数统计好并分别输出。\n\n#### **输入描述**\n> 有多组测试数据，每组测试数据占若干行。\n\n> 在第 1 行中，有一个数字 N。\n\n> 在第 2 到第 N + 1 行中，每行一个数字，代表这是一个学生的成绩。\n\n> 所有数据保证在 32 位有符号整数范围内。\n\n#### **输出描述**\n> 每一行的输出格式为：成绩 取得这个成绩的人数。\n\n> 注意：**成绩和取得这个成绩的人数中间有一个空格!** 同时，输出的时候，请按成绩的大小从低到高输出。\n\n> 由于数据量较大，请使用时间复杂度较低的算法。\n\n#### **输入样例**\n> 5\n\n> 45\n\n> 45\n\n> 45\n\n> 60\n\n> 60\n\n> 6\n\n> 100\n\n> 60\n\n> 100\n\n> 100\n\n> 50\n\n> 60\n\n#### **输出样例**\n> 45 3\n\n> 60 2\n\n> 50 1\n\n> 60 2\n\n> 100 3","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":67,"accepts":19,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.216Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1365,"title":"最大连续子序列和","content":"### [2017 江苏科技大学 程序设计竞赛]\n### E. 最大连续子序列和\n>\n#### **题目描述**\n> 求取一串数中最大连续子序列的和，例如给定的数为1, 3, -2, 4, -5，则最大连续子序列和为 6，\n即 1 + 3 + (-2) + 4 = 6。\n\n#### **输入描述**\n> 有多组测试数据，每组测试数据占若干行。\n\n> 第 1 行：一个数 N，表示给定数字的个数。N 不超过 95000。\n\n> 第 2 行：共 N 个用空格分隔的数，为题目中所述的一串数，每个数保证在 32 位有符号整数范围内。\n\n#### **输出描述**\n> \n共一行。一个数，代表最大连续子序列的和。\n\n#### **输入样例**\n> 5\n\n> 1 3 -2 4 -5\n\n#### **输出样例**\n> 6","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":116,"accepts":35,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.228Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1369,"title":"Mr.Z 的四因子数 (数据加强版)","content":"### [2017 江苏科技大学 程序设计竞赛]\n### B. Mr.Z 的四因子数 (数据加强版)\n>\n#### **题目描述**\n> Mr.Z 是一多高超的数学大师，最喜欢研究的领域是数论，由于要经常做各类特殊的整数分布研充，所以他想麻烦你帮他解决一个问题。\n\n> 考虑这样的一个数 K，它只含有四个因子，比如 10，它只有：1、2、5、10 这四个因子。我们将满足上述性质的数称为四因子数。\n\n> 现在想请问你在区间 [ a, b ] 内有多少个四因子数。\n\n#### **输入描述**\n> 有多组测试数据，每组测试数据占一行。\n\n> 每一行中，有两个用空格分隔的正整数 a 和 b。\n\n> a 和 b 均不超过 700000。\n\n#### **输出描述**\n> 对每组测试数据，输出一行答案。\n\n#### **输入样例**\n> 1 66666\n\n> 1 666666\n\n#### **输出样例**\n> 15878\n\n> 142481","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":12,"accepts":3,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.231Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1370,"title":"奇数校验码","content":"#### ** 题目描述 **\n> 奇偶校验法是一种检验信号传输正确与否的方法，其广泛用于生产生活的各个领域。一般地，奇偶校验法是根据被传输的一段二进制串中 0 或 1 的个数来进行校验的。\n\n> 奇偶校验有多种不同的实现版本。在这里给出一个简化后的实现方案：若待检验的一段二进制串中 0 和 1 的个数均为奇数，则校验码为 1，否则为 0。若 0 (或者 1) 未出现，则视为其出现了偶数次。\n\n> **程序使用的变量不要多于两个 char 类型**\n\n#### ** 输入描述 **\n> 有多组测试数据，每组测试数据占一行。\n\n> 每行输入一段二进制串，代表待计算校验码的二进制串。\n\n> 每个二进制串的长度 **不少于** 80,000,000。\n\n#### ** 输出描述 **\n> 对于每组测试数据，输出一行结果。\n\n#### ** 输入样例 **\n> 000111\n\n> 10011\n\n> 00000\n\n> 10101100000001110000000011110000000000000000101111111111111111101010\n\n#### ** 输出样例 **\n> 1\n\n> 0\n\n> 0\n\n> 1\n\n#### ** 相关问题 **\n> AC了这题以后，你可以试试此题的难度加强版，题号: [1371](/problem/submit?tw=1371)","source":"admin","timeLimit":1,"memoryLimit":4,"difficulty":null,"cases":1,"multiCases":true,"submits":36,"accepts":12,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.235Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1371,"title":"能被 3 整除的二进制数","content":"#### ** 题目描述 **\n> 给你一串二进制数，请你判断其对应的十进制数能否被 3 整除。\n\n#### ** 输入描述 **\n> 有多组输入，每组输入占一行。\n\n> 每行一串二进制数，长度 **不少于** 80,000,000。\n\n#### ** 输出描述 **\n> 若对应的十进制数能被 3 整除，则输出 yes，否则输出 no。\n\n> 比如 1001 对应的十进制数是 9，能被 3 整除，故输出 yes。\n\n> 而 100 对应的十进制数是 4，不能被 3 整除，故输出 no。\n\n#### ** 输入样例 **\n> 1001\n\n> 100\n\n> 1000010\n\n#### ** 输出样例 **\n> yes\n\n> no\n\n> yes\n\n#### ** 相关问题 **\n> AC了这题以后，你可以试试此题的难度加强版，题号: [1372](/problem/submit?tw=1372)","source":"admin","timeLimit":1,"memoryLimit":4,"difficulty":null,"cases":1,"multiCases":true,"submits":29,"accepts":11,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.239Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1372,"title":"任意进制数的取模运算","content":"#### ** 题目描述 **\n> 给你一串 m 进制数 n, 请你计算该数对十进制数 k 取余的结果。\n\n#### ** 输入描述 **\n> 有多组输入，每组输入占一行。\n\n> 每行三个数，依顺序依次为：\n\n> 进制 m, 以十进制表示，2 <= m <= 16\n\n> 基数 k, 以十进制表示，2 <= k <= 200\n\n> 一串 m 进制数 n, n 的长度 **不少于** 80,000,000 个字符。\n\n> 对于 11 - 16 进制，均用大写字母 A - F 依次表示 10 - 15。\n\n#### ** 输出描述 **\n> 输出 n 对十进制数 k 取余的结果（用十进制数表示）。\n\n> 比如二进制数 1001 对应的十进制数是 9，对 3 取余为 0，故输出 0。\n\n> 三进制数 1101 对应的十进制数是 37，对 5 取余为 2，故输出 2。\n\n#### ** 输入样例 **\n> 2 3 1001\n\n> 3 5 1101\n\n> 16 7 96AB0C57DE\n\n> 8 6 42754632147125463755427756422365412335756452654745645\n\n#### ** 输出样例 **\n> 0\n\n> 2\n\n> 0\n\n> 5","source":"倪文卿","timeLimit":1,"memoryLimit":4,"difficulty":null,"cases":1,"multiCases":true,"submits":14,"accepts":6,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.244Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1374,"title":"计算器2","content":"#### 题目描述：\n> 给定一行表达式，**中间没有空格**，输出表达式的计算结果，测试数据保证在 int 范围之内。\n\n> 这是比较简单的一个题目，只涉及加法、减法、乘法、除法。其中除法为整数除法。数据保证表达式合法。\n\n#### 输入描述：\n> 一行表达式\n\n#### 输出描述：\n> 表达式的计算结果\n\n#### 样例输入：\n> 12+21*0\n\n#### 样例输出：\n> 12","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":61,"accepts":18,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.247Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1375,"title":"计算器3","content":"#### 题目描述：\n> 给定一行表达式，**中间没有空格**，输出表达式的计算结果，测试数据保证在 int 范围之内。\n\n> 这是比较简单的一个题目，只涉及加法、减法、乘法、除法以及小括号。其中除法为整数除法。\n\n> 如果输入数据不合法，请输出 None。\n\n> ** 此题将作为 ThinkSpirit 实验室 2018 年秋季招新考察条件之一 **\n\n#### 输入描述：\n> 一行表达式\n\n#### 输出描述：\n> 表达式的计算结果\n\n#### 样例输入：\n> (12+21)+0\n\n> -20-10/8\n\n> 2/5+(6+9)/2\n\n> (2+5))/2\n\n> 4+\n\n> ()\n\n> (2+5)6\n\n#### 样例输出：\n> 33\n\n> -21\n\n> 7\n\n> None\n\n> None\n\n> None\n\n> None","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":206,"accepts":18,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.251Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1376,"title":"计算器4","content":"#### 题目描述：\n> 给定一行表达式，**中间没有空格**，输出表达式的计算结果，测试数据保证在 int 范围之内。\n\n> 这是有点麻烦的一个题目，涉及加法、减法、乘法、除法、括号、乘方、取模。其中除法为整数除法。\n\n> 如果输入数据不合法，请输出 None。\n\n> 注意乘方的优先级与结合性。\n\n#### 输入描述：\n> 一行表达式\n\n#### 输出描述：\n> 表达式的计算结果\n\n#### 样例输入：\n> (12+21)*0\n\n> ()*0\n\n> 2^3^2\n\n#### 样例输出：\n> 0\n\n> None\n\n> 512","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":40,"accepts":11,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.254Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1377,"title":"坑爹的显示牌（ACM改编）","content":"#### 题目描述：\n> ThinkSpirit团队设计了一种坑爹的显示牌，由正方形瓷砖组成的R×C二维网格。每块瓷砖一面是白色的，另一面是黑色的。可以通过翻转瓷砖创建不同的图形，但是每一次你翻转一个瓷砖，周围直接相邻的瓷砖也会跟着翻转，非边界的瓷砖有上下左右四个相邻瓷砖，也就是说你你翻转这个瓷砖，这五个瓷砖都会一起翻转，但是不会向下传递给邻居的邻居。\n\n> ![图片描述](/static/pic/1377_pg_0001.jpg)\n\n> 举个例子，如图你翻转左图中标有×图形的瓷砖，你将会得到右图。你的任务是找到最快的方法，将整个显示牌变成白色。\n\n#### 输入描述：\n> 多组输入！输入包括几组显示牌现有状态的描述。每个描述的第一行有两个整数R和C(1 ≤ R,C ≤ 16)表示显示牌的大小。接下来R行，每行含有C个字符，字符可以是大写字母“X”（黑）也可以是一个点“.”（白）。如果没法确认是什么字符，可以直接从题目复制到代码中！\n\n#### 输出描述：\n> 对于每组输入，输出“You have to tap T tiles.”T为将该显示牌恢复为全白最少需要翻转的次数。如果没有解，则输出“Damaged billboard.”。双引号不需要输出。\n\n#### 样例输入：\n>         \n>     5 5\n>     XX.XX\n>     X.X.X\n>     .XXX.\n>     X.X.X\n>     XX.XX\n>     8 9\n>     ..XXXXX..\n>     .X.....X.\n>     X..X.X..X\n>     X.......X\n>     X.X...X.X\n>     X..XXX..X\n>     .X.....X.\n>     ..XXXXX..\n\n#### 样例输出：\n> You have to tap 5 tiles.\n\n> You have to tap 25 tiles.","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":11,"accepts":2,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.256Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1378,"title":"晕头的蚂蚁（数据增强版，ACM改编）","content":"#### 题目描述：\n> 蚂蚁！ 他们不是很迷人吗？他们可以建立高度组织的蚂蚁族群，但有时候，他们有点愚蠢。现在有成千上万的蚂蚁正在行军。想象一下，有一根长长的木杆，还有一些蚂蚁在上面行军。 他们的行为模式非常简单：每只蚂蚁以1厘米/秒的速度匀速前行。每当遇到另一只蚂蚁的时候，他们都只能触摸到他们的触角，然后立即转身走向相反的方向。 如果一只蚂蚁走到木杆的尽头，就会掉下来，不会再影响到其他的蚂蚁了。\n\n> ![图片描述](/static/pic/1378_ants.png)\n\n> 上面的图片展示了一个在0秒时蚂蚁的状态。 在一秒钟时，蚂蚁E和A在2位相遇并改变方向。 蚂蚁A在1.5秒后遇见B。同时（2.5秒后），蚂蚁C和D也会相遇。 他们四人都改变方向。 在接下来的0.5秒后（时间3秒），第一只蚂蚁（E）从左端落下等。你的任务是模拟蚂蚁的移动。\n#### 输入描述：\n> 多组输入，每组输出包括一种木杆和蚂蚁在0秒的状态，每组输入第一行两个整数L和A，用空格分隔。 L是木材的长度（1 <= L <= 999 999），A是模拟开始时蚂蚁的数量（1 <= A <= L +1）。然后有A行，每行包含一个正整数Xi，一个空格和一个大写字母。数字（0 <= Xi <= L）指定第i个蚂蚁的位置，字母表示它的初始方向：“L” （朝左）或“R”（朝右）。 没有两只蚂蚁会在相同的位置开始。\n#### 输出描述：\n> 对于每一个测试用例，你应该输出一行“The last ant will falldown in T seconds.”，其中整数T是最后一只蚂蚁（或两只）到达木杆尽头的确切时间（这里的最后只的是最后到达木杆的先后，而不是输入的先后）。不输出双引号。\n#### 样例输入：\n> 900000 1\n\n> 0 R\n\n> 10 1\n\n> 0 L\n\n>14 5\n\n>3 L\n\n>6 L\n\n>13 L\n\n>1 R\n\n>8 R\n#### 样例输出：\n> The last ant will fall down in 900000 seconds.\n\n> The last ant will fall down in 0 seconds.\n\n> The last ant will fall down in 13 seconds.","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":10,"accepts":5,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.262Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1379,"title":"为ThinkSpirit打Call（ACM改编）","content":"#### 题目描述：\n> ThinkSpirit设计了一种新型无线网络，方便粉丝们打Call。显然这种无线网络需要基站来传输信号，而每个基站只能覆盖到与功率相对应半径R的一个圆形区域。我们有很多粉丝，但是却很穷，所以要使得基站覆盖到尽可能多的粉丝。\n\n>![图片描述](/static/pic/1379_1380_cell.png)\n\n> 如上图所示，最优情况下这个基站只能覆盖到这四个粉丝。\n\n#### 输入描述：\n> 多组输入。每组输入的第一行有N和R两个整数。N是粉丝的数量，1 <= N <= 2 000（为了简化没有让大家处理很多粉丝的真实情况），R是基站能覆盖的最大半径，0 <= R<10 000。接下来N行，每行包括两个整数 Xi,Yi<10000，表示了该粉丝所在位置的坐标。所有粉丝的坐标都不同。\n\n> 一个粉丝就算位于基站覆盖的圆形区域边缘也可以为TS打Call。为了避免浮点数的误差，可以被半径R+0.001覆盖的区域都可以为TS打Call\n\n#### 输出描述：\n> 对于每组输入，输出一行\"It is possible to cover M points.\"，整数M是该输入描述情况下可以为TS打Call的粉丝最多数量。不输出双引号。\n\n#### 样例输入：\n>     \n>     8 2\n>     1 2\n>     5 3\n>     5 4\n>     1 4\n>     8 2\n>     4 5\n>     7 5\n>     3 3\n>     2 100\n>     0 100\n>     0 -100\n\n#### 样例输出：\n> It is possible to cover 4 points. \n\n> It is possible to cover 2 points.","source":"admin","timeLimit":2,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":1,"accepts":0,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.265Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1380,"title":"为ThinkSpirit打Call（数据放宽、ACM改编）","content":"#### 题目描述：\n> ThinkSpirit设计了一种新型无线网络，方便粉丝们打Call。显然这种无线网络需要基站来传输信号，而每个基站只能覆盖到与功率相对应半径R的一个圆形区域。我们有很多粉丝，但是却很穷，所以要使得基站覆盖到尽可能多的粉丝。\n\n>![图片描述](/static/pic/1379_1380_cell.png)\n\n> 如上图所示，最优情况下这个基站只能覆盖到这四个粉丝。\n\n#### 输入描述：\n> 多组输入。每组输入的第一行有N和R两个整数。N是粉丝的数量，1 <= N <= 2 000（为了简化没有让大家处理很多粉丝的真实情况），R是基站能覆盖的最大半径，0 <= R<10 000。接下来N行，每行包括两个整数 Xi,Yi<10000，表示了该粉丝所在位置的坐标。所有粉丝的坐标都不同。\n\n> 一个粉丝就算位于基站覆盖的圆形区域边缘也可以为TS打Call。为了避免浮点数的误差，可以被半径R+0.001覆盖的区域都可以为TS打Call\n\n#### 输出描述：\n> 对于每组输入，输出一行\"It is possible to cover M points.\"，整数M是该输入描述情况下可以为TS打Call的粉丝最多数量。不输出双引号。\n\n#### 样例输入：\n>     \n>     8 2\n>     1 2\n>     5 3\n>     5 4\n>     1 4\n>     8 2\n>     4 5\n>     7 5\n>     3 3\n\n>     2 100\n>     0 100\n>     0 -100\n\n#### 样例输出：\n> It is possible to cover 4 points. \n\n> It is possible to cover 2 points.","source":"20161308038","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":2,"accepts":0,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.289Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1386,"title":"AK","content":"#### 题目描述  \n> 众所周知 黄老师又双叒叕 AK 了！！！\n现在, 黄老师AK完打算提前离场, 不过他担心会不会自己的罚时过多而被其他人超过。\n现在他打算手算一下罚时, 不过他的提交太多了, 黄老师 AK 完已经很累了。所以现在拜托你帮他编写一个程序去计算罚时。\n\n> 已知每场比赛的题目代号为大写字母并且从 A 开始直到 Z（保证总题数不会超过26）, 黄老师总共有 n 次提交, 每一次提交为如下格式 :`题目代号 结果 提交时间`, 这里为了简化问题 题目结果只有 AC 和 WA 两种, 提交时间为比赛后多少分钟提交。\n\n> ACM-IPCP比赛中罚时如下计算, 一道题的罚时为 AC 的提交时间 + AC 之前的错误提交次数 × 20 分钟, 如果一道题在 30 分钟AC了, 但是之前错了两次, 那么罚时为 30 + 2 × 20 = 70 。\n> 总的罚时是每道题的罚时累加, 一道题AC之后的再进行错误提交和正确提交都不增加罚时, 一道题如果没有AC, 那么不计算这道题的罚时。\n\n> 输入提交记录已按时间升序排序, 不保证黄老师AK。     \n#### 输入描述  \n> 第一行输入一个数字n, n代表黄老师提交的次数  \n> 接下来的n行, 每行输入 `problem result  time`, 分别为这一次提交的题目代号 结果 时间  \n#### 输出描述\n> 输出本次比赛的总罚时  \n#### 样例输入\n> 3  \n> A AC 20  \n> B WA 30  \n> B AC 50  \n#### 样例输出  \n> 90","source":"zmq","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":15,"accepts":8,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.293Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1387,"title":"吃饼干","content":"#### 题目描述：  \n> 众所不周知， 在某两个喜欢吃饼干的小朋友A和B之间展开了一场激烈的\"吃饼干大战\"! 由于饼干太大，所以他们一次只能吃\n一个或两个饼干，他们约定谁吃到最后一个饼干谁就是真正的吃货, 由于他们都非常想赢得这场比赛，所以他们都会采用最佳的吃饼干策略。\n#### 输入描述  \n> 多组输入, 每组输入一行, 包括空格隔开的一个整数n和一个字母c,n代表饼干的总数,若c是`A`, 则A先吃,  否则, 若c是`B`, 则B先吃。\n#### 输出描述  \n> 如果A赢了, 输出 \"A win!\", 如果B赢了,  输出\"B win!\"\n#### 样例输入\n> 2 A   \n> 12 A  \n#### 样例输出\n> A win!  \n> B win!","source":"zmq","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":20,"accepts":12,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.301Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1389,"title":"方","content":"#### 题目描述\n> 什么，还要加题目？我好方......所以我要用一道题来形容我究竟有多方(mdzz)：  \n> 给定一个整数n(n<500), n可以写成**正整数的平方**的和的形式比如:  \n> 1 = 1  \n> 2 = 1 + 1  \n> 3 = 1 + 1  \n> 4 = 1 + 1 + 1 + 1  \n> 4 = 4  \n> 5 = 1 + 1 + 1 + 1 + 1  \n> 5 = 1 + 4  \n> `现在，我们使用不超过400的平方数,即[1,20]所有正整数的平方的和来表示n`  \n> 现在我的问题就是求n的平方数的和的表示种类数。  \n> 上式中每个数的前后顺序无关，比如1+4和4+1是同一种  \n#### 输入描述\n> 一个正整数n (n < 500)\n#### 输出描述\n> 输出n表示成正整数的平方和的种类数\n#### 样例输入\n> 4  \n> 16\n#### 样例输出\n> 2  \n> 8","source":"zmq","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":41,"accepts":14,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.305Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1390,"title":"贪心只能过样例","content":"#### 题目描述\n> 这题能不能用贪心做?看完标题你心里应该有点`A CD`数了吧(逃  \n\n> 桌子上面有n张卡片自上而下堆叠在一起，每张卡片都有两个数字`ai`和`bi`。每次你可以取最上面的一张卡片进行下面两种操作之一:  \n> `1:`自上而下依次扔掉包括最上面这一张一共`ai`张卡片, 从而你能够获得`bi`个积分, 如果卡片剩余的数量不够`ai`张则不能进行此操作  \n> `2:`把这张卡片放到所有卡片的最下面  \n> 你可以一直重复这个操作, 也可以在某次操作之后停来。那么你在这个过程中最多一共能获得多少积分呢？\n#### 输入描述\n> 多组输入,每组第一行一个正整数n (n <= 1000)  \n> 接下来的n行, 每行输入两个数字`ai`和`bi`,代表这张卡片上的两个数字。\n\n#### 输出描述\n> 输出你能得到的最大的积分\n#### 样例输入\n> 3  \n> 2 4  \n> 1 2  \n> 1 1\n#### 样例输出\n> 6  \n#### 样例说明  \n> 为了获得最大的积分, 第一次把最上面的(2, 4)这张卡片放到卡片最下面, 第二次把最上面的(1, 2)这张卡片扔掉, 获得2\n积分, 第三次把(1, 1)这张卡片放到最下面, 第四次扔掉最上面的(2, 4)这张卡片以及它下面的(1, 1)这张卡片获得4积分,此时共可得到最多积分6。","source":"zmq","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":3,"accepts":1,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.314Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1391,"title":"Bandwidth","content":"#### 题目描述：\n> Given a graph (V; E) where V is a set of nodes and E is a set of arcs in V × V , and an ordering on the elements in V , then the bandwidth of a node v is defined as the maximum distance in the ordering between v and any node to which it is connected in the graph. The bandwidth of the ordering is then defined as the maximum of the individual bandwidths. For example, consider the graph on the right:\n\n> ![图片描述](/static/pic/1391_o_140img1.gif)\n\n> This can be ordered in many ways, two of which are illustrated below:\n\n> ![图片描述](/static/pic/1391_o_140img2.gif)\n\n> For these orderings, the bandwidths of the nodes (in order) are 6, 6, 1, 4, 1, 1, 6, 6 giving an ordering bandwidth of 6, and 5, 3, 1, 4, 3, 5, 1, 4 giving an ordering bandwidth of 5.\n\n> Write a program that will fnd the ordering of a graph that minimises the bandwidth.\n\n#### 输入描述：\n> Input will consist of a series of graphs. Each graph will appear on a line by itself. The entire fle will be terminated by a line consisting of a single ‘#’. For each graph, the input will consist of a series of records separated by ‘;’. Each record will consist of a node name (a single upper case character in the range ‘A’ to ‘Z’), followed by a ‘:’ and at least one of its neighbours. The graph will contain no\nmore than 8 nodes\n\n#### 输出描述：\n> Output will consist of one line for each graph, listing the ordering of the nodes followed by an arrow (->) and the bandwidth for that ordering. All items must be separated from their neighbours by exactly one space. If more than one ordering produces the same bandwidth, then choose the smallest in lexicographic ordering, that is the one that would appear frst in an alphabetic listing\n\n#### 样例输入：\n>     A:FB;B:GC;D:GC;F:AGH;E:HD\n>     #\n\n#### 样例输出：\n> A B C F G D H E -> 3","source":"20161314034","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":10,"accepts":1,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.330Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1395,"title":"全排列2","content":"#### 题目描述：\n> 按从小到大的顺序输出 1, 2, 3, ..., N 的全排列。\n\n#### 输入描述：\n> 有多组测试数据，每行输入一个整数 N。\n\n#### 输出描述：\n> 对于每组测试数据，输出一行答案。\n\n#### 样例输入：\n> 3\n\n> 4\n\n#### 样例输出：\n> \n>     123\n>     132\n>     213\n>     231\n>     312\n>     321\n>     1234\n>     1243\n>     1324\n>     1342\n>     1423\n>     1432\n>     2134\n>     2143\n>     2314\n>     2341\n>     2413\n>     2431\n>     3124\n>     3142\n>     3214\n>     3241\n>     3412\n>     3421\n>     4123\n>     4132\n>     4213\n>     4231\n>     4312\n>     4321","source":"20161344069","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":72,"accepts":23,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.331Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1396,"title":"TS002梯度下降求解线性模型","content":"#### 题目描述：\n> 这次我们拟合一个简单的线性函数，只考虑房屋面积和房价的关系，那么我们的模型就变成 h(x) = &theta;0 + &theta;1 &times; x1，x1 就是我们输入的房屋面积，h(x) 就是预测出来的房价，梯度下降的步长是 0.00001,&theta;全初始化为0。当 J(&theta;) 的变化小于 0.01 时或者迭代超过 1000 次时结束，输出 &theta;0 &theta;1，结果保留 3 位小数。\n\n> 损失函数，函数 J 的计算一定要和图片一模一样。\n\n> ![损失函数](/static/pic/1396_sunshihanshu.png)\n\n> 参数调整也要和图片一模一样\n\n> ![参数调整](/static/pic/1396_canshutiaozheng.png)\n\n#### 输入描述：\n> 第一行一个整数 n，接下来 n 行，每行输入一个房屋样本，每个房屋样本包括两个 double 类型的数值，第一个代表房屋的面积，第二个代表房屋的价格，单位是 **万** 哦，你们不要想太多，逃~\n\n#### 输出描述：\n> 输出 &theta;0 &theta;1，结果保留 3 位小数。\n\n#### 样例输入：\n> \t\n>     6\n>     45 80\n>     73 150\n>     89 198\n>     120 230\n>     140 280\n>     163 360\n\n#### 样例输出：\n> 0.016 2.078","source":"耿祥","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":4,"accepts":3,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.334Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1397,"title":"明明的随机数","content":"#### 题目描述：\n> 明明想在学校中请一些同学一起做一项问卷调查，为了实验的客观性，他先用计算机生成了 N 个 1 到 1000 之间的随机整数 (N ≤ 100)，对于其中重复的数字，只保留一个，把其余相同的数去掉，不同的数对应着不同的学生的学号。然后再把这些数从小到大排序，按照排好的顺序去找同学做调查。请你协助明明完成“去重”与“排序”的工作。\n\n#### 输入描述：\n> 有多组测试数据\n\n> 每组测试数据有 2 行，第 1 行为 1 个正整数，表示所生成的随机数的个数：N\n\n> 第 2 行有 N 个用空格隔开的正整数，为所产生的随机数。\n\n#### 输出描述：\n> 输出也是 2 行，第 1 行为 1 个正整数 M，表示不相同的随机数的个数。第 2 行为 M 个用空格隔开的正整数，为从小到大排好序的不相同的随机数。\n\n#### 样例输入：\n> 10\n\n> 20 40 32 67 40 20 89 300 400 15\n\n#### 样例输出：\n> 8\n\n> 15 20 32 40 67 89 300 400\n\n#### 题目来源：\n> NOIP 2006 普及组复赛","source":"20171393124","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":111,"accepts":32,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.336Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1398,"title":"回转折叠矩阵","content":"#### 题目描述：\n> 输入正整数 n，输出一个与之对应的 n 阶回转折叠矩阵。\n\n#### 输入描述：\n> 多组输入，每组输入一个正整数 n，占一行，其中 n <= 500。\n\n#### 输出描述：\n> 输出一个 n 阶回转折叠矩阵，每列的元素之间用一个空格分开，第 1 列的前面和最后一列的后面没有多余的空格。\n\n> 例如，n = 5 时的回转折叠矩阵为：\n\n>      1  2  9 10 25\n>      4  3  8 11 24\n>      5  6  7 12 23\n>     16 15 14 13 22\n>     17 18 19 20 21\n\n#### 样例输入：\n> 3\n\n> 5\n\n#### 样例输出：\n>     1 2 9\n>     4 3 8\n>     5 6 7\n>     1 2 9 10 25\n>     4 3 8 11 24\n>     5 6 7 12 23\n>     16 15 14 13 22\n>     17 18 19 20 21","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":179,"accepts":95,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.339Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1399,"title":"A Spy in the Metro","content":"#### 题目来源:\n> UVa Online Judge\n\n#### 题目描述：\n> Secret agent Maria was sent to Algorithms City to carry out an especially dangerous mission. After several thrilling events we ﬁnd her in the ﬁrst station of Algorithms City Metro, examining the time table. The Algorithms City Metro consists of a single line with trains running both ways, so its time table is not complicated.\n\n> The Algorithms City Metro system has N stations, consecutively numbered from 1 to N. Trains move in both directions: from the ﬁrst station to the last station and from the last station back to the ﬁrst station. The time required for a train to travel between two consecutive stations is ﬁxed since all trains move at the same speed. Trains make a very short stop at each station, which you can ignore for simplicity. Since she is a very fast agent, Maria can always change trains at a station even if the trains involved stop in that station at the same time.\n\n#### 输入描述：\n> The input ﬁle contains several test cases. Each test case consists of seven lines with information as follows.\n\n> Line 1. The integer N (2 ≤ N ≤ 50), which is the number of stations.\n\n> Line 2. The integer T (0 ≤ T ≤ 200), which is the time of the appointment.\n\n> Line 3. N − 1 integers: t1,t2,…,tN−1 (1 ≤ ti ≤ 20), representing the travel times for the trains between two consecutive stations: t1 represents the travel time between the ﬁrst two stations, t2 the time between the second and the third station, and so on.\n\n> Line 4. The integer M1 (1 ≤ M1 ≤ 50), representing the number of trains departing from the ﬁrst station.\n\n> Line 5. M1 integers: d1,d2,…,dM1 (0 ≤ di ≤ 250 and di < di+1), representing the times at which trains depart from the ﬁrst station.\n\n> Line 6. The integer M2 (1 ≤ M2 ≤ 50), representing the number of trains departing from the N-th station.\n\n> Line 7. M2 integers: e1,e2,…,eM2 (0 ≤ ei ≤ 250 and ei < ei+1) representing the times at which trains depart from the N-th station.\n\n> The last case is followed by a line containing a single zero.\n\n#### 输出描述：\n> For each test case, print a line containing the case number (starting with 1) and an integer representing the total waiting time in the stations for a best schedule, or the word ‘impossible’ in case Maria is unable to make the appointment. Use the format of the sample output.\n\n#### 样例输入：\n>     4\n>     55\n>     5 10 15\n>     4\n>     0 5 10 20\n>     4\n>     0 5 10 15\n>     4\n>     \n>     18\n>     1 2 3\n>     5\n>     0 3 6 10 12\n>     6\n>     0 3 5 7 12 15\n>     2\n>     \n>     30\n>     20\n>     1\n>     20\n>     7\n>     1 3 5 7 11 13 17\n>     0\n\n#### 样例输出：\n> Case Number 1: 5\n\n> Case Number 2: 0\n\n> Case Number 3: impossible","source":"20168304019","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":8,"accepts":2,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.340Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1400,"title":"汉诺塔问题 plus","content":"#### 题目描述：\n> 将汉诺塔问题中塔的个数变为 a, b, c, d 四个，现要将 n 个圆盘从 a 全部移动到 d，移动规则不变。求最少需要移动多少次？\n\n#### 输入描述：\n> 有多组测试数据，每组测试数据占一行，每行一个整数 n (1 <= n <= 64)，表示圆盘的个数。\n\n#### 输出描述：\n> 对于每组测试数据，输出一行答案。\n\n#### 样例输入：\n> 1\n\n> 3\n\n> 8\n\n> 15\n\n#### 样例输出：\n> 1\n\n> 5\n\n> 33\n\n> 129","source":"admin","timeLimit":1,"memoryLimit":8,"difficulty":null,"cases":1,"multiCases":true,"submits":30,"accepts":18,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.343Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1401,"title":"矩阵连乘问题","content":"#### ** 题目描述 **\n> 给定 n 个矩阵 {A1, A2, ..., An}，考察这 n 个矩阵的连乘 A1A2...An。由于矩阵的连乘满足结合律，故计算连乘的方式可以有多种。例如：当计算三个维数分别为 10 &times; 100 , 100 &times; 5 , 5 &times; 50 的矩阵 A1A2A3 的连乘时，有两种方式：(A1A2)A3 或者 A1(A2A3)。\n\n> 对于第一种计算方式，A1A2 需要做 10 &times; 100 &times; 5 次实数乘法，得到一个 10 &times; 5 的矩阵，该矩阵再和 A3 相乘，需要做 10 &times; 5 &times; 50 次实数运算。则在此方式下，一共需要做 10 &times; 100 &times; 5 + 10 &times; 5 &times; 50 = 5000 + 2500 = 7500 次实数乘法\n\n> 而对于第二种计算方式，A2A3 需要做 100 &times; 5 &times; 50 次实数乘法，得到一个 100 &times; 50 的矩阵，该矩阵再左乘 A1 ，需要做 10 &times; 100 &times; 50 次实数运算。则在此方式下，一共需要做 100 &times; 5 &times; 50 + 10 &times; 100 &times; 50 = 25000 + 50000 = 75000 次实数乘法\n\n> 一般地，在计算机中，实数的乘法要比加法花费多的多的时间。因此，我们可以通过实数乘法的次数去近似衡量矩阵乘法的运算效率。显然，对于上面所述的示例，第一种计算方案显然比第二种要更优。\n\n> 现在，我们关心的是，给你一串矩阵，如何利用结合律安排最佳的结合顺序，使得连乘的计算效率最佳。若给的这 n 个矩阵可以连乘，则求解连乘过程中最少需要做多少次实数乘法；若不可连乘，则给出 invalid argument。\n\n> 注：计算两个相邻矩阵的乘积时，使用的是平凡的方法，即不需要考虑 strassen 算法等矩阵乘法的优化算法。\n\n#### ** 输入描述 **\n> 有多组测试数据。\n\n> 每组测试数据的第一行有一个正整数 n，n >= 2。\n\n> 接下来的第 2 行至第 n + 1 行，每行给出一组有序实数对 <r, c> ，分别表示第 i 个矩阵的行数与列数。\n\n#### ** 输出描述 **\n> 对每组测试数据，输出一行答案。\n\n#### ** 样例输入 **\n>     \n    2\n    10 20\n    20 30\n>     \n    2\n    5 6\n    8 9\n>     \n    3\n    10 100\n    100 5\n    5 50\n>     \n    4\n    30 35\n    35 15\n    15 5\n    5 10\n\n#### ** 样例输出 **\n> 6000\n\n> invalid argument\n\n> 7500\n\n> 9375","source":"倪文卿","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":87,"accepts":23,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.363Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1407,"title":"找位置","content":"#### 题目描述：\n> 输入三个自然数 n, i, j (其中 1 <= i <= n, 1 <= j <= n, 1 <= n <= 100000)，n 表示一个 n &times; n 格的棋盘，要求输出与格子 <i,j> 同行、同列、同一对角线的所有格子的位置。\n\n#### 输入描述：\n> 输入三个自然数，每个之间用一个空格分开，分别表示一个棋盘的大小和格子所在的行和列的位置。\n\n#### 输出描述：\n> 输出四行。\n\n> 第一行表示格子所在的行对应的所有格子，每个格子用一个一个空格分开，最后一个格子后面也包含一个空格。\n\n> 第二行表示格子所在的列对应的所有格子，每个格子用一个一个空格分开，最后一个格子后面也包含一个空格。\n\n> 第三行表示格子所在的左上到右下对角线的所有格子，每个格子用一个一个空格分开，最后一个格子后面也包含一个空格。\n\n> 第四行表示格子所在的左下到右上对角线的所有格子，每个格子用一个一个空格分开，最后一个格子后面也包含一个空格。\n\n#### 样例输入：\n> 4 2 3\n\n#### 样例输出：\n> <2,1> <2,2> <2,3> <2,4>\n\n> <1,3> <2,3> <3,3> <4,3>\n\n> <1,2> <2,3> <3,4>\n\n> <4,1> <3,2> <2,3> <1,4>","source":"admin","timeLimit":1,"memoryLimit":64,"difficulty":null,"cases":1,"multiCases":true,"submits":24,"accepts":14,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.368Z","updatedAt":"2019-09-11T15:56:09.000Z","id":1409,"title":"递增三元组","content":"### [2018 蓝桥杯省赛 C/C++ B 组]\n### 六. 递增三元组\n>\n#### ** 问题描述 **\n> 给定三个整数数组\n\n> A = [A1, A2, ..., AN],\n\n> B = [B1, B2, ..., BN],\n\n> C = [C1, C2, ..., CN],\n\n> 请你统计有多少个三元组 (i, j, k) 满足:\n\n> 1 <= i, j, k <= N 且\n\n> Ai < Bj < Ck\n\n#### ** 输入描述 **\n> 有多组测试数据，对于每组测试数据：\n\n> 第一行包含一个整数 N。\n\n> 第二行包含 N 个整数 A1, A2, ..., AN。\n\n> 第三行包含 N 个整数 B1, B2, ..., BN。\n\n> 第四行包含 N 个整数 C1, C2, ..., CN。\n\n> 在测试数据集中，有两组大规模测试数据集。\n\n> 在大规模测试数据集中，N 的范围在 [9950, 10000) 之间。\n\n#### ** 输出描述 **\n> 对于每组测试数据，输出一行整数表示答案。\n\n#### ** 样例输入 **\n> 3\n\n> 1 1 1\n\n> 2 2 2\n\n> 3 3 3\n\n#### ** 样例输出 **\n> 27\n\n#### ** 蓝桥杯原题数据规模 **（非 TSOJ 此题的测试数据规模，下列数据 ** 仅供参考 **）\n> 对于 30% 的数据，1 <= N <= 100\n\n> 对于 60% 的数据，1 <= N <= 1000\n\n> 对于 100% 的数据，1 <= N <= 100000; 0 <= Ai, Bi, Ci <= 100000","source":"admin","timeLimit":1,"memoryLimit":4,"difficulty":null,"cases":1,"multiCases":true,"submits":111,"accepts":15,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.371Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1410,"title":"石子合并","content":"#### 题目描述：\n> 设有 N 堆石子，其编号为 1, 2, 3, …, N。每堆石子有一定的数量。现要将 N 堆石子并成为一堆。每次合并只能将相邻的两堆堆在一起（每次合并花费的体力为当前两堆石子的数量总和），这样经过 N - 1 次合并后成为一堆，归并的总体力为每次合并花费的体力和。找出一种合理的合并方法，使所花费的总的体力最小。\n\n> 例如：有 3 堆石子，数量分别为 13, 7, 8，有两种合并方案， \n\n> 第一种方案：先合并 1, 2 号堆，合并后的新堆数量为 20，本次合并体力为 20，再拿新堆与第 3 堆合并，合并后的数量为 28，本次合并体力为 28，将 3 堆沙子合并到一起所花费的总的体力为第一次合并所花费的体力 20 加上第二次合并所花费的体力 28，即 48； \n\n> 第二种方案：先合并 2, 3 号堆，合并后的新堆数量为 15，本次合并代价为 15，再拿新堆与第 1 堆合并，合并后的数量为 28，本次合并代价为 28，将 3 堆沙子合并到一起所花费的总的体力为第一次合并所花费的体力 15 加上第二次合并所花费的体力 28，即 43。\n\n> 因此，采用第二种方案可取得所花费的最小总体力为 43。 \n\n#### 输入描述：\n> 有多组测试数据。\n\n> 每组测试数据的第一行为一个正整数 N (N < 650)，表示石子的堆数，第二行为 N 个正整数，表示每堆中石子的个数。\n\n#### 输出描述：\n> 对于每组测试数据，输出一行正整数，表示合并所花费的最小体力。答案不超过 64 位无符号整型的表示范围。\n\n#### 样例输入：\n> 7\n\n> 13 7 8 16 21 4 18\n\n#### 样例输出：\n>  239","source":"admin","timeLimit":1,"memoryLimit":4,"difficulty":null,"cases":1,"multiCases":true,"submits":176,"accepts":23,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.383Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1414,"title":"安置路灯","content":"#### 题目描述：\n> 小 Q 正在给一条长度为 n 的道路设计路灯安置方案。\n\n> 为了让问题更简单，小 Q 把道路视为 n 个方格，需要照亮的地方用 '.' 表示，不需要照亮的障碍物格子用 'X' 表示。\n\n> 小 Q 现在要在道路上设置一些路灯，对于安置在 pos 位置的路灯，这盏路灯可以照亮 pos - 1, pos, pos + 1 这三个位置。\n\n> 小 Q 希望能安置尽量少的路灯照亮所有 '.' 区域。希望你能帮他计算一下最少需要多少盏路灯。\n\n#### 输入描述：\n> 输入的第一行包含一个正整数 t (1 <= t <= 1000)，表示测试用例数。\n\n> 接下来每两行一个测试数据，第一行一个正整数 n (1 <= n <= 1000)，表示道路的长度。\n\n> 第二行一个字符串 s 表示道路的构造，只包含 '.' 和 'X'。\n\n#### 输出描述：\n> 对于每个测试用例，输出一个正整数表示最少需要多少盏路灯。\n\n#### 样例输入：\n> 2\n\n> 3\n\n> .X.\n\n> 11\n\n> ...XX....XX\n\n#### 样例输出：\n> 1 \n\n> 3","source":"admin","timeLimit":1,"memoryLimit":4,"difficulty":null,"cases":1,"multiCases":true,"submits":12,"accepts":8,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.405Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1419,"title":"11 的幂","content":"#### 题目描述：\n> 请输出 11 的 n 次方对 10¹²³ 取余的结果。\n\n#### 输入描述：\n> 有多组测试数据，每行有一个整数 n (n < 1, 000, 000)。\n\n#### 输出描述：\n> 对于每组测试数据，输出一行结果。\n\n#### 样例输入：\n> 23\n\n> 233\n\n#### 样例输出：\n> 895430243255237372246531\n\n> 295393551363864933596060768599007477725936376480317423986842814932737176551161274536044289609890678184310248162531349161131","source":"admin","timeLimit":1,"memoryLimit":4,"difficulty":null,"cases":1,"multiCases":true,"submits":30,"accepts":7,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.416Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1422,"title":"碱基互补配对问题","content":"#### 题目描述：\n> 在 DNA 或某些 RNA 分子结构中，由于碱基之间的氢键具有固定的数目而且双链之间的距离保持不变，碱基配对必须遵循一定的规律，即：碱基互补配对原则 (the principle of complementary base pairing)\n\n> 例如，在 DNA 双链中，Adenine (A, 腺嘌呤) 一定与 Thymine (T, 胸腺嘧啶) 相互配对，Cytosine (C, 胞嘧啶) 一定与 Guanine (G, 鸟嘌呤) 相互配对。\n\n> 当有一条 DNA 单链与另一条 RNA 单链发生配对时，一定有 DNA 中的 Adenine (A, 腺嘌呤) 与 RNA 中的 Uracil (U, 尿嘧啶) 配对，DNA 中的 Thymine (T, 胸腺嘧啶) 与 RNA 中的 Adenine (A, 腺嘌呤) 配对，Cytosine (C, 胞嘧啶) 与 Guanine (G, 鸟嘌呤) 相互配对。\n\n> 注意，DNA 链中只可能含有 A (腺嘌呤)，T (胸腺嘧啶)，C (胞嘧啶)，G (鸟嘌呤) 四种碱基。RNA 链中只可能含有 A (腺嘌呤)，U (尿嘧啶)，C (胞嘧啶)，G (鸟嘌呤) 四种碱基。\n\n> 现有一条 DNA 模板链与另一条 DNA/RNA 链互补配对。假设成功配对的碱基尽可能的多。问，模板链与另一条链上各有多少个碱基处于游离（即无法配对）的状态。\n\n> 例如，对于下面的 DNA 双链，两条链上分别都有一个游离的碱基：\n\n>     AT CGAAGTT      | 末尾的 T 无法配对\n>     TAAGCTTCA       | 左数第三个 A 无法配对\n\n#### 输入描述：\n> 有多组测试数据，每组测试数据有两行。\n\n> 其中，第一行描述了 DNA 模板链中的碱基排列情况。\n\n> 第二行描述了另一条与模板链配对的 DNA/RNA 链中的碱基排列情况。注意，第二条链要么是 DNA 链，要么是 RNA 链，即该链中不会同时出现 T (胸腺嘧啶) 与 U (尿嘧啶)。\n\n> 此外，输入数据中也不会出现多余的空格、跳格以及除 A, T, C, G, U（全部为大写字母）以外的字符。\n\n#### 输出描述：\n> 对于每组测试数据，输出两行结果。\n\n> 其中，第一行为 DNA 模板链中，无法配对的碱基数目\n\n> 第二行为另一条 DNA/RNA 链中，无法配对的碱基数目\n\n#### 样例输入：\n> ATCGAAGTT\n\n> TAAGCTTCA\n\n#### 样例输出：\n> 1\n\n> 1","source":"倪文卿","timeLimit":1,"memoryLimit":4,"difficulty":null,"cases":1,"multiCases":true,"submits":105,"accepts":8,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.444Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1431,"title":"Ternary string","content":"#### ** Problem **\n> A ternary string is a sequence of digits, where each digit is either 0 or 1.\n\n> Chiaki has a ternary string s which can self-reproduce. Every second, a digit 0 is inserted after every 1 in the string, and finally the first character will disappear.\n\n> For example, \"110\" will become \"0100\" after one second, and become \"1000\" after another second.\n\n> Chiaki would like to know the number of seconds needed until the string become an empty string. As the answer could be very large, she only needs the answer modulo 100000007.\n\n#### ** Input **\n> There are multiple test cases, for each test case:\n\n> The first line contains a ternary string s.\n\n#### ** Output **\n> For each test case, output an integer denoting the answer. If the string never becomes empty, output -1 instead.\n\n#### ** Constraint **\n> • 1 ≤ |s| ≤ 20\n\n> • It is guaranteed that the sum of all |s| does not exceed 200\n\n#### ** Sample Input **\n> 11\n\n> 110\n\n> 011\n\n> 101\n\n#### ** Sample Output **\n> 6\n\n> 7\n\n> 10\n\n> 8","source":"admin","timeLimit":1,"memoryLimit":8,"difficulty":null,"cases":1,"multiCases":true,"submits":12,"accepts":9,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.472Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1438,"title":"Ternary string plus","content":"#### ** Problem **\n> A ternary string is a sequence of digits, where each digit is either 0 or 1.\n\n> Chiaki has a ternary string s which can self-reproduce. Every second, a digit 0 is inserted after every 1 in the string, and finally the first character will disappear.\n\n> For example, \"110\" will become \"0100\" after one second, and become \"1000\" after another second.\n\n> Chiaki would like to know the number of seconds needed until the string become an empty string. As the answer could be very large, she only needs the answer modulo 100000007.\n\n#### ** Input **\n> There are multiple test cases, for each test case:\n\n> The first line contains a ternary string s.\n\n#### ** Output **\n> For each test case, output an integer denoting the answer. If the string never becomes empty, output -1 instead.\n\n#### ** Constraint **\n> • 1 ≤ |s| ≤ 100, 000\n\n> • It is guaranteed that the sum of all |s| does not exceed 1, 000, 000\n\n#### ** Sample Input **\n> 11\n\n> 110\n\n> 011\n\n> 101\n\n#### ** Sample Output **\n> 6\n\n> 7\n\n> 10\n\n> 8","source":"admin","timeLimit":1,"memoryLimit":4,"difficulty":null,"cases":1,"multiCases":true,"submits":12,"accepts":7,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.476Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1439,"title":"背包九讲(1)：简单的0-1背包","content":"#### 题目描述\n> 有一个箱子容量为V（正整数，0＜＝V＜＝20000），同时有n个物品（0＜n＜＝30），每个物品有一定的体积和价值。要求n个物品中，任取若干个装入箱内，在箱子能放得下的前提下，满足箱子内部的价值最大。\n\n#### 输入描述\n> 一个整数v，表示箱子容量\n\n> 一个整数n，表示有n个物品\n\n> 接下来n个整数，分别表示这n 个物品的各自体积和价值\n\n#### 输出描述\n> 一个整数，表示箱子能装下的最大价值。\n\n#### 样例输入\n\n> 3\n\n> 2\n\n> 2 100\n\n> 4 200\n\n#### 样例输出\n\n> 100\n\n#### 样例解释\n\n> 输入：\n\n> 3 //箱子的总的容量为3\n\n> 2 //一共有两个物品\n\n> 2 100 //第一个物品的体积为2价值为100\n\n> 4 200 //第二个物品的体积为4价值为200\n\n> 输出:\n\n> 100\n\n> 在箱子能装下的前提下，应该选择第1个物品，最大的价值为100","source":"20131344022","timeLimit":1,"memoryLimit":64,"difficulty":null,"cases":1,"multiCases":true,"submits":115,"accepts":44,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.480Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1440,"title":"背包九讲(2)：0-1背包的空间优化","content":"#### 题目描述\n> 有一个箱子容量为 V （正整数，0 &le; V &le; 10000），同时有 n 个物品（0 ＜ n &le; **20000**），每个物品有一定的体积和价值。要求 n 个物品中，任取若干个装入箱内，在箱子能放得下的前提下，满足箱子内部的价值最大。\n\n#### 输入描述\n> 一个整数 v，表示箱子容量\n\n> 一个整数 n，表示有 n 个物品\n\n> 接下来 n 个整数，分别表示这 n 个物品的各自体积和价值\n\n#### 输出描述\n> 一个整数，表示箱子能装下的最大价值。\n\n#### 样例输入\n> 3\n\n> 2\n\n> 2 100\n\n> 4 200\n\n#### 样例输出\n> 100\n\n#### 样例解释\n> 输入：\n\n> 3 //箱子的总的容量为 3\n\n> 2 //一共有两个物品\n\n> 2 100 //第一个物品的体积为 2 价值为 100\n\n> 4 200 //第二个物品的体积为 4 价值为 200\n\n> 输出:\n\n> 100\n\n> 在箱子能装下的前提下，应该选择第 1 个物品，最大的价值为 100","source":"admin","timeLimit":1,"memoryLimit":4,"difficulty":null,"cases":1,"multiCases":true,"submits":129,"accepts":23,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.560Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1453,"title":"Easy h-index","content":"### [2018 江苏省大学生程序设计大赛]\n### A. Easy h-index\n>\n#### ** Problem **\n> The h-index of an author is the largest h where he has at least h papers with citations not less than h.\n\n> Bobo has published many papers. Given a0, a1, a2, ..., an which means Bobo has published ai papers with citations exactly i, ﬁnd the h-index of Bobo.\n\n#### ** Input **\n> The input consists of several test cases and is terminated by end-of-ﬁle.\n\n> The ﬁrst line of each test case contains an integer n. The second line contains (n + 1) integers a0, a1, ..., an.\n\n#### ** Output **\n> For each test case, print an integer which denotes the result.\n\n#### ** Constraint **\n> • 1 ≤ n ≤ 2·10⁵\n\n> • 0 ≤ ai ≤ 10⁹\n\n> • The sum of n does not exceed 250,000.\n\n#### ** Sample Input **\n> 1\n\n> 1 2\n\n> 2\n\n> 1 2 3\n\n> 3\n\n> 0 0 0 0\n\n#### ** Sample Output **\n> 1\n\n> 2\n\n> 0","source":"admin","timeLimit":1,"memoryLimit":4,"difficulty":null,"cases":1,"multiCases":true,"submits":29,"accepts":13,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.567Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1454,"title":"Higher h-index","content":"### [2018 江苏省大学生程序设计大赛]\n### B. Higher h-index\n>\n#### ** Problem **\n> The h-index of an author is the largest h where he has at least h papers with citations not less than h.\n\n> Bobo has no papers and he is going to publish some subsequently. If he works on a paper for x hours, the paper will get (a·x) citations, where a is a known constant. It’s clear that x should be a positive integer. There is also a trick – one can cite his own papers published earlier.\n\n> Given Bobo has n working hours, ﬁnd the maximum h-index of him.\n\n#### ** Input **\n> The input consists of several test cases and is terminated by end-of-ﬁle.\n\n> Each test case contains two integers n and a.\n\n#### ** Output **\n> For each test case, print an integer which denotes the maximum h-index.\n\n#### ** Constraint **\n> • 1 ≤ n ≤ 2·10⁹\n\n> • 0 ≤ a ≤ n\n\n> • The number of test cases does not exceed 10⁴.\n\n#### ** Sample Input **\n> 3 0\n\n> 3 1\n\n> 1000000000 1000000000\n\n#### ** Sample Output **\n> 1\n\n> 2\n\n> 1000000000\n\n#### ** Note **\n> For the ﬁrst sample, Bobo can work 3 papers for 1 hour each. With the trick mentioned, he will get papers with citations 2,1,0. Thus, his h-index is 1.\n\n> For the second sample, Bobo can work 2 papers for 1 and 2 hours respectively. He will get papers with citations 1 + 1, 2 + 0. Thus, his h-index is 2.","source":"admin","timeLimit":1,"memoryLimit":4,"difficulty":null,"cases":1,"multiCases":true,"submits":12,"accepts":11,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.586Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1455,"title":"Just h-index","content":"### [2018 江苏省大学生程序设计大赛]\n### C. Just h-index\n>\n#### ** Problem **\n> The h-index of an author is the largest h where he has at least h papers with citations not less than h.\n\n> Bobo has published n papers with citations a(1), a(2), ..., a(n) respectively. One day, he raises q questions. The i-th question is described by two integers l(i) and r(i), asking the h-index of Bobo if has only published papers with citations a(l(i)), a(l(i) + 1), ..., a(r(i)).\n\n#### ** Input **\n> The input consists of several test cases and is terminated by end-of-ﬁle.\n\n> The ﬁrst line of each test case contains two integers n and q. The second line contains n integers a(1), a(2), ..., a(n). The i-th of last q lines contains two integers l(i) and r(i).\n\n#### ** Output **\n> For each question, print an integer which denotes the answer.\n\n#### ** Constraint **\n> • 1 ≤ n, q ≤ 10⁵\n\n> • 1 ≤ a(i) ≤ n\n\n> • 1 ≤ l(i) ≤ r(i) ≤ n\n\n> • The sum of n does not exceed 250,000.\n\n> • The sum of q does not exceed 250,000.\n\n#### ** Sample Input **\n>     5 3\n>     1 5 3 2 1\n>     1 3\n>     2 4\n>     1 5\n>     5 1\n>     1 2 3 4 5\n>     1 5\n\n#### ** Sample Output **\n> 2\n\n> 2\n\n> 2\n\n> 3","source":"admin","timeLimit":1,"memoryLimit":128,"difficulty":null,"cases":1,"multiCases":true,"submits":9,"accepts":1,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.594Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1456,"title":"Circular Coloring","content":"### [2018 江苏省大学生程序设计大赛]\n### D. Circular Coloring\n>\n#### ** Problem **\n> Bobo considers (n + m) balls arranged in a circle. The balls are numbered with 0, 1, ..., (n + m − 1) where the ball i and the ball (i + 1) mod (n + m) are adjacent.\n\n> Bobo would like to color n of his balls black and m of his balls white. Bobo groups adjacent balls with same colors, and he determines the weight of the coloring as the product of the lengths of groups.\n\n> He would like to know the sum of the weight of the possible colorings, modulo (109 + 7).\n\n#### ** Input **\n> The input consists of several test cases and is terminated by end-of-ﬁle.\n\n> Each test case contains two integers n and m.\n\n#### ** Output **\n> For each test case, print an integer which denotes the result.\n\n#### ** Constraint **\n> • 1 ≤ n, m ≤ 5000\n\n> • The number of test cases does not exceed 5000.\n\n#### ** Sample Input **\n> 1 2\n\n> 2 3\n\n> 5000 5000\n\n#### ** Sample Output **\n> 6\n\n> 40\n\n> 975597525\n\n#### ** Note **\n> For the second sample, there are 10 possible colorings (listed below). The number followed is the corresponding weight.\n\n>     • BBWWW (6)\n>     • BWBWW (2)\n>     • BWWBW (2)\n>     • BWWWB (6)\n>     • WBBWW (6)\n>     • WBWBW (2)\n>     • WBWWB (2)\n>     • WWBBW (6)\n>     • WWBWB (2)\n>     • WWWBB (6)","source":"admin","timeLimit":2,"memoryLimit":128,"difficulty":null,"cases":1,"multiCases":true,"submits":4,"accepts":2,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.605Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1459,"title":"String Transformation","content":"### [2018 江苏省大学生程序设计大赛]\n### G. String Transformation (测试数据范围有扩大)\n>\n#### ** Problem **\n> Bobo has a string S = s1 s2 ... sn consists of letter a, b and c. He can transform the string by inserting or deleting substrings aa, bb and abab.\n\n> Formally, A = u ◦ w ◦ v (“◦” denotes string concatenation) can be transformed into A' = u ◦ v and vice versa where u, v are (possibly empty) strings and w ∈ {aa, bb, abab}.\n\n> Given the target string T = t1 t2 ... tm, determine if Bobo can transform the string S into T.\n\n#### ** Input **\n> The input consists of several test cases and is terminated by end-of-ﬁle.\n\n> The ﬁrst line of each test case contains a string s1 s2 ... sn. The second line contains a string t1 t2 ... tm.\n\n#### ** Output **\n> For each test case, print Yes if Bobo can. Print No otherwise.\n\n#### ** Constraint **\n> • for at least 15000 test cases, 1 ≤ n, m ≤ 10\n\n> • for at least 50 test cases, 1,000 ≤ n, m ≤ 5,000\n\n> • for at least 20 test cases, 10,000 ≤ n, m ≤ 15,000\n\n> • for at least 5 test cases, 7·10⁵ ≤ n, m ≤ 8·10⁵\n\n> • s1, s2, ..., sn, t1, t2, ..., tm ∈ {a, b, c}\n\n#### ** Sample Input **\n>     ab\n>     ba\n>     ac\n>     ca\n>     a\n>     ab\n\n#### ** Sample Output **\n> Yes\n\n> No\n\n> No\n\n#### ** Constraint of original edition ** (省赛原题测试数据规模，非 TSOJ 此题的数据规模，下列数据 ** 仅供参考 **)\n> • for all test cases, 1 ≤ n, m ≤ 10⁴\n\n> • s1, s2, ..., sn, t1, t2, ..., tm ∈ {a, b, c}\n\n> • The sum of n and m does not exceed 250,000.","source":"admin","timeLimit":1,"memoryLimit":4,"difficulty":null,"cases":1,"multiCases":true,"submits":13,"accepts":3,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.620Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1463,"title":"2018","content":"### [2018 江苏省大学生程序设计大赛]\n### K. 2018 (测试数据范围有扩大)\n>\n#### ** Problem **\n> Given a, b, c, d, ﬁnd out the number of pairs of integers (x, y) where a ≤ x ≤ b, c ≤ y ≤ d and x·y is a multiple of 2018.\n\n#### ** Input **\n> The input consists of several test cases and is terminated by end-of-ﬁle.\n\n> Each test case contains four integers a, b, c, d.\n\n#### ** Output **\n> For each test case, print an integer which denotes the result.\n\n#### ** Constraint **\n> • Qing Jiang felt that the original edition of the test cases is too easy, so he enlarged the scope of data. The current edition is:\n\n> • 1 ≤ a ≤ b ≤ 2³¹ - 1, 1 ≤ c ≤ d ≤ 2³¹ - 1\n\n> • The number of tests cases is around at 1·10⁵.\n\n#### ** Sample Input **\n> 1 2 1 2018\n\n> 1 2018 1 2018\n\n> 1 1000000000 1 1000000000\n\n#### ** Sample Output **\n> 3\n\n> 6051\n\n> 1485883320325200\n\n#### ** Constraint of original edition ** (省赛原题测试数据规模，非 TSOJ 此题的数据规模，下列数据 ** 仅供参考 **)\n> • 1 ≤ a ≤ b ≤ 10⁹, 1 ≤ c ≤ d ≤ 10⁹\n\n> • The number of tests cases does not exceed 10⁴.","source":"admin","timeLimit":1,"memoryLimit":4,"difficulty":null,"cases":1,"multiCases":true,"submits":838,"accepts":87,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.752Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1499,"title":"counting","content":"#### ** Problem **\n> Given two integers **a** and **n**, find\n\n> ![formula](/static/pic/1499_formula.png)\n\n> modulo (10⁹ + 7).\n\n#### ** Input **\n> The input consists of several test cases and is terminated by end-of-file. Each test case contains two integers **a** and **n** in one line.\n\n#### ** Output **\n> For each test case, print an integer which denotes the result.\n\n#### ** Constraint **\n> • 1 ≤ **a** ≤ 3·10⁵\n\n> • 1 ≤ **n** ≤ 4000\n\n#### ** Sample Input **\n> 2 2\n\n> 3 4\n\n#### ** Sample Output **\n> 7\n\n> 226","source":"admin","timeLimit":1,"memoryLimit":4,"difficulty":null,"cases":1,"multiCases":true,"submits":16,"accepts":2,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.763Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1501,"title":"集合问题","content":"#### 题目描述\n> 试求 **Card** ( { A | A ⊆ { 1, 2, 3, ..., *n* } 且 **Card** (A) ≠ 0 且 ∀ i, j ∈ A 有 | i - j | ≠ 1 } ) % 10000007, 其中 **Card** (X) 表示集合 X 中元素的个数。\n\n#### 输入描述\n> 有多组测试数据，每组测试数据占一行。\n\n> 每一行包含一个正整数 *n* (1 &le; *n* < 100000) 。\n\n#### 输出描述\n> 对于每组测试数据，输出一行答案。\n\n#### 样例输入\n> 1\n\n> 2\n\n#### 样例输出\n> 1\n\n> 2","source":"admin","timeLimit":1,"memoryLimit":16,"difficulty":null,"cases":1,"multiCases":true,"submits":33,"accepts":16,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.776Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1508,"title":"最高频率元素（基础版）","content":"#### 题目描述\n> 定义：对于整数序列A，若整数a∈A，且出现的次数最多，则称a是A的最高频率元素。\n\n> 现在，给定一个包含L个整数的序列A，并且存在一个整数X，它出现的次数大于L/2，因此X是最高频率元素，且唯一。请找出元素X。\n\n\n#### 输入描述\n> 多组输入，每组输入的第一行为序列A内整数的个数n(0<n<1000)，第二行为序列A，包含n个整数，每个整数间用空格分隔。\n\n#### 输出描述\n> 对于每一组测试数据，输出最高频率元素X。\n\n#### 样例输入\n> 5\n\n> 1 2 1 1 2\n\n> 6\n\n> 3 1 3 1 3 3\n\n#### 样例输出\n> 1\n\n> 3\n","source":"admin","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":1,"multiCases":true,"submits":49,"accepts":37,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.779Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1509,"title":"超级幂","content":"#### 题目描述\n> 输入两个数 a, b，其中 b 极大。计算 a 的 b 次方对 1337 取模的结果。数据保证 a 在 int 范围内，b 小于 100 位。\n\n#### 输入描述\n> 每个样例输入两行分别表示 a 和 b。\n\n#### 输出描述\n> 每个样例输出一行表示：a 的 b 次方对 1337 取模的结果。\n\n#### 样例输入\n> 2\n\n> 3\n\n#### 样例输出\n> 8","source":"20131344022","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":1,"multiCases":true,"submits":18,"accepts":2,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.783Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1510,"title":"The k closest elements","content":"#### ** Problem **\n> Given a sorted array, two integers k and x, find the k closest elements to x in the array. The result should also be sorted in ascending order. If there is a tie, the smaller elements are always preferred.\n\n#### ** Input **\n> The input consists of several test cases and is terminated by end-of-ﬁle.\n\n> The ﬁrst line of each test case contains an integer n, represents that there will be an array of n integers in the next line.\n\n> The third line contains two integers k and x.\n\n#### ** Output **\n> The k closest elements to x divided by space in the array. The smaller elements are always preferred if there is a tie.\n\n#### ** Sample Input **\n> 5\n\n> 1 2 3 4 5\n\n> 4 3\n\n#### ** Sample Output **\n> 1 2 3 4","source":"20131344022","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":1,"multiCases":true,"submits":32,"accepts":2,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.787Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1511,"title":"发糖果","content":"#### 题目描述\n> 每次考完试之后，幼儿园决定给所有的小朋友发糖果，每个小朋友获得的糖果的数量取决于他们的考试的分数。所有的小朋友会站成一排，如果某个小朋友考试的分数高于他相邻的同学，那么他得到的糖果数目也需要多余他相邻的同学。当然，为了鼓励所有的小朋友努力学习，每个人至少得到一个糖果。问，幼儿园至少要准备多少糖果。\n\n#### 输入描述\n> 输入数据一共两行，一行表示小朋友的数量n，第二行依次输入每个小朋友的考试得分\n\n#### 输出描述\n> 幼儿园至少要准备的糖果的数量\n\n#### 样例输入\n> 3\n\n> 1 0 2\n\n\n#### 样例输出\n> 5\n\n### 样例解释\n\n每个小朋友依次获得 2 1 2 个糖果，所以一共是5个。","source":"20131344022","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":1,"multiCases":true,"submits":24,"accepts":4,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.792Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1512,"title":"买卖股票","content":"#### 题目描述\n> 股票有涨有跌，人们都希望底价买进，高价卖出，这样可以从中盈利。给出n天的股价，计算可以从中获得的最大利润。规定买入后必须先卖出才可以继续买入，并且在卖出股票的过程中需要支付手续费。\n\n#### 输入描述\n> 第一行输出n，表示给出股价的天数\n\n> 第二行n个数，分别表示n天的股票价格\n\n> 第三行表示手续费\n#### 输出描述\n> 可以获得最大利润\n\n#### 样例输入\n> 6\n\n> 1 3 2 8 4 9\n\n> 2\n\n#### 样例输出\n\n> 8\n\n#### 样例解释\n\n在第一天以1的价格买入，然后第四天以8的价格卖出，盈利(8-1-2) = 5\n\n在第五天以4的价格买入，然后第六天以9的价格卖出，盈利(9-4-2) = 3\n\n一共最大收入为(5 + 3) = 8\n\n数据保证在int范围内，并且n <= 50000","source":"20131344022","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":1,"multiCases":true,"submits":14,"accepts":3,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.796Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1513,"title":"抖动序列","content":"#### 题目描述\n> 给定一个数组，如果相邻数的差值正负交替，我们把这种序列称之为抖动序列。例如[1,7,4,9,2,5]就是抖动序列,[1,2,2]就不是抖动序列。给定一个序列，输出最长抖动子序列的长度。\n\n#### 输入描述\n> 第一行输入数组的长度n\n\n> 第二行输入数组的n个数\n\n#### 输出描述\n> 最长抖动子序列的长度\n\n#### 样例输入\n> 6\n\n> 1 7 4 9 2 5\n\n#### 样例输出\n> 6\n","source":"20131344022","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":1,"multiCases":true,"submits":18,"accepts":7,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.865Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1534,"title":"吃东西","content":"#### 题目描述\n> zzy是个糕点迷，自从去年尝到了重阳糕，就一直心心念念地想着快点到重阳节，把这美味吃个够。然而在zzy所在的Mogician国，为了发扬重阳节尊老爱幼的美德，只有在重阳节这天做好事来计算出zzy的认可度，才可以向重阳神求得一张进入重阳糕饼屋的入场券。只要有了这张入场券，zzy就可以随便吃多少的重阳糕了。\n\n>zzy需要去帮助老人和小朋友并且将最后的合影或者视频传到当天的社区网站上，网站会根据此合影或者视频的内容评估出一个真实度a（0<=a<=1）和网友的点赞个数b(b>=0)来计算出zzy的认可程度S=100*a+b，但是如果你作弊的话（存在摆拍行为），一旦系统查出，内容真实度将降为0，你的认可程度S就会变为0。只要zzy可以计算出每一个作品的认可程度S，我们的zzy就可以得到入场券。但是zzy今天不知不觉拍了太多的视频和照片了，她希望得到你的帮助。现在zzy已经完成了n个视频或者照片了，并且当前每个作品的真实度和点赞个数已经统计完成了,zzy特别渴望吃到重阳糕，请你快点帮zzy计算一下吧！ \n\n#### 输入描述\n>  两个数a和b，表示每个作品的真实度a,是一个浮点数，b为当前点赞程度，用整数表示。\n\n#### 输出描述\n> 输出一个整数S，表示作品的认可程度S\n\n#### 样例输入\n> 0.1\t88\n\n#### 样例输出\n\n> 98","source":"20171341065","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":1,"multiCases":true,"submits":25,"accepts":24,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.868Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1535,"title":"翻转字符串","content":"#### 题目描述\n> 给定一个无重复字符的字符串s和这个字符串中的两个字符s[i]，s[j], 输出翻转s[i]~s[j]后的字符串。\n\n#### 输入描述\n> 第一行一个整数T，代表测试数据组数。\n\t之后每组的第一行输入一个字符串s，不包含空格，3<=lenth(s)<=500。\n\t第二行输入两个字符```s[i]，s[j]``` \n>  (0<=i<j<=lenth(s)-1)。\n\n#### 输出描述\n> 一行，输出所得字符串。(每组输出之间需要换行，末尾不需要多余空格）\n\n#### 样例输入\n> 2\n\n> abcde \n\n> b d\n\n> 123ABCdef \n\n> 2 d \n\n#### 样例输出\n> adcbe\n\n> 1dCBA32ef","source":"20171341065","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":1,"multiCases":true,"submits":18,"accepts":13,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.872Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1536,"title":"坏人与负鼠","content":"#### 题目描述\n> 众所周知，坏人不是什么好人，所以一旦两个坏人遇到一起，就不会发生什么好事。\n\n>这一天，坏人A和坏人B遇到了一起，他们两人身上各自带有一些负鼠（一种擅长装死的动物）。\n\n>他们决定举行一场比赛，这是一个回合制的比赛：\n\n>第一回合，A扔掉 1 只负鼠；\n\n>第二回合，B扔掉 2 只负鼠；\n\n>第三回合，A扔掉 3 只负鼠；\n\n>................................\n\n>依此类推，在第n回合，对应的坏人扔掉n只负鼠。\n\n>在比赛前，他们约定：如果轮到某一个人的回合时，他身上带的负鼠不够扔，那么就判定他输。\n\n>\n聪明的你已经知道了他们各自身上带有多少负鼠，其中A带了a只，B带了b只，请你帮他们算一算，谁会赢得这场比赛。\n#### 输入描述\n> 第一行输入T，表示有T组测试数据。\n\n> 接下来T行每行有两个整数a和b(1<=a,b<=1e9)\n\n#### 输出描述\n> 总共输出T行，每行输出输者的名字。（注意：行末不要有多余空格，输出后要换行）\n\n#### 样例输入\n> 2\n\n> 1 1\n\n> 7 6\n\n#### 样例输出\n> B\n\n> A","source":"20171341065","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":1,"multiCases":true,"submits":15,"accepts":9,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.876Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1537,"title":"爬楼梯","content":"#### 题目描述\n> Mr.muddle今天做梦了，他梦见他的女朋友被大魔王掳走了（确实是梦，怎么可能有女朋友）\n\n> 他要上魔王塔和魔王挑战，但是他一次只能走一步或者两步(必须走最后一级台阶, 不一定要走第一级台阶)，而且大魔王在每一级台阶设置了具有不同伤害的陷阱。\n\n>他想要保存最大得生命值和大魔王战斗（当然也可能不到塔顶就嗝屁了）。\n\n#### 输入描述\n> 第一行一个整型数字T(1<=T<=10),表示测试数据的组数。\n\n> 接下来3*T行。\n\n> 第一行为一个整型m(1<=m<=1000000000),表示Mr.muddle一共有多少生命值。\n\n>第二行为n(3<=n<=100000),表示一共有n级台阶。\n\n>第三行有n个数字ai(0<=ai<=1000000000, 1<=i<=n),表示每级台阶可以对Mr.muddle造成的伤害。\n\n#### 输出描述\n> 一行,一个整数,表示Mr.muddle要爬上魔王塔最多还剩多少生命值(如果生命值非正,则输出\"Can't get the top!\",不要输出双引号)。\n\n> 每组输出结束之后需要换行\n\n#### 样例输入\n> 3\n\n> 31\n\n> 3\n\n> 10 15 20\n\n>10\n\n>10 \n\n>1 100 1 1 1 100 1 1 100 1\n\n>5\n\n>5\n\n>10 5 2 8 1\n\n#### 样例输出\n> 1\n\n> 4\n\n> Can't get the top!","source":"20171341065","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":1,"multiCases":true,"submits":26,"accepts":12,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.891Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1538,"title":"Mr.muddle的历险","content":"#### 题目描述\n> Mr.muddle这一次要英雄救美了，他已经知道了他女朋友被关押的地方位于迷宫的顶点(迷宫的长宽高分别为 ex,ey,ez)(他肯定在做梦，因为女朋友是不可能有的\n> 这辈子都不可能有的)这是一个第一象限的三维迷宫，他现在处在(0,0,0)的位置，除了迷宫边界，其他的每个地方都 可以向上，向下，向左，向右，向前，向后。他需要知道到女朋友被关押的地方最少步数，如果根本就无法抵达，就 输出Impossible(梦也该醒了)\n> 例：从(0,0,0)到(0,0,1)记作1步。\n> (0<ex,ey,ez<=100)\n\n#### 输入描述\n>  第一行一个整数T(1<=T<=10)，代表测试数据组数。\n>每组测试数据：\n>  第一行是四个整数，N，ex，ey，ez。N代表障碍数，ex，ey，ez代表迷宫的长，宽，高也是关押地点(ex,ey,ez)\n>  接下来的N行，每行三个整数x，y，z，代表(x,y,z)处有障碍物，无法前行。\n\n#### 输出描述\n> 每组测试数据输出最少步数或者\"Impossible\"(双引号不输出，记得输出后换行)。\n\n#### 样例输入\n\n>     2\n>     3 3 3 3\n>     1 0 0\n>     0 1 0\n>     0 0 1\n>     13 2 3 2\n>     0 0 1\n>     0 1 1\n>     0 2 1\n>     1 0 1\n>     1 1 1\n>     1 2 1\n>     1 3 1\n>     2 0 1\n>     2 1 1\n>     2 2 1\n>     2 3 1\n>     0 2 0\n>     1 2 0\n\n#### 样例输出\n\n>Impossible\n\n>11","source":"20171393124","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":1,"multiCases":true,"submits":4,"accepts":3,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.896Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1539,"title":"syf的难题","content":"#### 题目描述\n>有一天，syf从他的好朋友那发现了这样一个方程：\n\n![图片描述](/static/pic/2018-10-19 20:34:53TIM图片20181019203323.png)\n\n>c和z是给定的正整数。\n\n>现在syf想求出有多少组(a,x,b,y)，使得解满足上述条件。\n\n>其中1≤ a,b ≤ m, 0 ≤ x,y ≤ m。\n\n#### 输入描述\n>第一行输入一个整数T，表示有T组测试数据。\n\n>接下来每行输入三个正整数c,z和m。\t\n\n>其中1 ≤ c, m ≤ 10^5,0 ≤ z ≤ 10^5\n\n#### 输出描述\n>对于每组测试，在同一行输出”Case: #x: y”，其中x表示这是第x组测试数据，y表示有多少组解法。\n\n#### 样例输入\n>2\n\n>2 2 3\n\n>6 2 36\n\n#### 样例输出\n>Case #1: 13\n\n>Case #2: 301","source":"20171393124","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":1,"multiCases":true,"submits":2,"accepts":1,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.900Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1540,"title":"不同的数","content":"#### 题目描述\n> 给定一个数字n，然后给出n个正整数a1, a2, ..., an，以及m个询问，每次询问包含l和r两个数，要求出a1, a2, ..., al, ar, ar + 1, ..., an中不同的数的个数。\n\n#### 输入描述\n>首先输入一个数字T，表示有T组测试数据。\n\n>接下来一行包含两个正整数，n和m(1 ≤ n, m ≤ 10^5)\n\n>下一行输入n个正整数a1, a2, ..., an（1 ≤ ai ≤ n）\n\n>接下来m行，每行输入两个正整数l和r（1 ≤ l, r ≤ n）\n\n#### 输出描述\n>对于每组测试，输出1个正整数，表明每个询问的答案。\n\n>（注意：输出每次询问后都需要换行）\n\n#### 样例输入\n>2\n\n>3 2\n\n>1 2 1\n\n>1 2\n\n>1 3\n\n>4 1\n\n>1 2 3 4\n\n>1 3\n\n#### 样例输出\n>2\n\n>1\n\n>3","source":"20171393124","timeLimit":1,"memoryLimit":64,"difficulty":null,"cases":1,"multiCases":true,"submits":13,"accepts":4,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.904Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1541,"title":"计算机的本质","content":"#### 题目描述\n>苦逼运维修好学校的土豆服务器，复读终止；\n\n>但一位恶人及时地将服务器下锅，开始复读。\n\n>\n\n>现在服务器输出了n (1<=n<=200000) 个数，需要求出其中出现次数最多的那个数 x。\n\n>其中x出现的次数 c > n / 2， 非常符合复读机本质。\n\n>由于服务器已经下锅，运行混乱，对于任意输出的数u,  0<=u<=10^100。\n\n#### 输入描述\n\n>第1行一个整数n。\n\n>第2行n个整数，代表输出的整数。\n\n>本题只有一组测试数据。\n\n#### 输出描述\n>一个整数x。\n\n#### 样例输入\n>10\n\n>6 6 6 7 7 7 7 7 7 7\n#### 样例输出\n>7\n\n>","source":"20171393124","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":1,"multiCases":true,"submits":25,"accepts":8,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.911Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1543,"title":"采摘水果","content":"#### 题目描述\n> 给定数组tree，tree[i]表示当前水果的类型。你可以从数组的任意一点开始依次做操作：\n\n> 1.将当前水果放入你的篮子内，如果无法放入则结束\n\n> 2.如果可以放入，向右移动，如果数组已经到了末尾则结束\n\n> 给你两个篮子，每个篮子只能装同样类型的水果，容量不限制。你可以依次循环做操作1和操作2，问最多能采摘多少水果\n\n#### 输入描述\n> 第一行输入n，表示数组的长度，第二行n个数表示tree[i],0<i<n, 1<=n<=1e4;\n\n#### 输出描述\n> 最多可以采摘多少水果\n\n#### 样例输入\n> 11\n\n> 3 3 3 1 2 1 1 2 3 3 4\n\n#### 样例输出\n> 5\n\n#### 样例解释\n> 你可以采摘1 2 1 1 2，一共5个水果","source":"20131344022","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":1,"multiCases":true,"submits":19,"accepts":6,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.916Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1545,"title":"柱状图中的最大长方体","content":"#### 题目描述\n> 给定一个柱状图，计算其中最大的长方体\n\n#### 输入描述\n> 第一行输入直方图中柱状体的数量n(n<100000)，第二行到第n+1行输入每个柱状体的高度\n\n#### 输出描述\n> 计算其中最大的长方体\n\n#### 样例输入\n> 6\n\n> 2 1 5 6 2 3\n\n#### 样例输出\n> 10\n\n#### 样例解释\n按照样例的输入，柱状图如下：\n\n![图片描述](/static/pic/2018-11-03 18:24:25histogram.png)\n\n最大的长方体如下：\n\n![图片描述](/static/pic/2018-11-03 18:29:39histogram_area.png)","source":"20131344022","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":1,"multiCases":true,"submits":23,"accepts":4,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.927Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1547,"title":"二叉搜索树的数量","content":"#### 题目描述\n> 给定1,2...n根据输入的顺序不同，可以构成不同的二叉搜索树，输入n，输出不重复的二叉搜索树的数量。结果保证在int范围内。例如，输入3可以生成5种不同的二叉搜索树。\n\n#### 输入描述\n> 输入n\n\n#### 输出描述\n> 输出可以组成的不重复的二叉树的数量\n\n#### 样例输入\n> 3\n\n#### 样例输出\n> 5","source":"20131344022","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":1,"multiCases":true,"submits":6,"accepts":3,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.932Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1549,"title":"竹鼠的命运","content":"### [2018 NUIST 程序设计竞赛]\n### A. 竹鼠的命运\n>\n#### 题目描述\n> 农华兄弟最近开始做直播，竹鼠们开始瑟瑟发抖，但它们除了吃和睡，其它什么都做不了。农华兄弟突发奇想，如果某只竹鼠最多一次**连续**吃东西的时间超过最多一次**连续**睡觉的时间，那么它就会被做成宽油竹鼠（宽油：使用很大量的油的烹饪方法）；如果次数相等则会被做成叫花竹鼠（叫花：用粘土把食材包裹起来，加以烧烤的烹饪方法）；如果其最多一次**连续**吃东西的时间少于最多一次**连续**睡觉的时间，它就会被做成烧烤竹鼠。现在请你帮农华兄弟决定竹鼠们的命运。\n\n#### 输入描述\n> 题目包含多组测试数据。第一行包括一个正整数 T，代表测试数据的组数（竹鼠的数量）。\n\n> 接下来的 T 行，每行包含一个数字序列，代表一只竹鼠的行为。第一个数字 n 表示竹鼠吃和睡的总时间（1 &le; n &le; 100）。数字序列由 1 和 2 组成。1 代表竹鼠吃了一段时间的东西，2 代表竹鼠睡了一段时间的觉。每个数字表示的吃或睡的时间长度相等。\n\n#### 输出描述\n> 对于每一组测试数据，输出一行字符序列。\"kuanyou\" 表示竹鼠被做成了宽油竹鼠；\"jiaohua\" 表示做成了叫花竹鼠；\"bbq\" 表示做成了烧烤竹鼠。\n\n#### 样例输入\n> 1\n\n> 8 2 2 1 1 2 1 1 1\n\n#### 样例输出\n> kuanyou\n\n#### 样例解析\n> 由于竹鼠最多一次连续吃东西的时间为 3 (\"1 1 1\")，最多一次连续睡觉的时间为 2 (\"2 2\")，所以它会被做成宽油竹鼠。","source":"admin","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":1,"multiCases":true,"submits":44,"accepts":20,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.935Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1550,"title":"竹鼠的时间","content":"### [2018 NUIST 程序设计竞赛]\n### B. 竹鼠的时间\n>\n#### 题目描述\n> 一天有 24 个小时，一小时有 60 分钟，23:59 加 1 分钟不是 24:00，而是回到了原点 00:00。刚刚被农华兄弟抓到养殖场的可怜的竹鼠们非常惊恐，它们急于知道“现在”的时刻，但它们只知道自己被抓时是几点，以及它们从被抓到现在已经经过了多长时间。你能帮竹鼠们计算一下“现在”的时刻吗？\n\n#### 输入描述\n> 题目包含多组测试数据。第一行包括一个正整数 T，代表测试数据的组数。\n\n> 接下来的输入，对于每组测试数据：\n\n> 第 1 行表示竹鼠们记得的自己被抓的时刻，如 00:00；第 2 行表示竹鼠被抓到现在经过的时间，如 00:01。第 1 行和第 2 行的时间均介于 00:00（含）和 24:00（不含）之间。\n\n#### 输出描述\n> 对于每一组测试数据，输出一行“现在”的时刻，用 xx:xx 的格式表示，请使用半角的冒号。\n\n#### 样例输入\n> 2\n\n> 00:00\n\n> 00:01\n\n> 23:59\n\n> 00:01\n\n#### 样例输出\n> 00:01\n\n> 00:00","source":"admin","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":1,"multiCases":true,"submits":19,"accepts":18,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.939Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1551,"title":"三角魔法阵","content":"### [2018 NUIST 程序设计竞赛]\n### C. 三角魔法阵\n>\n#### 题目描述\n> 你是一个魔法师，身处一个坐标平面内，在坐标点上有 n 个不同的魔法石，每个坐标点上最多有一个魔法石。选择 3 个魔法石构成一个三角形魔法阵，就可以获取一种魔法元素。\n使用不同的魔法石组合成的魔法阵，获取的魔法元素是不同的。你最多可以获取多少种不同的魔法元素？（忽略魔法石组合的顺序）\n\n#### 输入描述\n> 题目包含多组测试数据。第一行包括一个正整数 T，代表测试数据的组数。\n\n> 接下来的输入，对于每组测试数据：\n\n> 第 1 行包含一个正整数 n，表示平面上有 n 块魔法石（0 < n &le; 100)。\n\n> 第 2 行到第 n + 1 行，每行有两个整数，表示这块魔法石的 x 坐标和 y 坐标。（所有坐标的绝对值小于等于 100）\n\n#### 输出描述\n> 对于每组测试数据，输出一个整数，表示最多能获取的魔法元素种数。\n\n#### 样例输入\n>     2\n>     4\n>     0 0\n>     0 1\n>     1 0\n>     1 1\n>     4\n>     -1 -1\n>     0 0\n>     1 1\n>     -1 1\n\n#### 样例输出\n> 4\n\n> 3","source":"admin","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":1,"multiCases":true,"submits":38,"accepts":19,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.943Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1552,"title":"满减优惠券","content":"### [2018 NUIST 程序设计竞赛]\n### D. 满减优惠券\n>\n#### 题目描述\n> 每天我们都会思考一个令人纠结的难题：晚上吃什么。你打开手机想点个外卖，发现自己有一张满减优惠券快要过期了。\n\n> 你选择了一家餐厅，这家餐厅一共有 N 道菜品，价格分别是 A1, A2, ... , AN 元。只要消费满 X 元，就可以用掉这张优惠券。\n\n> 你希望选择若干道 **不同** 的菜品，使得总价在不低于 X 元的同时尽量低。\n\n> 为了用掉这张优惠券，你最少需要消费多少元？\n\n#### 输入描述\n> 题目包含多组测试数据。第一行包括一个正整数 T，代表测试数据的组数。\n\n> 接下来的输入，对于每组测试数据：\n\n> 第一行包含两个整数 N 和 X (1 &le; N &le; 20, 1 &le; X &le; 100)\n\n> 第二行包含 N 个整数 A1, A2, ... , AN (1 &le; Ai &le; 100)\n\n#### 输出描述\n> 对于每组测试数据，输出最少的消费。如果你把 N 道菜都买了还不能达到 X 元的优惠标准，输出 -1。\n\n#### 样例输入\n> 2\n\n> 10 50\n\n> 9 9 9 9 9 9 9 9 9 8\n\n> 3 30\n\n> 9 9 9\n\n#### 样例输出\n> 53\n\n> -1","source":"admin","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":1,"multiCases":true,"submits":49,"accepts":13,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.947Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1553,"title":"抑郁的竹鼠","content":"### [2018 NUIST 程序设计竞赛]\n### E. 抑郁的竹鼠\n>\n#### 题目描述\n> 一只竹鼠正处在由 N × M 个房间组成的矩阵迷宫中，它需要尽快逃出去，否则可能会变得抑郁，然后被农华兄弟吃掉。\n\n> 为了描述方便，我们把左上角的房间的坐标定为 (0, 0)，右下角房间的坐标定为 (N - 1, M - 1)。每个房间可能是 3 种状态之一：开放的、关闭的、或者上锁的。\n\n> 开放房间用 '.' 表示。竹鼠可以随意进入任何一个开放房间。\n\n> 关闭房间用 '#' 表示。竹鼠永远不能进入一个关闭的房间。\n\n> 上锁的房间用大写字母 ('A', 'B', 'C', ...) 表示。在取得相应的钥匙前不能进入上锁的房间，而一旦取得钥匙就可以反复进入上锁的房间。每个房间的锁都是不同的，相应的钥匙在迷宫中的某一房间里，竹鼠进入该房间就可以取得钥匙。一个房间最多只有一把锁，一个房间里最多只有一把钥匙。\n\n> 竹鼠一开始处于一个开放房间，坐标 (a, b)。迷宫的出口是一个开放或者上锁的房间，坐标 (c, d)。假设竹鼠每移动到一个相邻房间（上下左右）需要花费 1 单位的时间，那么这只竹鼠到达出口最少需要花费多少时间？\n\n#### 输入描述\n> 题目包含多组测试数据。第一行包括一个正整数 T，代表测试数据的组数。\n\n> 接下来的输入，对于每组测试数据：\n\n> 第 1 行包含 7 个整数: N, M, K, a, b, c, d。其中 N, M 是矩阵的行列数；K 是上锁的房间数目，(a, b) 是起始位置，(c, d) 是出口位置。(1 &le; N, M &le; 100; 0 &le; K &le; 5; 0 &le; a, c < N; 0 &le; b, d < M)\n\n> 第 2 行到第 N + 1 行，每行包含 M 个字符，表示迷宫矩阵。\n\n> 第 N + 2 行到第 N + K + 1 行，每行两个整数 x, y，依次表示上锁房间 A, B, C, ... 的钥匙所在房间坐标。(0 &le; x < N, 0 &le; y < M)\n\n#### 输出描述\n> 对于每组输入，输出到达出口的最短时间。如果这只竹鼠永远到达不了出口，输出 -1。\n\n#### 样例输入\n>     2\n>     4 4 2 0 0 0 3\n>     .A.B\n>     .#..\n>     .#..\n>     .#..\n>     3 0\n>     3 3\n>     5 5 3 0 0 0 3\n>     .A.B.\n>     .#...\n>     .#...\n>     .#...\n>     ..#.C\n>     3 0\n>     4 4\n>     4 1\n\n#### 样例输出\n> 15\n\n> 23","source":"admin","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":1,"multiCases":true,"submits":25,"accepts":4,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.968Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1554,"title":"更厉害的数列","content":"### [2018 NUIST 程序设计竞赛]\n### F. 更厉害的数列\n>\n#### 题目描述\n> 我们知道，假设有一个正整数 x，如果我们想要求出 x ^ 11（即 x 的 11 次方）的值，最容易想到的办法就是循环相乘，于是我们很容易就可以写出来下面的伪代码：\n\n>     1 → RES\n>     FOR i FROM 1 TO 11\n>         RES * x → RES\n>     PRINT RES\n\n> 这种方法的时间复杂度是 O(n)。但是，当 n 非常大的时候呢？假如 n 是 10000，我们需要循环 10000 次吗？显然，我们有更好的办法。\n\n> 我们还是来计算 x 的 11 次方。我们将 11 用 2 的指数形式加权来表示，那么`11 = 2³ × 1 + 2² × 0 + 2¹ × 1 + 2⁰ × 1`。你可能已经发现了，2 的指数的权值连起来就是 11 的二进制表示：`1011`。这样，我们要计算的 x ^ 11 就可以转化为`x ^ (2⁰) × x ^ (2¹) × x ^ (2³)`，原来要乘 11 次的方法被我们缩减到了 3 次。\n\n> 但是，`x ^ (2⁰)`, `x ^ (2¹)`, `x ^ (2³)`又怎么能快速地算出呢？观察下面的程序：\n\n>     /** 计算x^n的值 **/\n>     int res = 1;\n>     while(n) {\n>         if (n & 1) {\n>             res *= x;\n>         }\n>         x *= x;\n>         n >>= 1;\n>     }\n\n> 位运算是计算机中非常强大的工具，`x *= x`一句就能在循环中不断地计算出`x ^ (2⁰)`, `x ^ (2¹)`, `x ^ (2²)`, ... 在`n & 1`的判断处，如果 n 的二进制末位是 1，那`res *= x`就会被执行，`x ^ (2 ^ y)` （y 为这个循环执行的次数）就会被乘进结果里，x ^ n 就会被很快计算出来。这个算法的时间复杂度是 O(log(n))。这种算法也被称作快速幂。\n\n> 快速幂算法不仅仅可以用于快速地计算一个数的幂，也可以用于快速地计算矩阵的幂。先看下面的两个定义（如果你知道什么是矩阵、矩阵乘法，那可以跳过）：\n\n> 矩阵的定义：\n\n> ![更厉害的数列_矩阵的定义](/static/pic/2018-11-17 16:52:48QQ截图20181117165155.jpg)\n\n> 矩阵乘法的定义：\n\n> ![更厉害的数列_矩阵乘法的定义](/static/pic/2018-11-17 16:55:33更厉害的数列1-2.png)\n\n> 当我们要计算一个矩阵 A 的幂时，也可以用快速幂算法，只需要把上方计算 x ^ n 的值的代码中`res *= x`和`x *= x`两句替换成矩阵的乘法即可。\n\n> 矩阵快速幂的用处很广泛，其中一项就是求斐波那契数列的第 n 项值。众所周知，斐波那契数列的递推公式为：`f(n) = f(n - 1) + f(n - 2)`。因此，它也可以用矩阵表示。\n\n> ![更厉害的数列_斐波那契数列递推公式的线性代数形式](/static/pic/2018-11-17 17:07:31更厉害的数列1-3.png)\n\n> 现在，设斐波那契数列的函数为 f(n), f(0) = 0, f(1) = 1，你能算出 f(n) 是多少吗？\n\n#### 输入描述\n> 题目包含多组测试数据。第一行包括一个正整数 T，代表测试数据的组数。\n\n> 接下来的输入，每组输入包含一行，每一行有一个正整数 n (0 < n &le; 1,000,000,000)。\n\n#### 输出描述\n> 对于每组测试数据，输出 f(n) 的最后四位数。如果 f(n) 的最后四位数都是 0，输出 0；否则，忽略所有先导 0。（即：输出 f(n) 对 10000 取模）\n\n#### 样例输入\n> 3\n\n> 9\n\n> 999999999\n\n> 1000000000\n\n#### 样例输出\n> 34\n\n> 626\n\n> 6875","source":"admin","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":1,"multiCases":true,"submits":14,"accepts":13,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.972Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1555,"title":"更更厉害的数列","content":"### [2018 NUIST 程序设计竞赛]\n### G. 更更厉害的数列\n>\n#### 题目描述\n> 请参照更厉害的数列中介绍的方法，设数列`f(n) = f(n - 1) + f(n - 2) + 1`，f(1) = f(2) = 1，根据给定的 n，求 f(n)。\n\n#### 输入描述\n> 题目包含多组测试数据。第一行包括一个正整数 T，代表测试数据的组数。\n\n> 接下来的输入，每组输入包含一行，每一行有一个正整数 n (0 < n &le; 1,000,000,000)。\n\n#### 输出描述\n> 对于每组测试数据，输出 f(n) 的最后四位数。如果 f(n) 的最后四位数都是 0，输出 0；否则，忽略所有先导 0。（即：输出 f(n) 对 10000 取模）\n\n#### 样例输入\n> 3\n\n> 9\n\n> 999999999\n\n> 1000000000\n\n#### 样例输出\n> 67\n\n> 1251\n\n> 3749","source":"admin","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":1,"multiCases":true,"submits":12,"accepts":9,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.975Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1556,"title":"最少的交换次数","content":"### [2018 NUIST 程序设计竞赛]\n### H. 最少的交换次数\n>\n#### 题目描述\n> 给定 n 个数字 {a1, a2, ... , an}，你需要把它们按升序排序，你能做的操作只有每次交换任意两个数字的位置。\n\n> 为了排好序，你最少需要做多少次交换？\n\n#### 输入描述\n> 题目包含多组测试数据。第一行包括一个正整数 T，代表测试数据的组数。\n\n> 接下来的输入，对于每组输入：\n\n> 第一行包含一个正整数 n。（1 &le; n &le; 1000）\n\n> 接下来是 n 个数 ai。（1 &le; ai &le; 100）\n\n#### 输出描述\n> 对于每组测试数据，输出一个数字，表示最少需要交换的次数。\n\n#### 样例输入\n> 2\n\n> 9\n\n> 2 2 1 3 3 3 2 3 1\n\n> 5\n\n> 3 3 1 9 7\n\n#### 样例输出\n> 4\n\n> 2","source":"admin","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":1,"multiCases":true,"submits":28,"accepts":5,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.979Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1557,"title":"舒适的座位","content":"### [2018 NUIST 程序设计竞赛]\n### I. 舒适的座位\n>\n#### 题目描述\n> 有 N + 2 个连续的座位，开头和结尾始终有人，所以还有 N 个空座位。现在有 K 个人要陆续的来。新来的人总是会找一个距离两边的人距离最远的座位。假定之前来了的人不会中途离开。\n\n> 具体的讲，设 LS, RS 分别为 一个空座位与左边的人的距离 和 这个空座位与右边的人的距离。这个距离指的是间隔的空座位的个数。选择座位的策略是：\n\n> 1. 找一个座位使得 min(LS, RS) 最大。\n\n> 2. 如果新来的人发现只有一个这样的座位，那就选择这个座位。\n\n> 3. 否则，选择满足条件 1 的，且使得 max(LS, RS) 最大的那个。\n\n> 4. 如果还是有多个选择， 那就选择最左边的。\n\n> 求最后一个人进来时，它选择的座位的 max(LS, RS) 和 min(LS, RS)。\n\n#### 输入描述\n> 题目包含多组测试数据。第一行包括一个正整数T，代表测试数据的组数。\n\n> 接下来的输入，每组输入包含一行两个整数 N, K。(1 &le; K &le; N, 1 &le; N &le; 10^18)\n\n#### 输出描述\n> 对于每组测试数据，输出一行，包含 2 个整数 max(LS, RS) 和 min(LS, RS)，以空格隔开。\n\n#### 样例输入\n> 2\n\n> 5 2\n\n> 10 3\n\n#### 样例输出\n> 1 0\n\n> 2 1","source":"admin","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":1,"multiCases":true,"submits":12,"accepts":1,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.992Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1562,"title":"过年的负鼠","content":"#### 题目描述\n> 从前有一个负鼠，它喜欢装死，后来到了猪年，它开始学习编程了，并编出了第一个程序。\n\n> 现在它打算把这个程序提交到TSOJ上，测评机震惊之余给出了Accept的结果。\n\n> 现在聪明的你为了拿钱也来做这道题了~\n\n#### 输入描述\n> 本题没有输入\n\n#### 输出描述\n> 输出区分大小写,没有任何标点","source":"sbw","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":0,"multiCases":true,"submits":8,"accepts":1,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.996Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1563,"title":"剥鹌鹑蛋的负鼠","content":"#### 题目描述\n> 负鼠写完代码后，突然想剥鹌鹑蛋了。\n\n> 假如它每分钟能剥96颗鹌鹑蛋，请问第2147483647+1分钟能剥多少颗\n#### 输入描述\n> 本题没有输入描述\n#### 输出描述\n> 输出第2147483647+1分钟能剥多少颗\n#### 样例输入\n#### 样例输出","source":"sbw","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":0,"multiCases":true,"submits":1,"accepts":1,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:14.999Z","updatedAt":"2019-09-10T08:14:15.000Z","id":1564,"title":"众所周知，zbj特别喜欢吸猫","content":"#### 题目描述\n> 众所周知，zbj 特别喜欢吸猫。今年对于他来说，就是喵年。就像人爱吃零食一样，喵星人也爱吃零食罐头，又恰逢过年，因此 zbj 决定去商店购买零食罐头。（特别提醒，零食罐头不能替代主食） 因为喂猫心切，zbj 可以利用膜法破坏障碍物，每次可以破坏一行或者一列或者一条 45° 斜线上的所有障碍物。因为撸猫太多，他最近法术能力下降，只能施法两次。他每单位时间可以走一格，可以走的方向是：上、下、左、右。请你帮他判断是否可以到达商店，若可以到达，求出到达商店的最短时间。\n\n#### 输入描述\n> 本题为多组输入输出。\n> 一共 n 行 m 列，表示一张 n*m 的南京市地图。\n> 'S' 表示 zbj 的家的位置，'T' 表示商店的位置，'.' 表示可通过的格子，'W' 表示墙壁型障碍，不可跨越。'F' 表示食物型障碍，该障碍可以穿过，若是穿过该障碍，会因为香气影响，暂停一次行走。'C' 表示猫舍型障碍，该障碍可以穿过，若是穿过该障碍，会因为停下来看猫而暂停行走两次。\n> 2 <= n, m <= 1000 ，数据保证 S 与 T 不建在障碍上。\n#### 输出描述\n> 一行，包含一个整数，表示到达商店最短的时间。若无解，请输出 \"miaowu~\" （不包括引号）\n\n#### 样例输入\n> 6 6\n\n> WWWWTW\n\n> WWWW.W\n\n> WWWWCW\n\n> WWWW.W\n\n> WWFW.W\n\n> WS...C\n\n#### 样例输出\n> 8","source":"sbw","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":0,"multiCases":true,"submits":3,"accepts":2,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:15.003Z","updatedAt":"2019-09-10T08:14:16.000Z","id":1565,"title":"众所周知，zbj的数学功底非常出色","content":"#### 题目描述\n> 众所周知zbj的数学功底非常出色，于是有小朋友向他提出了一个数学问题：给定任意的一个正整数n，以n为斜边最多可以构造多少个边长均为整数的直角三角形。\n\n> 请问，你可以帮他解决这个问题吗？\n\n>样例解释：对于5来说，存在这样的一个三角形三边长分别是3,4,5（注意4,3,5这与它是同一个三角形）它们构成了一个直角三角形，而对于6则不存在由它为斜边构造的直角三角形。\n#### 输入描述\n> 第一行一个T（1<=T<=100)，表示小朋友提问的次数。接下来T行每行一个正整数n（1<=n<=45000)表示给定的斜边长度n。\n\n#### 输出描述\n> 包含一个正整数，表示有多少个满足条件的三角形，如果一个也没有的话，那么请你输出\"miaowu~\"。\n\n#### 样例输入\n> 2\n\n> 5\n\n> 6\n\n#### 样例输出\n> 1\n\n> miaowu~","source":"sbw","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":0,"multiCases":true,"submits":3,"accepts":2,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:15.090Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1591,"title":"结果填空：标签","content":"\n![图片描述](/static/pic/2019-05-20 14:59:20a.png)\n","source":"cjy","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":0,"multiCases":true,"submits":17,"accepts":9,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:15.092Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1592,"title":"结果填空：101串","content":"\n![图片描述](/static/pic/2019-05-20 14:59:39b.png)\n","source":"cjy","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":0,"multiCases":true,"submits":12,"accepts":8,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:15.095Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1593,"title":"结果填空：游戏","content":"\n![图片描述](/static/pic/2019-05-20 14:59:52c.png)\n","source":"cjy","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":0,"multiCases":true,"submits":4,"accepts":2,"restricted":false,"type":null,"closed":false},{"createdAt":"2019-08-17T11:34:15.099Z","updatedAt":"2019-09-11T15:56:10.000Z","id":1594,"title":"程序设计：公约数","content":"![图片描述](/static/pic/2019-05-20 15:00:07d1.png)\n\n![图片描述](/static/pic/2019-05-20 15:00:13d2.png)\n\n![图片描述](/static/pic/2019-05-20 15:00:18d3.png)","source":"cjy","timeLimit":1,"memoryLimit":32,"difficulty":null,"cases":0,"multiCases":true,"submits":18,"accepts":1,"restricted":false,"type":null,"closed":false}]